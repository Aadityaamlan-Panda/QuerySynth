{
  " All root to leaf paths": "/**Question:**\n\nWrite a program to print the path from the root to a given node in a binary tree. You are given a binary tree and a node value. You need to find and print the path from the root to the node.\n\n**Approach:**\n\nTo find the path from the root to the given node, we can use a recursive function. The idea is to traverse the tree from the root and keep track of the path in a vector. If the target node is found, add the node's value to the path vector, and return true. Otherwise, recursively search for the target node in the left and right subtrees. If the target node is not found, remove the last node from the path vector before returning false.\n\n**Complexity Analysis:**\n\nLet N be the number of nodes in the binary tree.\n\n- Time Complexity: The time complexity of the recursive function is O(N) as we may visit all nodes in the worst case.\n- Space Complexity: The space complexity is O(N) due to the space used by the recursion stack and the path vector.\n\n**Code:**/\n\nbool findPath(TreeNode* root, int target, vector<int>& path) {\n    if (!root) return false;\n\n    path.push_back(root->val);\n\n    if (root->val == target) {\n        return true;\n    }\n\n    if (findPath(root->left, target, path) || findPath(root->right, target, path)) {\n        return true;\n    }\n\n    path.pop_back();\n    return false;\n}\n\nvector<int> getPathFromRootToNode(TreeNode* root, int target) {\n    vector<int> path;\n    findPath(root, target, path);\n    return path;\n}\n\n\n",
  " Assign Cookies": "/*\nQuestion:\nAssume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\n\nEach child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n\nExample:\nInput: g = [1,2,3], s = [1,1]\nOutput: 1\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n\nApproach:\n1. Sort the greed factor array g and the cookie size array s in ascending order.\n2. Initialize a counter variable child to track the number of content children.\n3. Iterate over the cookie size array s and check if the current cookie size is greater than or equal to the greed factor of the current child.\n4. If it is, increment the child counter and move to the next child.\n5. Finally, return the total number of content children.\n\nComplexity Analysis:\n- Sorting the arrays takes O(n log n) time, where n is the size of the arrays.\n- The iteration over the arrays takes O(n) time.\n- Therefore, the overall time complexity is O(n log n).\n\nCode:\n*/\n\nint findContentChildren(vector<int>& g, vector<int>& s) {\n    sort(g.begin(), g.end());\n    sort(s.begin(), s.end());\n    int child = 0;\n    for (int i = 0; i < s.size() && child < g.size(); i++) {\n        if (s[i] >= g[child])\n            child++;\n    }\n    return child;\n}\n",
  " Best time to buy and sell stocks": "/*\nQUESTION:\nYou are given an array prices where prices[i] is the price of a given stock on the ith day.\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n\nExample:\nInput: prices = [7, 1, 5, 3, 6, 4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\nAPPROACH:\n- Initialize a variable minprice with the price on the first day and initialize ans to 0.\n- Iterate through the array from the second day to the last day.\n- Update ans with the maximum of its current value and the difference between the current price and minprice.\n- Update minprice with the minimum of its current value and the current price.\n- Return the final value of ans.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n), where n is the length of the prices array.\n- The space complexity is O(1) as we are using constant extra space.\n- Overall, the algorithm runs in O(n) time and O(1) space.\n\nCODE:\n*/\n\nint maxProfit(vector<int>& prices) {\n    int minprice = prices[0];\n    int ans = 0;\n    for(int i = 1; i < prices.size(); i++){\n        ans = max(ans, prices[i] - minprice);\n        minprice = min(minprice, prices[i]);\n    }\n    return ans;\n}\n",
  " Bridges in graph": "/*\nQUESTION:-\nThere are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.\nA critical connection is a connection that, if removed, will make some servers unable to reach some other server.\nReturn all critical connections in the network in any order.\n\nApproach:\n1. We can use Tarjan's algorithm to find the critical connections in the network.\n2. Tarjan's algorithm is used to find bridges in an undirected graph, which are exactly the critical connections.\n3. We perform a depth-first search (DFS) on the graph and keep track of the timestamp (time) when each node is visited.\n4. We also maintain two arrays, tin and low, to store the timestamp of each node and the lowest timestamp reachable from the node using a back edge or a cross edge, respectively.\n5. During the DFS, if we encounter an edge (u, v) such that low[v] > tin[u], it means the edge (u, v) is a critical connection (bridge).\n6. We add all such critical connections to the result.\n\nComplexity Analysis:\n- Let n be the number of servers and m be the number of connections in the network.\n- The time complexity of this approach is O(n + m) since we perform a single DFS on the graph.\n- The space complexity is O(n + m) to store the graph adjacency list and O(n) for the auxiliary arrays.\n*/\n\n\nint time;\n\nvoid dfs(int node, int parent, int tin[], int low[], vector<int> adj[], vector<vector<int>>& ans, vector<bool>& vis) {\n    vis[node] = true;\n    low[node] = tin[node] = time;\n    time++;\n\n    for (auto v : adj[node]) {\n        if (v == parent) continue;\n        if (vis[v]) {\n            low[node] = min(low[node], low[v]);\n        } else {\n            dfs(v, node, tin, low, adj, ans, vis);\n            low[node] = min(low[node], low[v]);\n            if (low[v] > tin[node])\n                ans.push_back({v, node});\n        }\n    }\n}\n\nvector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {\n    time = 0;\n    vector<int> adj[n];\n    for (auto c : connections) {\n        adj[c[0]].push_back(c[1]);\n        adj[c[1]].push_back(c[0]);\n    }\n    vector<vector<int>> ans;\n    vector<bool> vis(n);\n    int tin[n], low[n];\n    dfs(0, -1, tin, low, adj, ans, vis);\n    return ans;\n}\n",
  " Ceil in BST": "/**QUESTION:**\n\nGiven a Binary Search Tree (BST) and a number `X`, find the Ceil of `X`. Ceil(X) is a number that is either equal to `X` or is immediately greater than `X` in the BST.\n\nIf the Ceil of `X` could not be found, return `-1`.\n\n**Example 1:**\n\nInput:\n\n      5\n    /   \\\n   1     7\n    \\\n     2 \n      \\\n       3\nX = 3\n\nOutput: 3\n\nExplanation: We find 3 in the BST, so the ceil of 3 is 3.\n\n**APPROACH:**\n\nTo find the Ceil of a given number `X`, we can perform a traversal of the BST and keep track of the node with the smallest value that is greater than or equal to `X`. \nWe can use a recursive function to traverse the BST while updating the answer (`ans`) whenever we find a node with a greater value than `X`. If we find an exact match for `X`, we can directly set `ans` to `X`.\n\n**COMPLEXITY ANALYSIS:**\n\nThe time complexity of this approach is O(h), where `h` is the height of the BST. In the worst case, the height of the BST can be `N` (for a skewed tree), where `N` is the number of nodes in the BST. \nIn the average case, the height is usually log(N) for a balanced BST.\n\nThe space complexity is O(1) since we are using a constant amount of extra space (variables) to store the intermediate results.\n\n**CODE:**/\n\n\nvoid solve(Node* root, int x, int& ans) {\n    if (!root) return;\n    if (root->data == x) {\n        ans = root->data;\n        return;\n    } \n    if (root->data > x) {\n        ans = root->data;\n        return solve(root->left, x, ans);\n    }\n    return solve(root->right, x, ans);\n}\n\nint findCeil(Node* root, int input) {\n    if (root == NULL) return -1;\n    int ans = -1;\n    solve(root, input, ans);\n    return ans;\n}",
  " Climbing Stairs": "/*\nQUESTION:-\nYou are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\nApproach:\n1. We can use dynamic programming with memoization to calculate the number of distinct ways to climb the staircase.\n2. We define a helper function fmemo(n, dp) that calculates the number of distinct ways to climb n steps using memoization.\n3. The function checks if the number of ways to climb n steps is already calculated and stored in the dp array. If yes, it returns the value from dp.\n4. Otherwise, it calculates the number of ways to climb n steps by recursively calling fmemo(n-1, dp) and fmemo(n-2, dp) and stores the result in dp.\n5. The base cases are when n is 1 or 2, in which case the function returns n.\n6. In the main function climbStairs(n), we check if n is 1 or 2. If yes, we directly return n as the number of distinct ways to climb.\n7. Otherwise, we create a dp array of size n+1 initialized with -1 and call the fmemo function passing n and the dp array as arguments.\n\nComplexity Analysis:\n- The time complexity of the fmemo function is O(n) because we are calculating and storing the number of ways to climb n steps.\n- The space complexity is also O(n) to store the dp array.\n*/\n\n\n// Memoization\nint fmemo(int n, vector<int>& dp) {\n    if (n == 1 || n == 2)\n        return dp[n] = n;\n    if (dp[n] != -1)\n        return dp[n];\n    return dp[n] = fmemo(n - 1, dp) + fmemo(n - 2, dp);\n}\n\n// Tabulation\nint ftab(int n){\n    vector<int> dp(n+1);\n    dp[1] = 1, dp[2] = 2;\n    for(int i=3; i<=n; i++)\n        dp[i] = dp[i-1]+dp[i-2];\n    return dp[n];\n}\n\n// Space Optimization\nint fopt(int n){\n    int p1 = 1, p2 = 2, ans = 0;\n    for(int i=3; i<=n; i++){\n        ans = p1+p2;\n        p1 = p2, p2 = ans;\n    }\n    return ans;\n}\n\nint climbStairs(int n) {\n    if (n == 1 || n == 2)\n        return n;\n    return fopt(n);\n}\n\n",
  " Count the number of graphs": "/*Question:-\n\nCount the number of undirected graphs that can be formed with n vertices.\n\nApproach:-\n- calculate the number of edges with formula n*n-1/2\n- return pow(2,edges) \n\nComplexity Analysis:-\n\nTime Complexity = O(1)\nSpace Complexity = O(1)\n*/\n\nint countingGraphs(int n)\n{\n    int edges = (n*(n-1))/2;\n    return pow(2,edges);\n}",
  " Count the number of provinces": "/*\nQuestion:\nGiven an n x n matrix 'isConnected' representing connections between cities (nodes), find the total number of provinces in the graph.\n\nExplanation:\n- The problem can be solved using Depth First Search (DFS).\n- We first convert the given matrix 'isConnected' into an adjacency list 'adj' representing the graph.\n- We use a 'vis' vector to keep track of visited cities, initialized to 'false' for all cities.\n- We initialize a variable 'ans' to store the number of provinces.\n- We then perform DFS from each city and mark all directly or indirectly connected cities as visited.\n- We increment the 'ans' for each unvisited city and continue the process until all cities are visited.\n- Finally, we return the 'ans' which represents the total number of provinces in the graph.\n\nTime Complexity:\n- The time complexity is O(n^2), where n is the number of cities. We traverse the entire 'isConnected' matrix to construct the adjacency list.\n\nSpace Complexity:\n- The space complexity is O(n), where n is the number of cities. We use extra space for the adjacency list and the 'vis' vector.\n\n*/\n\nvoid dfs(int node, vector<int> adj[], vector<bool>& vis){\n    vis[node] = true;\n    for(auto v : adj[node]){\n        if(!vis[v])\n            dfs(v, adj, vis);\n    }\n}\n\nint findCircleNum(vector<vector<int>>& isConnected) {\n    int ans = 0, n = isConnected.size();\n    vector<int> adj[n];\n    \n    // Convert isConnected matrix into adjacency list\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            if(isConnected[i][j] == 1){\n                adj[i].push_back(j);\n            }\n        }\n    }\n    \n    vector<bool> vis(n, false);\n    \n    // Perform DFS to find the number of provinces\n    for(int i=0; i<n; i++){\n        if(!vis[i]){\n            ans++;\n            dfs(i, adj, vis);\n        }\n    }\n\n    return ans;\n}\n",
  " Design Twitter": "/*\nQUESTION:\nDesign a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\n\nAPPROACH:\nTo design the Twitter class, we can use the following data structures:\n\n1. unordered_map<int, vector<int>> following: This map stores the users and the list of users they are following. Each user follows themselves initially.\n2. unordered_map<int, deque<pair<int, int>>> posts: This map stores the tweets of each user. Each tweet is represented by a pair of (timestamp, tweetId). We use a deque to maintain the most recent 10 tweets for each user.\n3. int time: This variable keeps track of the timestamp for tweets.\n\nThe Twitter class provides the following methods:\n\n1. Twitter(): Initializes the Twitter object.\n2. void postTweet(int userId, int tweetId): Composes a new tweet with ID tweetId by the user userId. The tweet is added to the posts map with the current timestamp. If the size of the user's tweets exceeds 10, the oldest tweet is removed.\n3. vector<int> getNewsFeed(int userId): Retrieves the 10 most recent tweet IDs in the user's news feed. It iterates through the users that the given user follows and adds their tweets to a set. The set is sorted in descending order of timestamps. The first 10 tweets are returned.\n4. void follow(int followerId, int followeeId): The user with ID followerId starts following the user with ID followeeId. The followeeId is added to the followerId's following list.\n5. void unfollow(int followerId, int followeeId): The user with ID followerId stops following the user with ID followeeId. The followeeId is removed from the followerId's following list.\n\nThe code provided implements the Twitter class with the above approach.\n\nTIME COMPLEXITY:\nThe time complexity of the postTweet method is O(1) for adding a tweet to the user's posts.\nThe time complexity of the getNewsFeed method is O(F * P * log(P)) where F is the number of users the given user follows and P is the maximum number of posts by any user. The method iterates through the posts of each followed user, which takes O(F * P) time, and sorts the tweets, which takes O(P * log(P)) time.\nThe time complexity of the follow and unfollow methods is O(1) for adding or removing a user from the following list.\n\nSPACE COMPLEXITY:\nThe space complexity is O(U + P) where U is the number of users and P is the total number of posts. The posts map stores the tweets of each user, and the size of the posts map is bounded by the number of users. The maximum size of the posts deque for each user is 10.\n*/\n\nunordered_map<int, vector<int>> following; // key = userId, value = followeeIds\nunordered_map<int, deque<pair<int, int>>> posts; // key = userId, value = posts corresponding to that userId\nint time;\n\nTwitter() {\n    time = 0;\n}\n\nvoid postTweet(int userId, int tweetId) {\n    following[userId].push_back(userId); // each user will follow themselves\n\n    if (posts.find(userId) != posts.end() && posts[userId].size() > 10)\n        posts[userId].pop_back();\n\n    posts[userId].push_front({time, tweetId});\n    time++;\n}\n\nvector<int> getNewsFeed(int userId) {\n    vector<int> ans;\n    set<pair<int, int>, greater<pair<int, int>>> allposts;\n    for (int i = 0; i < following[userId].size(); i++) {\n        int followe = following[userId][i];\n        for (int i = 0; i < posts[followe].size(); i++) {\n            allposts.insert(posts[followe][i]);\n        }\n    }\n    int siz = allposts.size();\n    int n = min(10, siz);\n    for (auto it = allposts.begin(); it != allposts.end() && n; it++) {\n        ans.push_back(it->second);\n        n--;\n    }\n    return ans;\n}\n\nvoid follow(int followerId, int followeeId) {\n    following[followerId].push_back(followeeId);\n}\n\nvoid unfollow(int followerId, int followeeId) {\n    for (int i = 0; i < following[followerId].size(); i++) {\n        if (following[followerId][i] == followeeId) {\n            following[followerId].erase(following[followerId].begin() + i);\n            return;\n        }\n    }\n}\n",
  " Find the nth fibonacci number": "/*\nQUESTION:-\nFind the nth fibonacci number.\n\nApproach:\n1. We can use dynamic programming to calculate the nth Fibonacci number.\n2. We define a helper function fibo(n, dp) that calculates the nth Fibonacci number using memoization.\n3. The function checks if the nth Fibonacci number is already calculated and stored in the dp array. If yes, it returns the value from dp.\n4. Otherwise, it calculates the nth Fibonacci number by recursively calling fibo(n-1, dp) and fibo(n-2, dp) and stores the result in dp.\n5. The base cases are when n is 0 or 1, in which case the function returns n.\n6. In the main function, we take the input for n and create a dp array of size n+1 initialized with -1.\n7. We then call the fibo function passing n and the dp array as arguments.\n8. Finally, we print the value of dp[n], which represents the nth Fibonacci number.\n\nComplexity Analysis:\n- The time complexity of the fibo function is O(n) because we are calculating and storing the Fibonacci numbers from 0 to n.\n- The space complexity is also O(n) to store the dp array.\n*/\n\n// Memoization\nint fibo(int n, vector<int>& dp) {\n    if (n == 0 || n == 1)\n        return dp[n] = n;\n    if (dp[n] != -1)\n        return dp[n];\n    return dp[n] = fibo(n - 1, dp) + fibo(n - 2, dp);\n}\n\n// Tabulation\nint fiboTab(int n){\n    vector<int> dp(n+1);\n    dp[0] = 0, dp[1] = 1;\n    for(int i=2; i<=n; i++){\n            dp[i] = dp[i-1]+dp[i-2];\n    }\n    return dp[n];\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> dp(n + 1, -1);\n    fibo(n, dp);\n    cout << dp[n];\n    return 0;\n}\n",
  " Height of binary tree": "/*\nQuestion:\nGiven the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nApproach:\n- We can calculate the maximum depth of a binary tree recursively by traversing its left and right subtrees.\n- The maximum depth of a tree is equal to the maximum of the maximum depths of its left and right subtrees, plus 1 for the root node.\n\nComplexity Analysis:\n- Since we visit each node once and perform constant time operations for each node, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(H), where H is the height of the binary tree. In the worst case, the tree can be skewed and have a height of N, resulting in O(N) space complexity. In the best case, the tree is balanced and has a height of log(N), resulting in O(log(N)) space complexity.\n\nCode:\n*/\n\nint maxDepth(TreeNode* root) {\n    if (!root) {\n        return 0;\n    }\n    return max(maxDepth(root->left), maxDepth(root->right)) + 1;\n}\n",
  " Implement min heap": "/*\nQUESTION:\nImplement a min heap with all the required methods.\n\nAPPROACH:\nA min heap is a binary tree-based data structure where the value of each parent node is less than or equal to the values of its children. The heapify operation is used to maintain the heap property, where a node is compared with its children and swapped if necessary.\n\nIn the given code, the minHeap class is implemented using a vector to store the elements. The heapify function is used to maintain the heap property by comparing the node with its left and right children and swapping if necessary. The bottomUpHeapify function is used to fix the heap property from a child node to its parent node.\n\nThe insert function adds an element to the heap by appending it to the vector and performing bottom-up heapification. The removeMin function removes the minimum element from the heap by replacing it with the last element, removing the last element, and then performing heapify. The minElement function returns the minimum element of the heap.\n\nCOMPLEXITY ANALYSIS:\n- The heapify operation takes O(log n) time complexity, where n is the number of elements in the heap.\n- The bottomUpHeapify operation also takes O(log n) time complexity.\n- The insert operation takes O(log n) time complexity.\n- The removeMin operation takes O(log n) time complexity.\n- The minElement operation takes O(1) time complexity.\n\nOverall, the time complexity of the minHeap class methods is O(log n), where n is the number of elements in the heap.\n\nCODE:-\n*/\n\n\nclass minHeap {\npublic:\n    vector<int> pq;\n\n    // Function to heapify the heap.\n    void heapify(int node) {\n        int leftChild = (2 * node) + 1;\n        int rightChild = (2 * node) + 2;\n        int smallest = node;\n\n        if (leftChild < pq.size() && pq[leftChild] < pq[smallest])\n            smallest = leftChild;\n\n        if (rightChild < pq.size() && pq[rightChild] < pq[smallest])\n            smallest = rightChild;\n\n        if (smallest != node) {\n            swap(pq[node], pq[smallest]);\n            heapify(smallest);\n        }\n    }\n\n    void bottomUpHeapify(int node) {\n        int parent = (node - 1) / 2;\n        if (parent >= 0 && pq[parent] > pq[node]) {\n            swap(pq[parent], pq[node]);\n            bottomUpHeapify(parent);\n        }\n    }\n\n    // Function to insert 'val' in the heap.\n    void insert(int val) {\n        pq.push_back(val);\n        bottomUpHeapify(pq.size() - 1);\n    }\n\n    // Function to remove the minimum element.\n    void removeMin() {\n        pq[0] = pq.back();\n        pq.pop_back();\n        heapify(0);\n    }\n\n    // Function to return the minimum element.\n    int minElement() {\n        return (pq.empty()) ? -1 : pq[0];\n    }\n};\n",
  " Implement stack using array": "/*\nQuestion:\nWrite a program to implement a Stack using Array. Your task is to use the class as shown in the comments in the code editor and complete the functions push() and pop() to implement a stack.\n\nApproach:\n- We use a class `MyStack` to represent the stack.\n- The stack is implemented using an array `arr` and a top variable to keep track of the top element.\n- The class provides two member functions: `push(int)` to push an element onto the stack and `pop()` to pop an element from the stack.\n- The `push(int)` function increments the top and adds the element to the array at the current top index.\n- The `pop()` function checks if the stack is empty (top = -1), in which case it returns -1. Otherwise, it retrieves the element at the top index, decrements the top, and returns the element.\n\nCode:\n*/\n\nclass MyStack\n{\nprivate:\n    int arr[1000];\n    int top;\n\npublic:\n    MyStack() { top = -1; }\n    int pop();\n    void push(int);\n};\n\nvoid MyStack::push(int x)\n{\n    top++;\n    arr[top] = x;\n}\n\nint MyStack::pop()\n{\n    if (top == -1) {\n        return -1;\n    }\n    int ans = arr[top];\n    top--;\n    return ans;\n}\n\n/*\nComplexity Analysis:\n- The time complexity of both `push()` and `pop()` operations is O(1) since they involve constant-time operations like incrementing/decrementing the top and accessing/modifying the array elements.\n- The space complexity is O(1) since the array has a fixed size and does not depend on the number of elements pushed into the stack.\n*/\n\n",
  " Implement Trie (Prefix Tree)": "/*\nQUESTION:\nImplement the Trie class, which supports insertion, search, and startsWith operations.\n\nApproach:\n- Create a TrieNode class with an array of child nodes, each representing a letter.\n- The Trie class maintains a root TrieNode.\n- For insertion, traverse the trie, creating new nodes as necessary for each character.\n- For search, traverse the trie, checking if nodes exist for each character and if the final node is marked as a complete word.\n- For startsWith, traverse the trie similarly to search, but don't require the final node to be marked as a complete word.\n\nComplexity Analysis:\n- Insertion, search, and startsWith operations take O(L) time, where L is the length of the word or prefix.\n- Space complexity is O(N * M), where N is the number of words and M is the average length of the words.\n\nCODE:-\n*/\n\nclass TrieNode{\npublic:\n    TrieNode* child[26];\n    bool isWord;\n\n    TrieNode(){\n        this->isWord = false;\n        for(int i=0; i<26; i++){\n            this->child[i] = NULL;\n        }\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(string word) {\n        TrieNode* curr = root;\n        for(int i=0; i<word.size(); i++){\n            int ltr = word[i] - 'a';\n            if(!curr->child[ltr])\n                curr->child[ltr] = new TrieNode();\n            curr = curr->child[ltr];\n        }\n        curr->isWord = true;\n    }\n    \n    bool search(string word) {\n        TrieNode* curr = root;\n        for(int i=0; i<word.size(); i++){\n            int ltr = word[i]-'a';\n            if(!curr->child[ltr]) return false;\n            curr = curr->child[ltr];\n        }\n        return curr && curr->isWord;\n    }\n    \n    bool startsWith(string prefix) {\n        TrieNode* curr = root;\n        for(int i=0; i<prefix.size(); i++){\n            int ltr = prefix[i]-'a';\n            if(!curr->child[ltr]) return false;\n            curr = curr->child[ltr];\n        }\n        return curr;\n    }\n};",
  " Implement Trie 2": "/*\nQUESTION:\nNinja has to implement a data structure \"TRIE\" from scratch. Implement the functions as follows:\n1) Trie(): Initializes the trie object.\n2) insert(\"WORD\"): Inserts the string \"WORD\" into the trie.\n3) countWordsEqualTo(\"WORD\"): Returns how many times the string \"WORD\" is present in the trie.\n4) countWordsStartingWith(\"PREFIX\"): Returns how many words in the trie have the string \"PREFIX\" as a prefix.\n5) erase(\"WORD\"): Deletes one occurrence of the string \"WORD\" from the trie.\n\nApproach:\n- Create a TrieNode class with an array of child nodes, each representing a letter.\n- Maintain the count of words with a specific prefix (cntPre) and the count of words (cntWord) at each node.\n- Implement insert, countWordsEqualTo, countWordsStartingWith, and erase functions using TrieNode operations.\n\nComplexity Analysis:\n- All operations take O(L) time, where L is the length of the word or prefix.\n- Space complexity is O(N * M), where N is the number of words and M is the average length of the words.\n*/\n\nclass TrieNode {\npublic:\n    int cntWord, cntPre;\n    TrieNode* child[26];\n    \n    TrieNode() {\n        this->cntPre = 0;\n        this->cntWord = 0;\n        for (int i = 0; i < 26; i++) {\n            this->child[i] = NULL;\n        }\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string &word) {\n        TrieNode* curr = root;\n        for (int i = 0; i < word.size(); i++) {\n            int ltr = word[i] - 'a';\n            if (!curr->child[ltr])\n                curr->child[ltr] = new TrieNode();\n            curr = curr->child[ltr];\n            curr->cntPre++;\n        }\n        curr->cntWord++;\n    }\n\n    int countWordsEqualTo(string &word) {\n        TrieNode* curr = root;\n        for (int i = 0; i < word.size(); i++) {\n            int ltr = word[i] - 'a';\n            if (!curr->child[ltr])\n                return 0;\n            curr = curr->child[ltr];\n        }\n        return curr->cntWord;\n    }\n\n    int countWordsStartingWith(string &prefix) {\n        TrieNode* curr = root;\n        for (int i = 0; i < prefix.size(); i++) {\n            int ltr = prefix[i] - 'a';\n            if (!curr->child[ltr])\n                return 0;\n            curr = curr->child[ltr];\n        }\n        return curr->cntPre;\n    }\n\n    void erase(string &word) {\n        TrieNode* curr = root;\n        for (int i = 0; i < word.size(); i++) {\n            int ltr = word[i] - 'a';\n            curr = curr->child[ltr];\n            curr->cntPre--;\n        }\n        curr->cntWord--;\n    }\n};\n\n",
  " Infix to postfix": "/*\nQUESTION:\nGiven an infix expression in the form of string str, convert it to a postfix expression.\n\nInfix expression: The expression of the form a op b. When an operator is in-between every pair of operands.\nPostfix expression: The expression of the form a b op. When an operator is followed for every pair of operands.\nNote: The order of precedence is: ^ greater than * equals to / greater than + equals to -.\n\nExample:\nInput: str = \"a+b*(c^d-e)^(f+g*h)-i\"\nOutput: abcd^e-fgh*+^*+i-\nExplanation:\nAfter converting the infix expression into postfix expression, the resultant expression will be abcd^e-fgh*+^*+i-\n\nAPPROACH:\n- We can use a stack to convert the infix expression to postfix.\n- We iterate through each character of the input string.\n- If the character is an operand (letter or digit), we append it to the output string.\n- If the character is an opening parenthesis '(', we push it onto the stack.\n- If the character is a closing parenthesis ')', we pop elements from the stack and append them to the output string until we encounter an opening parenthesis. We also discard the opening parenthesis from the stack.\n- If the character is an operator, we compare its precedence with the top element of the stack. If the top element has higher precedence, we pop it and append it to the output string. We repeat this process until we find an operator with lower precedence or an opening parenthesis. Then we push the current operator onto the stack.\n- After iterating through all characters, we pop any remaining elements from the stack and append them to the output string.\n\nCODE:\n*/\n\nstring infixToPostfix(string s) {\n    string ans = \"\";\n    unordered_map<char, int> precedence;\n    precedence['^'] = 3;\n    precedence['*'] = 2;\n    precedence['/'] = 2;\n    precedence['+'] = 1;\n    precedence['-'] = 1;\n    \n    stack<char> st;\n    \n    for (int i = 0; i < s.size(); i++) {\n        if (('a' <= s[i] && s[i] <= 'z') || ('A' <= s[i] && s[i] <= 'Z') || ('0' <= s[i] && s[i] <= '9')) {\n            ans.push_back(s[i]);\n        } else if (s[i] == '(') {\n            st.push(s[i]);\n        } else if (s[i] == ')') {\n            while (!st.empty() && st.top() != '(') {\n                ans.push_back(st.top());\n                st.pop();\n            }\n            st.pop();\n        } else {\n            while (!st.empty() && st.top() != '(' && precedence[st.top()] >= precedence[s[i]]) {\n                ans.push_back(st.top());\n                st.pop();\n            }\n            st.push(s[i]);\n        }\n    }\n    \n    while (!st.empty()) {\n        ans.push_back(st.top());\n        st.pop();\n    }\n    \n    return ans;\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- The time complexity of the infixToPostfix function is O(N), where N is the length of the input string.\n- We iterate through each character once, and the operations performed inside the loop are all constant time.\n- The space complexity is O(N) as we use a stack to store operators.\n*/\n",
  " Intro to BST": "/**Question:**\n\nGiven an array `order`, which represents the inorder traversal of a binary search tree (BST), the task is to check if it's valid or not.\n\n**Approach:**\n\nA binary search tree is considered valid if its inorder traversal is in non-decreasing order. We can simply iterate through the `order` array and check if each element is smaller than the next element. If we find any element that is greater than or equal to the next element, the BST is not valid, and we return `false`. Otherwise, we return `true`.\n\n**Complexity Analysis:**\n\nLet's analyze the time and space complexity of our approach:\n\n- Time Complexity: O(N)\n  - In the worst case, we need to iterate through the entire `order` array once, where N is the number of elements in the array.\n\n- Space Complexity: O(1)\n  - We are not using any additional space that grows with the input size, so the space complexity is constant.\n\n**Code:**/\n\n\nbool isValidBST(vector<int> &order) {\n    for (int i = 1; i < order.size(); i++) {\n        if (order[i - 1] >= order[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  " Introduction to trees": "/*\nQuestion:\nGiven an integer 'N', determine the maximum number of nodes present on 'Nth' level in a binary tree.\n\nApproach:\n- The number of nodes on each level of a binary tree follows a pattern.\n- The number of nodes on the Nth level is equal to 2^(N-1).\n- We can use the pow function from the cmath library to calculate the power of 2.\n\nComplexity Analysis:\n- The time complexity of this approach is O(1) as we are using a simple mathematical formula.\n- The space complexity is also O(1) as we are not using any additional space.\n\nCode:\n*/\n\nint numberOfNodes(int N) {\n    if(N <= 1) {\n        return 1;\n    }\n    return pow(2, N - 1);\n}\n",
  " Kth largest element": "/*\nQUESTION:\nGiven an integer array nums and an integer k, return the kth largest element in the array.\n\nAPPROACH:\nTo find the kth largest element in the array, we can use a min-heap of size k.\n1. Initialize a min-heap (priority queue) of size k.\n2. Insert the first k elements of the array into the min-heap.\n3. For the remaining elements in the array, if an element is larger than the top element of the min-heap, replace the top element with the current element and heapify to maintain the min-heap property.\n4. After processing all the elements, the top element of the min-heap will be the kth largest element in the array.\n\nThe findKthLargest function implements this approach. It uses a min-heap (priority queue) to find the kth largest element in the array without sorting the entire array.\n\nTIME COMPLEXITY:\nThe time complexity of the findKthLargest function is O(N log k), where N is the size of the array. Inserting elements into the min-heap and heapifying take O(log k) time, and we do this for N-k elements. The overall time complexity is dominated by the heap operations.\n\nSPACE COMPLEXITY:\nThe space complexity is O(k) as we need to store k elements in the min-heap.\n*/\n\nint findKthLargest(vector<int>& nums, int k) {\n    priority_queue<int, vector<int>, greater<int>> pq;\n    for (int i = 0; i < k; i++) {\n        pq.push(nums[i]);\n    }\n    for (int i = k; i < nums.size(); i++) {\n        if (nums[i] > pq.top()) {\n            pq.pop();\n            pq.push(nums[i]);\n        }\n    }\n    return pq.top();\n}\n",
  " Longest Common Subsequence": "/*\nQUESTION:\nGiven two strings 'text1' and 'text2', return the length of their longest \ncommon subsequence. If there is no common subsequence, return 0.\n\nA subsequence of a string is a new string generated from the original \nstring with some characters (can be none) deleted without changing the \nrelative order of the remaining characters.\n\nExample:\nInput: text1 = \"abcde\", text2 = \"ace\"\nOutput: 3\nExplanation: The longest common subsequence is \"ace\" and its length is 3.\n\nAPPROACH:\n- This problem can be solved using Dynamic Programming (DP).\n- Initialize a 2D DP array 'dp' where dp[i][j] represents the length of \n  the longest common subsequence between the prefixes text1[0..i] and \n  text2[0..j].\n- Base case: dp[i][0] = 0 (empty second string) and dp[0][j] = 0 \n  (empty first string).\n- For each character at index 'i' in text1 and each character at index \n  'j' in text2:\n  - If text1[i] == text2[j], then dp[i][j] = dp[i-1][j-1] + 1\n  - Else, dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n- The required answer will be dp[n-1][m-1] where 'n' is the length of \n  text1 and 'm' is the length of text2.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of the solution is O(n*m), where 'n' and 'm' are \n  the lengths of text1 and text2 respectively.\n- The space complexity is O(n*m) for the dp array.\n\nCODE:\n*/\n\n// Memoization\nint fmemo(int i, int j, string& s, string& r, vector<vector<int>>& dp){\n    if(i < 0 || j < 0) return 0;\n\n    if(dp[i][j] != -1) return dp[i][j];\n\n    if(s[i] == r[j]) return dp[i][j] = fmemo(i - 1, j - 1, s, r, dp) + 1;\n    else return dp[i][j] = max(fmemo(i - 1, j, s, r, dp), fmemo(i, j - 1, s, r, dp));\n}\n\n// Tabulation\nint ftab(int n, int m, string& s, string& r){\n    vector<vector<int>> dp(n+1,vector<int>(m+1,0));\n    for(int i=1; i<=n; i++){\n        for(int j=1; j<=m; j++){\n            if(s[i-1]==r[j-1]) dp[i][j] = dp[i-1][j-1]+1;\n            else dp[i][j] = max(dp[i-1][j],dp[i][j-1]);\n        }\n    }\n    return dp[n][m];\n}\n\n// Space Optimization\nint fopt(int n, int m, string& s, string& r){\n    vector<int> prev(m+1,0);\n    for(int i=1; i<=n; i++){\n        vector<int> curr(m+1,0);\n        for(int j=1; j<=m; j++){\n            if(s[i-1]==r[j-1]) curr[j] = prev[j-1]+1;\n            else curr[j] = max(prev[j],curr[j-1]);\n        }\n        prev = curr;\n    }\n    return prev[m];\n}\n\nint longestCommonSubsequence(string text1, string text2) {\n    int n = text1.size(), m = text2.size();\n    vector<vector<int>> dp(n, vector<int>(m, -1));\n    return fmemo(n - 1, m - 1, text1, text2, dp);\n}\n",
  " Longest Increasing Subsequence": "/*\nQUESTION:\nGiven an integer array nums, return the length of the longest strictly increasing subsequence.\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- Let dp[i] represent the length of the longest increasing subsequence ending at index i.\n- For each element at index i, we iterate through all the previous indices (prev) from 0 to i-1.\n- If nums[prev] is smaller than nums[i], it means we can extend the increasing subsequence ending at prev by including nums[i].\n- We update dp[i] as max(dp[prev] + 1, dp[i]).\n- Initialize a variable ans to keep track of the maximum value in dp.\n- Return ans as the length of the longest increasing subsequence.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n^2), where n is the length of the input array nums.\n- The space complexity is O(n) due to the dp array.\n- Overall, the algorithm runs in O(n^2) time and O(n) space.\n\nCODE:\n*/\n\nint ftab(int n, vector<int>& nums) {\n    vector<int> dp(n, 1);\n    for (int i = 0; i < n; i++) {\n        for (int prev = 0; prev < i; prev++) {\n            if (nums[prev] < nums[i]) {\n                dp[i] = max(dp[prev] + 1, dp[i]);\n            }\n        }\n    }\n    int ans = -1;\n    for (auto i : dp) ans = max(ans, i);\n    return ans;\n}\n\nint lengthOfLIS(vector<int>& nums) {\n    int n = nums.size();\n    return ftab(n, nums);\n}\n",
  " Longest Substring with at most K unique characters": "/*\nQUESTION:\nGiven a string 'str' and an integer 'K', find the length of the largest substring with at most 'K' distinct characters.\n\nEXAMPLE:\nFor example, if we are given 'str' = \"abbbbbbc\" and 'K' = 2, the substrings that can be formed are [\"abbbbbb\", \"bbbbbbc\"]. Hence, the answer is 7.\n\nAPPROACH:\nWe can use a sliding window approach to solve this problem.\n\n1. Create a function, kDistinctChars, that takes 'k' and the input string 's' as parameters.\n   - Initialize an unordered_map, mp, to store the frequency of characters.\n   - Initialize 'start' to 0 and 'ans' to 0.\n   - Iterate over the string from left to right:\n     - Increment the frequency of the current character in the map.\n     - If the number of distinct characters in the map exceeds 'k', move the 'start' pointer to the right and remove characters from the map until the number of distinct characters becomes equal to 'k'.\n     - Update 'ans' with the maximum length of the substring (i - start + 1).\n   - Return 'ans', which represents the length of the largest substring with at most 'k' distinct characters.\n\nCOMPLEXITY ANALYSIS:\n- Time complexity: O(n), where n is the length of the string 's'. We iterate over the string once using the sliding window approach.\n- Space complexity: O(k), as the space used by the unordered_map is proportional to the number of distinct characters, which can be at most 'k'.\n*/\n\nint kDistinctChars(int k, string &s) {\n    unordered_map<char, int> mp;\n    int start = 0, ans = 0;\n    \n    for (int i = 0; i < s.size(); i++) {\n        mp[s[i]]++;\n        \n        while (mp.size() > k) {\n            mp[s[start]]--;\n            \n            if (mp[s[start]] == 0)\n                mp.erase(s[start]);\n            \n            start++;\n        }\n        \n        ans = max(ans, i - start + 1);\n    }\n    \n    return ans;\n}\n",
  " Longest Substring Without Repeating Characters": "/*\nQuestion:\nGiven a string s, find the length of the longest substring without repeating characters.\n\nApproach:\n- We can use a sliding window approach to solve this problem.\n- We maintain a window that contains only unique characters.\n- We use a hash map to store the frequency of characters in the current window.\n- We iterate through the string and expand the window by adding one character at a time.\n- If we encounter a repeating character, we shrink the window from the left until the character is no longer in the window.\n- We keep track of the maximum window size encountered so far and return it as the result.\n\nExample:\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n\nCODE:-\n*/\n\nint lengthOfLongestSubstring(const string& s) {\n    int ans = 0;\n    unordered_map<char, int> mp;\n    int start = 0;\n    \n    for (int i = 0; i < s.size(); i++) {\n        mp[s[i]]++;\n        \n        while (mp.size() < i - start + 1) {\n            mp[s[start]]--;\n            if (mp[s[start]] == 0)\n                mp.erase(s[start]);\n            start++;\n        }\n        \n        if (mp.size() == i - start + 1)\n            ans = max(ans, i - start + 1);\n    }\n    \n    return ans;\n}\n\n// Complexity Analysis:\n// - The time complexity of this algorithm is O(N), where N is the length of the input string `s`. We iterate through each character of the string once.\n// - The space complexity is O(M), where M is the number of unique characters in the string `s`. The unordered map `mp` can store up to M key-value pairs.\n",
  " Maximal Square": "/*\nQUESTION:\nGiven an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\n\nExample:\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 4\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- We need to find the largest square containing only 1's.\n- Define a 2D DP array `dp` where dp[i][j] represents the side length of the largest square ending at (i, j).\n- The base case is dp[i][0] = matrix[i][0] and dp[0][j] = matrix[0][j].\n- Iterate through each cell (i, j) in the matrix starting from (1, 1).\n- If matrix[i][j] is '1', update dp[i][j] as the minimum of (dp[i-1][j], dp[i-1][j-1], dp[i][j-1]) + 1.\n- Update the maximum side length `maxSide` accordingly.\n- Return `maxSide * maxSide`, which is the area of the largest square containing only 1's.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(m * n), where m is the number of rows and n is the number of columns in the matrix.\n- The space complexity is O(m * n) due to the dp array.\n- Overall, the algorithm runs in O(m * n) time and O(m * n) space.\n\nCODE:\n*/\n\nint ftab(int m, int n, vector<vector<char>>& matrix){\n    vector<vector<int>> dp(m+1, vector<int>(n+1, 0));\n    int maxSide = 0;\n    for(int i = 1; i <= m; i++){\n        for(int j = 1; j <= n; j++){\n            if(matrix[i-1][j-1] == '1'){\n                int temp = min(dp[i-1][j], dp[i-1][j-1]);\n                dp[i][j] = min(dp[i][j-1], temp) + 1;\n                maxSide = max(maxSide, dp[i][j]);\n            }\n        }\n    }\n    return maxSide * maxSide;\n}\n\nint maximalSquare(vector<vector<char>>& matrix) {\n    int m = matrix.size(), n = matrix[0].size();\n    return ftab(m, n, matrix);\n}\n",
  " MCM": "/*\nQUESTION:\nGiven a sequence of matrices, find the most efficient way to multiply these matrices together. The efficient way is the one that involves the least number of multiplications.\nThe dimensions of the matrices are given in an array arr[] of size N (such that N = number of matrices + 1) where the ith matrix has the dimensions (arr[i-1] x arr[i]).\n\nExample 1:\nInput: N = 5\narr = {40, 20, 30, 10, 30}\nOutput: 26000\nExplanation: There are 4 matrices of dimension \n40x20, 20x30, 30x10, 10x30. Say the matrices are \nnamed as A, B, C, D. Out of all possible combinations,\nthe most efficient way is (A*(B*C))*D. \nThe number of operations are -\n20*30*10 + 40*20*10 + 40*10*30 = 26000.\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- The dp[i][j] represents the minimum number of scalar multiplications required to compute the matrix chain multiplication of matrices from i to j.\n- Iterate through the chain lengths from 2 to N (chain length of 2 means considering two matrices at a time).\n- For each chain length, iterate through all possible starting matrices (i).\n- For each starting matrix, calculate the cost of multiplying the matrices and update dp[i][j].\n- Finally, return dp[1][N-1], which represents the minimum number of scalar multiplications needed for the entire matrix chain multiplication.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n^3), where n is the length of the array arr.\n- The space complexity is O(n^2) due to the dp array.\n- Overall, the algorithm runs in O(n^3) time and O(n^2) space.\n\nCODE:-\n*/\n\nint fmemo(int i, int j, int arr[], vector<vector<int>>& dp){\n    if(i==j) return 0;\n\n    if(dp[i][j] != -1) return dp[i][j];\n\n    int mini = INT_MAX;\n    for(int k=i; k<j; k++){\n        int cost = arr[i-1]*arr[k]*arr[j] + fmemo(i,k,arr,dp) + fmemo(k+1,j,arr,dp);\n        mini = min(cost,mini);\n    }\n    return dp[i][j] = mini;\n}\n\nint matrixMultiplication(int N, int arr[]){\n    int i=1, j = N-1;\n    vector<vector<int>> dp(N,vector<int>(N,-1));\n    return fmemo(i,j,arr,dp);\n}\n\n",
  " Minimum bit flips": "/*\nQUESTION:\nA bit flip of a number x is choosing a bit in the binary representation of x and flipping it from either 0 to 1 or 1 to 0. Given two integers start and goal, return the minimum number of bit flips required to convert start to goal.\n\nExample:\nInput: start = 10, goal = 7\nOutput: 3\nExplanation: The binary representation of 10 and 7 are 1010 and 0111 respectively. We can convert 10 to 7 in 3 steps:\n- Flip the first bit from the right: 1010 -> 1011.\n- Flip the third bit from the right: 1011 -> 1111.\n- Flip the fourth bit from the right: 1111 -> 0111.\nIt can be shown that we cannot convert 10 to 7 in less than 3 steps. Hence, we return 3.\n\nAPPROACH:\nTo find the minimum number of bit flips required to convert start to goal, we can iterate over each bit position from right to left and compare the corresponding bits in start and goal. If they are different, we increment a counter. Finally, we return the counter.\n\nCODE:*/\nint minBitFlips(int start, int goal) {\n    int i = 0;\n    int cnt = 0;\n    while (i < 32) {\n        int startbit = (start >> i) & 1;\n        int goalbit = (goal >> i) & 1;\n        if (startbit != goalbit)\n            cnt++;\n        i++;\n    }\n    return cnt;\n}\n\n// Time Complexity: O(log n), where n is the maximum value between start and goal\n// Space Complexity: O(1)\n\n\n",
  " Minimum number of insertions to make parenthesis valid": "/*\nQUESTION:\nA parentheses string is valid if and only if:\n- It is the empty string,\n- It can be written as AB (A concatenated with B), where A and B are valid strings, or\n- It can be written as (A), where A is a valid string.\nYou are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.\nReturn the minimum number of moves required to make s valid.\n\nExample:\n\nInput: s = \"())\"\nOutput: 1\n\nApproach:\n- We can keep track of the balance of parentheses using two variables: open and close.\n- Traverse through the string, and for each character:\n  - If it's an opening parenthesis '(', increment the open count.\n  - If it's a closing parenthesis ')':\n    - If there are open parentheses available (open > 0), decrement the open count.\n    - Otherwise, increment the close count.\n- The total number of moves required to make the string valid would be equal to open + close.\n\nComplexity Analysis:\n- The solution traverses the input string once, so the time complexity is O(n), where n is the length of the string.\n- The space complexity is O(1) as we are using only two extra variables.\n\nCODE:\n*/\n\nint minAddToMakeValid(string s) {\n    int open = 0, close = 0;\n    for(char c : s) {\n        if(c == '(') {\n            open++;\n        } else {\n            if(open > 0) {\n                open--; // balance it with an open parenthesis\n            } else {\n                close++;\n            }\n        }\n    }\n    return open + close; // total moves required\n}\n",
  " N Meetings in one room": "/*\nQuestion:\nThere is one meeting room in a firm. There are N meetings in the form of (start[i], end[i]) where start[i] is the start time of meeting i and end[i] is the finish time of meeting i.\nWhat is the maximum number of meetings that can be accommodated in the meeting room when only one meeting can be held in the meeting room at a particular time?\nNote: Start time of one chosen meeting can't be equal to the end time of the other chosen meeting.\n\nExample:\nInput:\nN = 6\nstart[] = {1,3,0,5,8,5}\nend[] = {2,4,6,7,9,9}\nOutput: 4\nExplanation: Maximum four meetings can be held with the given start and end timings.\nThe meetings are - (1, 2), (3, 4), (5, 7), and (8, 9)\n\nApproach:\n- We store the meetings as pairs of (end[i], start[i]) in a vector.\n- We sort the vector in non-decreasing order based on the end time of meetings.\n- We initialize the answer as 1 and the previous meeting end time as the end time of the first meeting in the sorted vector.\n- We iterate over the meetings starting from the second meeting.\n  - If the start time of the current meeting is greater than the previous meeting end time, we increment the answer and update the previous meeting end time.\n- Finally, we return the answer.\n\nComplexity Analysis:\n- The time complexity of this approach is O(NlogN), where N is the number of meetings.\n- Sorting the meetings based on the end time takes O(NlogN) time.\n- The space complexity is O(N) as we store the meetings in a vector.\n\nCode:\n*/\n\nint maxMeetings(int start[], int end[], int n)\n{\n    vector<pair<int, int>> meet;\n    for (int i = 0; i < n; i++) {\n        meet.push_back({end[i], start[i]});\n    }\n    sort(meet.begin(), meet.end());\n    int ans = 1, prev = meet[0].first;\n    for (int i = 1; i < n; i++) {\n        if (meet[i].second > prev) {\n            ans++;\n            prev = meet[i].first;\n        }\n    }\n    return ans;\n}\n",
  " Next Greater Element": "/*\nQuestion:\nThe next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\nYou are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\nFor each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.\nReturn an array ans of length nums1.length such that ans[i] is the next greater element as described above.\n\nExample:\nInput: nums1 = [4,1,2], nums2 = [1,3,4,2]\nOutput: [-1,3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n\nApproach:\n- We can solve this problem using a stack and a hashmap.\n- First, we iterate through the `nums2` array from right to left.\n- For each element, we pop elements from the stack that are smaller than or equal to the current element and store the next greater element for each popped element in the hashmap.\n- Finally, we iterate through the `nums1` array and retrieve the next greater element from the hashmap if it exists, otherwise assign -1.\n\nCode:\n*/\n\nvoid nextGstack(vector<int>& nums, unordered_map<int, int>& mp) {\n    stack<int> st;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        while (!st.empty() && st.top() <= nums[i]) {\n            st.pop();\n        }\n        if (!st.empty())\n            mp[nums[i]] = st.top();\n\n        st.push(nums[i]);\n    }\n}\n\nvector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {\n    unordered_map<int, int> mp;\n    nextGstack(nums2, mp);\n\n    vector<int> ans(nums1.size(), -1);\n\n    for (int i = 0; i < nums1.size(); i++) {\n        if (mp.find(nums1[i]) != mp.end())\n            ans[i] = mp[nums1[i]];\n    }\n    return ans;\n}\n\n/*\nComplexity Analysis:\n- The time complexity of the `nextGreaterElement` function is O(N + M), where N is the size of `nums1` and M is the size of `nums2`.\n- The `nextGstack` function has a time complexity of O(M), where M is the size of `nums2`.\n- The space complexity is O(N), where N is the size of `nums1`, to store the result in the `ans` vector and the `mp` hashmap.\n*/",
  " Ninja Training": "/*\nQUESTION:-\nGeek is going for n days training program, he can perform any one of these three activities Running, Fighting, and Learning Practice. Each activity has some point on each day. As Geek wants to improve all his skills, he can't do the same activity on two consecutive days. Help Geek to maximize his merit points as we were given a 2D array of n*3 points corresponding to each day and activity.\n\nExample:\nInput:\nn = 3\npoints = [[1,2,5],[3,1,1],[3,3,3]]\nOutput:\n11\nExplanation:\nGeek will learn a new move and earn 5 points on the first day,\nthen on the second day, he will do running and earn 3 points,\nand on the third day, he will do fighting and earn 3 points.\nSo, the maximum points is 11.\n\nApproach:\n1. To maximize the merit points, we need to find the maximum sum of points such that the Geek can't perform the same activity on two consecutive days.\n2. We can solve this problem using dynamic programming with memoization (top-down approach).\n3. We define a helper function fmemo(n, prev, points, memo) that calculates the maximum points the Geek can earn from the nth day onwards, given that on the (n-1)th day, he performed the activity indexed by 'prev'.\n4. The function checks if the maximum points for the (n-1)th day and 'prev' activity is already calculated and stored in the memo array. If yes, it returns the value from memo.\n5. Otherwise, it calculates the maximum points for the nth day by considering all three activities except the one performed on the (n-1)th day. It then adds the points for the nth day and recursively calls the function for the (n-1)th day with the new activity and updates the maximum points.\n6. The base case is when n is less than 0, in which case the function returns 0 as there are no days to earn points.\n7. In the main function maximumPoints(points, n), we create a dp (memo) array of size n initialized with -1 and call the fmemo function for the nth day with the initial activity as -1 (since no activity is performed on the first day).\n8. Finally, we return the maximum points obtained for all three possible starting activities (running, fighting, learning practice) as the result.\n\nComplexity Analysis:\n- The time complexity of the fmemo function is O(n) because we are calculating the maximum points for each day only once and storing it in the memo array.\n- The space complexity is also O(n) to store the memo array.\n\n*/\n\n//Memoization\nint fmemo(int n, int prev, vector<vector<int>>& points, vector<vector<int>>& memo) {\n    if (n < 0)\n        return 0;\n\n    if (prev != -1 && memo[n][prev] != -1) {\n        return memo[n][prev];\n    }\n\n    int ans = 0;\n    for (int i = 0; i < 3; i++) {\n        if (i != prev) {\n            int temp = points[n][i] + fmemo(n - 1, i, points, memo);\n            ans = max(ans, temp);\n        }\n    }\n\n    if (prev != -1) {\n        memo[n][prev] = ans;\n    }\n\n    return ans;\n}\n\n//Tbaulation\nint ftab(int n, vector<vector<int>>& points) {\n    vector<vector<int>> dp(n, vector<int>(3, 0));\n\n    // Base case: for the first row, the maximum points for each column are the points in that row.\n    for (int i = 0; i < 3; i++) {\n        dp[0][i] = points[0][i];\n    }\n\n    // Calculate the maximum points for each row while considering the previous row's choices.\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < 3; j++) {\n            for (int k = 0; k < 3; k++) {\n                if (j != k) {\n                    dp[i][j] = max(dp[i][j], points[i][j] + dp[i - 1][k]);\n                }\n            }\n        }\n    }\n\n    // Find the maximum points among all choices for the last row.\n    int ans = 0;\n    for (int i = 0; i < 3; i++) {\n        ans = max(ans, dp[n - 1][i]);\n    }\n\n    return ans;\n}\n\nint maximumPoints(vector<vector<int>>& points, int n) {\n    vector<vector<int>> memo(n, vector<int>(3, -1));\n    return fmemo(n - 1, -1, points, memo);\n}\n",
  " Prim's Algorithm": "/* QUESTION:\n\nGiven a weighted, undirected and connected graph of V vertices and E edges, the task is to find the sum of weights of the edges of the Minimum Spanning Tree.\n\nExample:\n\nInput: \n3 3\n0 1 5\n1 2 3\n0 2 1\n\nOutput:\n4\nExplanation:\n\nThe Spanning Tree resulting in a weight\nof 4 is shown above.\n\nAPPROACH:\n- We will use Prim's algorithm to find the Minimum Spanning Tree (MST) of the graph.\n- The idea is to start from any vertex (let's say vertex 0) and add it to the MST.\n- Then, we will add the edges connected to vertex 0 to a priority queue (min-heap), where the edges are sorted based on their weights in ascending order.\n- We will keep adding the edges with the minimum weight to the MST and add their connected vertices to the priority queue if they are not already in the MST.\n- We will repeat this process until all vertices are added to the MST.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of Prim's algorithm is O(V^2) using an adjacency matrix representation, where V is the number of vertices.\n- If an adjacency list representation is used, the time complexity reduces to O(E + V log V), where E is the number of edges and log V is the time complexity of priority queue operations.\n- The space complexity is O(V) for the priority queue and other data structures.\n\nCODE:\n*/\n\nint minimumSpanningTree(vector<vector<int>>& edges, int n) {\n    vector<pair<int, int>> adj[n];\n    for (auto e : edges) {\n        adj[e[0]].push_back({e[2], e[1]});\n        adj[e[1]].push_back({e[2], e[0]});\n    }\n\n    vector<bool> mst(n);\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    pq.push({0, 0});\n    int ans = 0;\n\n    while (!pq.empty()) {\n        auto node = pq.top();\n        int u = node.second, uwt = node.first;\n        pq.pop();\n\n        if (!mst[u]) {\n            mst[u] = true;\n            ans += uwt;\n\n            for (auto vec : adj[u]) {\n                int v = vec.second, vwt = vec.first;\n                if (!mst[v])\n                    pq.push({vwt, v});\n            }\n        }\n    }\n\n    return ans;\n}\n",
  " Prime factors of number": "/*\nQUESTION:\nGiven a number N, find its unique prime factors in increasing order.\n\nExample:\nInput: N = 100\nOutput: 2 5\nExplanation: 2 and 5 are the unique prime factors of 100.\n\nAPPROACH:\nTo find the unique prime factors of a number N, we can iterate from 2 to sqrt(N) and check if each number divides N.\n1. Initialize an empty vector `ans` to store the prime factors.\n2. Iterate from 2 to sqrt(N):\n   - If `i` divides `N` (i.e., N % i == 0):\n     - Add `i` to `ans`.\n     - Divide `N` by `i` until it is no longer divisible by `i`.\n3. If `N` is still greater than 1, it means that `N` itself is a prime factor. Add it to `ans`.\n4. Return `ans`.\n\nCODE:*/\nvector<int> AllPrimeFactors(int n) {\n    vector<int> ans;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            ans.push_back(i);\n            while (n % i == 0)\n                n /= i;\n        }\n    }\n    if (n > 1)\n        ans.push_back(n);\n    return ans;\n}\n\n// Time Complexity: O(sqrt(N))\n// Space Complexity: O(1) (excluding the space required for the output vector)\n\n\n",
  " Shortest path in Undirected Graph having unit distance": "/*\nQUESTION:\nYou are given an undirected graph with unit weight. Find the shortest path from the source vertex to all other vertices, and if it is unreachable to reach any vertex, then return -1 for that vertex.\n\nAPPROACH:\n- To find the shortest path from the source vertex to all other vertices, we can use a BFS traversal of the graph.\n- We create an adjacency list to represent the undirected graph.\n- We use a queue to perform the BFS traversal, starting from the source vertex.\n- During the BFS traversal, we keep track of the level (or distance) of each vertex from the source vertex.\n- We maintain a boolean array to keep track of visited vertices so that we don't visit the same vertex again.\n- If a vertex is reachable from the source vertex, its distance will be equal to the number of edges in the shortest path from the source vertex.\n- After the BFS traversal is complete, we will have the distance of each vertex from the source vertex.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(N+M), where N is the number of vertices and M is the number of edges in the graph. We perform a BFS traversal, visiting each vertex and edge once.\n- Space Complexity: O(N), where N is the number of vertices. We use additional space to store the adjacency list, visited array, and the distance array.\n*/\n\nvector<int> shortestPath(vector<vector<int>>& edges, int N, int M, int src){\n    vector<int> adj[N];\n    for(auto e:edges){\n        adj[e[0]].push_back(e[1]);\n        adj[e[1]].push_back(e[0]);\n    }\n    \n    vector<bool> vis(N);\n    vector<int> dis(N, -1);\n    queue<int> q;\n    q.push(src);\n    vis[src] = true;\n    \n    int lvl = 0;\n    while(!q.empty()){\n        int siz = q.size();\n        while(siz--){\n            int node = q.front();\n            q.pop();\n            dis[node] = lvl;\n            for(auto v:adj[node]){\n                if(!vis[v]){\n                    q.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n        lvl++;\n    }\n    \n    return dis;\n}\n",
  " Sliding window maximum": "/*\nQUESTION:\nGiven an array of integers nums and a sliding window of size k, we need to find the maximum element in each sliding window as it moves from left to right.\n\nAPPROACH:\nTo solve this problem, we can use a deque (double-ended queue) to store the indices of elements in the current sliding window.\n1. We iterate through the first k elements and keep track of the maximum element by maintaining the following property:\n   - The deque stores the indices of elements in non-increasing order of their corresponding values in the nums array.\n   - If the current element is greater than or equal to the element at the back of the deque, we remove elements from the back until this condition is satisfied.\n   - This ensures that the front element of the deque is always the maximum element in the sliding window.\n2. After processing the first k elements, we start from the (k+1)th element and continue the following steps:\n   - If the index at the front of the deque is less than or equal to i-k, it means the maximum element in the previous sliding window is no longer valid. So, we remove it from the deque.\n   - Similar to step 1, we remove elements from the back of the deque until the current element is greater than or equal to the element at the back.\n   - Add the index of the current element to the deque.\n   - Add the maximum element (front of the deque) to the result for the current sliding window.\n3. Repeat step 2 until we process all elements in the nums array.\n\nExample:\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\n\nCODE:\n*/\n\nvector<int> maxSlidingWindow(vector<int>& nums, int k) {\n    deque<int> dq;\n    vector<int> ans;\n    \n    for (int i = 0; i < k; i++) {\n        while (!dq.empty() && nums[dq.back()] <= nums[i])\n            dq.pop_back();\n        dq.push_back(i);\n    }\n    \n    ans.push_back(nums[dq.front()]);\n    \n    for (int i = k; i < nums.size(); i++) {\n        if (dq.front() <= i - k)\n            dq.pop_front();\n        \n        while (!dq.empty() && nums[dq.back()] <= nums[i])\n            dq.pop_back();\n        \n        dq.push_back(i);\n        ans.push_back(nums[dq.front()]);\n    }\n    \n    return ans;\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- Let n be the number of elements in the nums array.\n- The time complexity of the solution is O(n) because we iterate through each element once.\n- The space complexity is O(k) because the deque stores at most k elements at any given time.\n*/\n",
  " Subset sum equal to k": "/*\nQUESTION:-\nGiven an array of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum.\n\nExample:\nInput:\nN = 6\narr[] = {3, 34, 4, 12, 5, 2}\nsum = 9\nOutput: 1\nExplanation: Here there exists a subset with sum = 9, 4+3+2 = 9.\n\nApproach:\n1. We can solve this problem using dynamic programming with memoization (top-down approach).\n2. We define a helper function fmemo(i, sum, arr, dp) that checks if there is a subset of elements up to index i whose sum is equal to the given sum.\n3. The function checks if the target sum is 0. If yes, it means we have found a subset with the given sum and returns true.\n4. If i is 0, it means we are at the first element, so the function checks if the first element is equal to the target sum.\n5. If the dp value for the current index and sum is already calculated, it returns the stored value.\n6. If the current element (arr[i]) is less than or equal to the target sum, the function recursively checks for two cases: including the current element in the subset (by reducing the sum) or excluding it (by not changing the sum).\n7. If any of the above cases returns true, the dp value for the current index and sum is updated to true.\n8. Finally, we return the dp value for the last index and the given sum.\n\nComplexity Analysis:\n- The time complexity of the fmemo function is O(n * sum), where n is the number of elements in the array and sum is the target sum. This is because the function calculates the result for each index and sum only once and stores it in the dp array.\n- The space complexity is also O(n * sum) to store the dp array.\n\n*/\n\n\n// Memoization\nbool fmemo(int i, int sum, vector<int>& arr, vector<vector<int>>& dp) {\n    if (sum == 0)\n        return true;\n\n    if (dp[i][sum] != -1)\n        return dp[i][sum];\n\n    if (i == 0)\n        return dp[i][sum] = (sum == arr[i]);\n\n    bool t = false;\n    if (arr[i] <= sum)\n        t = fmemo(i - 1, sum - arr[i], arr, dp);\n\n    bool nt = fmemo(i - 1, sum, arr, dp);\n\n    return dp[i][sum] = (t || nt);\n}\n\n// Tabulation\nbool ftab(int n, int tar, vector<int>& arr){\n    vector<vector<int>> dp(n,vector<int>(tar+1));\n    for(int i=0; i<n; i++){\n        for(int sum=0; sum<=tar; sum++){\n            if(sum==0){\n                dp[i][sum] = true;\n                continue;\n            }\n            if(i==0){\n                dp[i][sum] = (sum==arr[i]);\n                continue;\n            }\n            bool t = false;\n            if(arr[i] <= sum) t = dp[i-1][sum-arr[i]];\n            bool nt = dp[i-1][sum];\n            dp[i][sum] = (t || nt);\n        }\n    }\n    return dp[n-1][tar];\n}\n\n// Space Optimization\nbool fopt(int n, int tar, vector<int>& arr){\n    vector<int> prev(tar+1);\n    for(int i=0; i<n; i++){\n        vector<int> curr(tar+1);\n        for(int sum=0; sum<=tar; sum++){\n            if(sum==0){\n                curr[sum] = true;\n                continue;\n            }\n            if(i==0){\n                curr[sum] = (sum==arr[i]);\n                continue;\n            }\n            bool t = false;\n            if(arr[i] <= sum) t = prev[sum-arr[i]];\n            bool nt = prev[sum];\n            curr[sum] = (t || nt);\n        }\n        prev = curr;\n    }\n    return prev[tar];\n}\n\nbool isSubsetSum(vector<int> arr, int sum) {\n    int n = arr.size();\n    vector<vector<int>> dp(n, vector<int>(sum + 1, -1));\n\n    return fmemo(n - 1, sum, arr, dp);\n}\n",
  " Topological Sorting": "/*\nQUESTION:\nGiven a DAG (directed acyclic graph), print the Topological sorting of a given graph.\n\nAPPROACH:\n- Topological sorting is a linear ordering of vertices in a directed acyclic graph (DAG) such that for every directed edge u -> v, vertex u comes before v in the ordering.\n- To find the topological sorting, we can use Depth-First Search (DFS) with backtracking.\n- We perform DFS starting from each unvisited node, and as we finish exploring a node and backtrack, we add it to the front of the topological sorting order.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(V + E), where V is the number of vertices (nodes) and E is the number of edges in the graph. We visit each node and each edge exactly once during the DFS.\n- Space Complexity: O(V), where V is the number of vertices (nodes) in the graph. We use additional space to store the visited status of the nodes and the topological sorting order.\n*/\n\nbool dfs(int node, vector<int> adj[], vector<bool>& vis, vector<int>& ans){\n    vis[node] = true;\n    for(auto v : adj[node]){\n        if(!vis[v]){\n            dfs(v, adj, vis, st);\n        }\n    }\n    ans.push_back(node);\n}\n\nvector<int> topologicalSort(vector<vector<int>>& graph, int edges, int nodes) {\n    vector<int> adj[nodes];\n    for(auto it : graph){\n        adj[it[0]].push_back(it[1]);\n    }\n    vector<bool> vis(nodes);\n    vector<int> ans;\n    for(int i = 0; i < nodes; i++){\n        if(!vis[i]){\n            dfs(i, adj, vis, ans);\n        }\n    }\n\n    reverse(ans.begin(),ans.end());\n\n    return ans;\n}\n",
  "2_sum_problem": "/*\nQUESITON:-\nGiven an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\n\nExample 1:\n\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\nExample 2:\n\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n*/\n\n/*\nApproach:\n\n-> Create an empty map to store the elements and their corresponding indices.\n>  Iterate through the input array, nums, and for each element:\n    Calculate the complement by subtracting the current element from the target value.\n    Check if the complement exists in the map.\n    If the complement exists, return the indices of the current element and the complement.\n    If the complement does not exist, add the current element and its index to the map.\n-> If no solution is found, return an empty vector or a message indicating no solution exists.\n*/\n\n// CODE:-\nvector<int> twoSum(vector<int> &nums, int target)\n{\n    unordered_map<int, int> mp;\n    for (int i = 0; i < nums.size(); i++)\n    {\n        int remain = target - nums[i];\n        if (mp.find(remain) != mp.end() && mp[remain] != i)\n            return {i, mp[remain]};\n        mp[nums[i]] = i;\n    }\n    return {-1, -1};\n    // If the question asks to just return whether pair exists or not, not the indexes in that case we can sort and easily find the pair sum without extra space\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(N)",
  "Bit Manipulation": "/*QUESTION:-\nGiven a 32-bit unsigned integer num and an integer i, perform the following operations on the number:\n1. Get the ith bit.\n2. Set the ith bit.\n3. Clear the ith bit.\n\nNote: The bits are indexed from 1 instead of 0 (1-based indexing).\n\nExample:\nInput: 70, 3\nOutput: 1 70 66\nExplanation:\n- The bit at the 3rd position from the least significant bit (LSB) is 1. (1 0 0 0 1 1 0)\n- The value of the given number after setting the 3rd bit is 70.\n- The value of the given number after clearing the 3rd bit is 66. (1 0 0 0 0 1 0)\n\nApproach:\n1. Subtract 1 from i to adjust the index to 0-based.\n2. To get the ith bit, perform a bitwise AND operation between num and (1 << i). If the result is non-zero, the ith bit is set; otherwise, it is cleared.\n3. To set the ith bit, perform a bitwise OR operation between num and (1 << i).\n4. To clear the ith bit, perform a bitwise AND operation between num and the complement of (1 << i).\n\nCODE:*/\nvoid bitManipulation(int num, int i) {\n    i = i - 1; // Adjusting index to 0-based\n    \n    // Get the ith bit\n    if (num & (1 << i))\n        cout << 1 << \" \";\n    else\n        cout << 0 << \" \";\n    \n    // Set the ith bit\n    int set = num | (1 << i);\n    cout << set << \" \";\n    \n    // Clear the ith bit\n    int clear = num & (~(1 << i));\n    cout << clear;\n}\n",
  "Delete_nodes_from_dll": "/**QUESTION:**\n\nYou are given the head of a doubly Linked List and a key. Your task is to delete all occurrences of the given key and return the new doubly Linked List.\n\n**Example:**\n\nInput: \n2 <-> 2 <-> 10 <-> 8 <-> 4 <-> 2 <-> 5 <-> 2\nKey: 2\nOutput: \n10 <-> 8 <-> 4 <-> 5\nExplanation: \nAll occurrences of 2 have been deleted.\n\n**APPROACH:**\n\nTo delete all occurrences of the given key from a doubly linked list, we can traverse the list and check each node's data. If the data matches the key, we handle three cases: deleting the first node, deleting the last node, and deleting a middle node. We update the pointers accordingly to remove the node from the list.\n\n**TIME COMPLEXITY:** The time complexity is O(N), where N is the number of nodes in the doubly linked list.\n\n**SPACE COMPLEXITY:** The space complexity is O(1) since we are modifying the given linked list in-place without using any extra space.\n\n**CODE:**/\n\nvoid deleteAllOccurOfX(struct Node** head_ref, int x) {\n    Node* curr = *head_ref;\n    while (curr) {\n        if (curr->data == x) {\n            // First node\n            if (!curr->prev) {\n                *head_ref = curr->next;\n                curr->next->prev = NULL\n            }\n            // Last node\n            else if (!curr->next) {\n                curr->prev->next = curr->next;\n            }\n            // Middle node\n            else {\n                curr->next->prev = curr->prev;\n                curr->prev->next = curr->next;\n            }\n        }\n        curr = curr->next;\n    }\n}\n",
  "Find_mid_of_LL": "/*\nQUESTION:-\nGiven the head of a singly linked list, return the middle node of the linked list.\nIf there are two middle nodes, return the second middle node.\n\nExample 1:\nInput: head = [1,2,3,4,5]\nOutput: [3,4,5]\nExplanation: The middle node of the list is node 3.\n\nExample 2:\nInput: head = [1,2,3,4,5,6]\nOutput: [4,5,6]\nExplanation: Since the list has two middle nodes with values 3 and 4, we return the second one.\n*/\n\n/*\nAPPROACH:\n-> To find the middle node of a linked list, we can use the two-pointer technique.\n-> Initialize two pointers, slow and fast, to the head of the linked list.\n-> Move the slow pointer one step at a time and the fast pointer two steps at a time.\n-> When the fast pointer reaches the end of the list, the slow pointer will be at the middle node.\n-> If the total number of nodes in the list is even, there will be two middle nodes, and the slow pointer will be at the first middle node.\n-> To return the second middle node, we need to move the slow pointer one more step.\n-> Finally, return the node pointed to by the slow pointer.\n*/\n\n// CODE:-\nListNode* middleNode(ListNode* head) {\n    ListNode* slow = head;\n    ListNode* fast = head;\n    \n    while (fast && fast->next) {\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n    \n    return slow;\n}\n\n// TIME COMPLEXITY: O(N)\n// SPACE COMPLEXITY: O(1)\n",
  "Find_x_in_sorted_array": "/*\nQUESTION:-\nGiven an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\n\nExample 1:\nInput: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: The target value 9 exists in the nums array, and its index is 4.\n\nExample 2:\nInput: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: The target value 2 does not exist in the nums array, so return -1.\n*/\n\n/*\nAPPROACH:-\n1. Initialize low as 0 and high as the last index of the array.\n2. Iterate using a while loop until low is less than or equal to high.\n3. Calculate the middle index using the formula mid = low + (high - low) / 2.\n4. Compare the target value with the element at the middle index:\n   - If they are equal, return the middle index.\n   - If the target is less than the element, update high to mid - 1 and continue the search in the left half.\n   - If the target is greater than the element, update low to mid + 1 and continue the search in the right half.\n5. If the target is not found, return -1.\n*/\n\n//CODE:-\nint search(vector<int>& nums, int target) {\n    int low = 0, high = nums.size() - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (nums[mid] == target)\n            return mid;\n        else if (nums[mid] > target)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\n\n\n// TIME COMPLEXITY: O(log n)\n// - The algorithm divides the search space in half at each step, resulting in a logarithmic time complexity.\n\n// SPACE COMPLEXITY: O(1)\n// - The algorithm uses a constant amount of extra space for the variables.\n",
  "Genereate all valid parenthesis": "/*QUESTION:\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n\nExample 1:\nInput: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n\nExample 2:\nInput: n = 1\nOutput: [\"()\"]\n\nApproach:\nTo generate all combinations of well-formed parentheses, we can use a recursive approach. We can start with an empty string and keep track of the number of open parentheses and close parentheses used so far.\n1. Create a helper function called 'solve' that takes a vector of strings, a string representing the current combination, the count of open parentheses, the count of close parentheses, and the total number of pairs of parentheses as parameters.\n2. In the 'solve' function:\n   - If both the counts of open parentheses and close parentheses are equal to the total number of pairs of parentheses, add the current combination to the vector of strings.\n   - If the count of open parentheses is less than or equal to the total number of pairs of parentheses, recursively call 'solve' by appending an open parenthesis to the current combination and incrementing the count of open parentheses.\n   - If the count of open parentheses is greater than the count of close parentheses, recursively call 'solve' by appending a close parenthesis to the current combination and incrementing the count of close parentheses.\n3. Create the main function called 'generateParenthesis' that generates all combinations of well-formed parentheses using the 'solve' function.\n   - Create an empty vector of strings to store the combinations.\n   - Call the 'solve' function with an empty string, count of open parentheses as 0, count of close parentheses as 0, and the total number of pairs of parentheses as 'n'.\n   - Return the vector of strings containing all the combinations.\n\nTime Complexity: O(2^N * N), where N is the given number of pairs of parentheses.\nSpace Complexity: O(N), where N is the given number of pairs of parentheses (for the recursion stack and storing combinations).\n\nCODE:*/\n\nvoid solve(vector<string>& ans, string s, int open, int close, int n) {\n\tif (open == n && close == n){\n\t\tans.push_back(s);\n        return;\n    }\n\n\tif (open <= n)\n\t\tsolve(ans, s + '(', open + 1, close, n);\n\tif (open > close)\n\t\tsolve(ans, s + ')', open, close + 1, n);\n}\n\nvector<string> generateParenthesis(int n) {\n\tvector<string> ans;\n\tsolve(ans, \"\", 0, 0, n);\n\treturn ans;\n}\n",
  "Implement_atoi_via_recursion": "/*Your task is to implement the function atoi. The function takes a string (str) as an argument and converts it to an integer and returns it.\n\nNote: You are not allowed to use inbuilt functions.\n\nExample 1:\nInput:\nstr = \"123\"\nOutput: 123\n\nExample 2:\nInput:\nstr = \"21a\"\nOutput: -1\nExplanation: Output is -1 as not all characters are digits.\n\nApproach:\n1. We start from the last character of the string and recursively convert each digit to an integer.\n2. We use a helper function `getnum` that takes the index `i` and the string `str` as arguments.\n3. The base case is when `i` becomes negative, in which case we return 0.\n4. For each digit, we convert it to an integer by subtracting the ASCII value of '0'.\n5. We check if the digit is within the range of 0 to 9. If it is, we recursively call `getnum` for the previous index `i-1`.\n   - If the recursive call returns a valid number (`prev != 1e9`), we multiply it by 10 and add the current digit.\n   - Otherwise, we return a large value `1e9` to indicate an invalid conversion.\n6. In the main `atoi` function, we initialize `i` to the index of the last character in the string (`str.size()-1`).\n7. We call the `getnum` function with `i` and `str`.\n8. If the result (`ans`) is equal to `1e9`, it means the conversion was invalid, so we return -1.\n9. If the first character of the string is '-', we return the negative value of `ans`.\n10. Otherwise, we return `ans`.\n\nTime Complexity: O(N), where N is the length of the string.\nSpace Complexity: O(N), where N is the length of the string (due to the recursive calls).\n\nCODE:*/\nint getnum(int i, string& str)\n{\n    if (i < 0)\n        return 0;\n\n    if (i == 0) {\n        if (str[i] == '-')\n            return 0;\n\n        int digit = str[i] - '0';\n        if (0 <= digit && digit <= 9) {\n            int prev = getnum(i - 1, str);\n            if (prev != 1e9)\n                return (prev * 10) + digit;\n        }\n        return 1e9;\n    }\n\n    int digit = str[i] - '0';\n    if (0 <= digit && digit <= 9) {\n        int prev = getnum(i - 1, str);\n        if (prev != 1e9)\n            return (prev * 10) + digit;\n    }\n    return 1e9;\n}\n\nint atoi(string str)\n{\n    int i = str.size() - 1;\n    int ans = getnum(i, str);\n    if (ans == 1e9)\n        return -1;\n    if (str[0] == '-')\n        return -1 * ans;\n    return ans;\n}\n",
  "Introduction_to_Double_LL": "/*\nQUESTION:-\nGiven a doubly linked list of n elements. The task is to reverse the doubly linked list.\n\nExample 1:\n\nInput:\nLinkedList: 3 <--> 4 <--> 5\nOutput: 5 4 3\nExample 2:\n\nInput:\nLinkedList: 75 <--> 122 <--> 59 <--> 196\nOutput: 196 59 122 75\n\nAPPROACH:-\n1. Initialize two pointers `curr` and `nxt` to traverse the linked list. Set `curr` to the head of the linked list.\n2. In each iteration, store the next node in the `nxt` pointer to avoid losing the reference to the next node.\n3. Swap the `next` and `prev` pointers of the current node (`curr`).\n4. Check if the `prev` pointer of the current node (`curr->prev`) is `NULL`, which indicates that `curr` is the last node of the original linked list. If so, update the `ans` pointer to point to `curr` (the new head of the reversed linked list).\n5. Move the `curr` pointer to the previous node (`curr = curr->prev`) using the stored `nxt` pointer.\n6. Repeat steps 2-5 until `curr` becomes `NULL`, indicating that we have reached the end of the original linked list.\n7. Return the `ans` pointer, which now points to the head of the reversed linked list.\n\nTime complexity of this approach is O(N), where N is the number of nodes in the doubly linked list. We need to traverse the entire list once to reverse the links.\nSpace complexity is O(1) as we are using a constant amount of extra space to store temporary pointers during the reversal process.\n*/\n\nNode* reverseDLL(Node * head)\n{\n    Node* curr = head;\n    Node* ans = NULL;\n    while(curr){\n        Node* nxt = curr->next;\n        curr->next = curr->prev;\n        curr->prev = nxt;\n        // this is to get the last node\n        if(curr->prev==NULL)\n            ans = curr;\n        curr = curr->prev;\n    }\n    return ans;\n}",
  "Intro_to_linked_list": "/*\nQUESTION:- \nConstruct the linked list from arr and return the head of the linked list.\n\nExample 1:\n\nInput:\nn = 5\narr = [1,2,3,4,5]\nOutput:\n1 2 3 4 5\nExplanation: Linked list for the given array will be 1->2->3->4->5.\nExample 2:\n\nInput:\nn = 2\narr = [2,4]\nOutput:\n2 4\nExplanation: Linked list for the given array will be 2->4.\n\nAPPROACH:- \nThe approach to construct a linked list from an array is as follows:\n\n1. Create the head node of the linked list using the first element of the array.\n2. Initialize a current pointer to the head node.\n3. Traverse the array starting from the second element.\n4. For each element in the array, create a new node and assign the element as its data.\n5. Set the `next` pointer of the current node to the newly created node.\n6. Update the current pointer to the newly created node.\n7. Repeat steps 4-6 until all elements in the array are processed.\n8. Return the head node of the constructed linked list.\n\nCODE:-\n*/\n\nNode* constructLL(vector<int>& arr) {\n    Node* head = new Node(arr[0]);\n    Node* curr = head;\n    for(int i=1; i<arr.size(); i++){\n        curr->next = new Node(arr[i]);\n        curr = curr->next;\n    }\n    return head;\n}\n\n/*\nTIME COMPLEXITY:- O(n)\nSPACE COMPLEXITY:- O(n)\n*/",
  "Largest_element_in_array": "/*\nQUESTION:-\nGiven an array A[] of size n. The task is to find the largest element in it.\n\nExample:\n\nInput:\nn = 5\nA[] = {1, 8, 7, 56, 90}\nOutput:\n90\nExplanation:\nThe largest element of given array is 90\n*/\n\n/*\nAPPROACH:-\n-> Intialize the ans with starting element\n-> Traverse the entire array and update the ans if the element is greater then ans\n-> Finally, return the ans\n*/\n\n// CODE:-\nint largest(int arr[], int n)\n{\n    int ans = arr[0];\n    for (int i = 1; i < n; i++)\n    {\n        if (arr[i] > ans)\n            ans = arr[i];\n    }\n    return ans;\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(0)",
  "Palindrome partioning": "/*QUESTION:\nGiven a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\n\nExample:\nInput: s = \"aab\"\nOutput: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n\nApproach:\nWe can use a recursive backtracking approach to generate all possible palindrome partitioning.\n1. Create a helper function called 'solve' that takes the current index, the input string 's', a temporary vector to store the current partition, and the vector to store all partitions.\n2. In the 'solve' function:\n   - If the current index is greater than or equal to the size of the input string 's', add the current partition to the vector of partitions and return.\n   - Iterate through all possible substrings starting from the current index to the end of the string.\n   - Check if the current substring is a palindrome by using a helper function 'isPalindrome'.\n   - If the current substring is a palindrome:\n     - Add the current substring to the temporary partition vector.\n     - Recursively call the 'solve' function with the updated index by incrementing it, the same input string 's', the updated temporary partition vector, and the vector of partitions.\n     - Remove the last added substring from the temporary partition vector (backtracking).\n3. Create the main function called 'partition' that calculates and returns the vector of partitions.\n   - Initialize an empty vector to store the partitions.\n   - Initialize an empty temporary vector to store the current partition.\n   - Call the 'solve' function with the initial index as 0, the input string 's', the temporary partition vector, and the vector of partitions.\n   - Return the vector of partitions.\n\nTime Complexity: O(N * 2^N), where N is the length of the input string 's'. In the worst case, we can have 2^N possible partitions, and for each partition, we need to check if each substring is a palindrome, which takes O(N) time.\nSpace Complexity: O(N), where N is the length of the input string 's'. The space is used for storing the temporary partition vector and the vector of partitions.\n\nCODE:*/\nbool isPalindrome(string& palin){\n    int i = 0, j = palin.size() - 1;\n    while (i < j) {\n        if (palin[i] != palin[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\n\nvoid solve(int i, string& s, vector<string>& temp, vector<vector<string>>& ans) {\n    if (i >= s.size()) {\n        ans.push_back(temp);\n        return;\n    }\n\n    for (int p = i; p < s.size(); p++) {\n        string palin = s.substr(i, p - i + 1);\n        if (isPalindrome(palin)) {\n            temp.push_back(palin);\n            solve(p + 1, s, temp, ans);\n            temp.pop_back();\n        }\n    }\n}\n\nvector<vector<string>> partition(string s) {\n    vector<vector<string>> ans;\n    vector<string> temp;\n    solve(0, s, temp, ans);\n    return ans;\n}\n",
  "Pascal_triangle": "/*\n**Question:**\n\nGiven an integer `rowIndex`, return the `rowIndex`th (0-indexed) row of Pascal's triangle.\n\nIn Pascal's triangle, each number is the sum of the two numbers directly above it.\n\nExample:\n\nInput: `rowIndex = 3`\n\nOutput: `[1, 3, 3, 1]`\n*/\n\n/*\n**APPROACH:**\nTo generate the `rowIndex`th row of Pascal's triangle, we can use the property that each number is the sum of the two numbers directly above it. We start with the base case of the first row, which is `[1]`. Then, for each subsequent row, we calculate the elements using the formula `C(n, k) = C(n-1, k-1) * (n-k+1) / k`, where `C(n, k)` represents the binomial coefficient.\n\n**CODE:**\n*/\n\nvector<int> getRow(int rowIndex) {\n    vector<int> row(rowIndex + 1, 1); // Initialize the row with 1s\n    long long coefficient = 1;\n    \n    for (int col = 1; col <= rowIndex; col++) {\n        coefficient = coefficient * (rowIndex - col + 1) / col;\n        row[col] = coefficient;\n    }\n    \n    return row;\n}\n\n/*\n**COMPLEXITY ANALYSIS:**\n- Time Complexity: O(rowIndex)\n  - We iterate over each element in the row and calculate its value using the binomial coefficient formula.\n- Space Complexity: O(rowIndex)\n  - We use additional space to store the row of Pascal's triangle.\n\nOverall, the algorithm has a linear time complexity and linear space complexity.\n*/\n",
  "Remove_outer_parenthesis": "/*\nQuestion:\nGiven a valid parentheses string `s`, remove the outermost parentheses of every primitive string in the primitive decomposition of `s`.\n\nApproach:\n- We can iterate through the characters of the string and keep track of the number of open parentheses encountered.\n- Whenever we encounter an opening parenthesis, if the count of open parentheses is greater than 0, we append it to the result string.\n- When we encounter a closing parenthesis, we decrement the count of open parentheses and append it to the result string only if the count is greater than 1.\n\nCode:\n*/\nstring removeOuterParentheses(string s) {\n    string res;\n    int opened = 0;\n\n    for (auto c : s) {\n        if (c == '(') {\n            if (opened > 0)\n                res += c;\n            opened++;\n        } else {\n            if (opened > 1)\n                res += c;\n            opened--;\n        }\n    }\n\n    return res;\n}\n/*\nTime Complexity: O(N), where N is the length of the input string `s`.\nSpace Complexity: O(N), where N is the length of the input string `s`.\n*/",
  "Reverse_k_node_in_groups": "/*\nQUESTION:-\nGiven the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\n\nAPPROACH:\nThe idea is to reverse the nodes of the linked list in groups of size k.\nFirst, we need to check if there are at least k nodes remaining in the linked list. If not, we return the head as it is.\nNext, we reverse the first k nodes of the linked list. To do this, we maintain three pointers: prev, curr, and frwd.\nWe iterate through the first k nodes and at each step, we reverse the links between the nodes.\nAfter reversing the first k nodes, prev becomes the new head, and curr becomes the new tail of the reversed group.\nWe recursively call the function on the remaining linked list starting from frwd (which points to the (k+1)-th node).\nFinally, we update the next pointer of the original head to point to the reversed group obtained from the recursive call.\n\nTIME COMPLEXITY: O(N), where N is the number of nodes in the linked list.\nSPACE COMPLEXITY: O(1).\n\n*/\n\nListNode* reverseKGroup(ListNode* head, int k) {\n    ListNode* ptr = head;\n    for (int i = 0; i < k; i++) {\n        if (!ptr)\n            return head; // Return head if there are less than k nodes remaining\n        ptr = ptr->next;\n    }\n    int count = k;\n    ListNode* prev = NULL;\n    ListNode* curr = head;\n    ListNode* frwd = NULL;\n    while (count && curr) {\n        frwd = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = frwd;\n        count--;\n    }\n    if (frwd)\n        head->next = reverseKGroup(frwd, k); // Recursive call for the remaining linked list\n    return prev; // Return the new head of the reversed group\n}\n",
  "Sort_characters_by_frequency": "/*\nQuestion:\nGiven a string s, sort it in decreasing order based on the frequency of the characters.\nThe frequency of a character is the number of times it appears in the string.\n\nApproach:\n1. Create a frequency map to count the occurrences of each character in the string.\n2. Use a priority queue to sort the characters based on their frequencies in decreasing order.\n3. Iterate through the priority queue and append the characters to a new string according to their frequencies.\n\nCode:\n*/\n\nstring frequencySort(string s) {\n    unordered_map<char, int> mp;\n    for (auto c : s) {\n        mp[c]++;\n    }\n\n    priority_queue<pair<int, char>> pq;\n    for (auto it : mp) {\n        pq.push({ it.second, it.first });\n    }\n\n    string ans = \"\";\n    while (!pq.empty()) {\n        auto curr = pq.top();\n        pq.pop();\n        ans.append(curr.first, curr.second);\n    }\n\n    return ans;\n}\n\n/*\nTime Complexity: O(n log n), where n is the length of the string. Building the frequency map takes O(n) time, and the priority queue operations take O(n log n) time.\nSpace Complexity: O(n), where n is the length of the string. The space is used to store the frequency map and the priority queue.\n*/",
  "Square_root_of_number": "/*\nQUESTION:\nGiven an integer x, find the square root of x. If x is not a perfect square, then return floor(√x).\n\nExample:\n\nInput:\nx = 5\nOutput: 2\nExplanation: Since 5 is not a perfect square, the floor of the square root of 5 is 2.\n\nInput:\nx = 4\nOutput: 2\nExplanation: Since 4 is a perfect square, the square root of 4 is 2.\n\nAPPROACH:\nWe can use binary search to find the square root of x. \n1. Initialize the search space with low = 1 and high = x.\n2. While low is less than or equal to high:\n     - Calculate the mid of the search space.\n     - If the square of mid is equal to x, return mid as the square root.\n     - If the square of mid is less than x, update the answer to mid and set low = mid + 1 to search for a larger value.\n     - If the square of mid is greater than x, set high = mid - 1 to search for a smaller value.\n3. Return the answer, which represents the floor of the square root of x.\n\nCODE:\n*/\n\nlong long int floorSqrt(long long int x) \n{\n    long long int low = 1, high = x;\n    long long int ans = -1;\n    while(low <= high){\n        long long int mid = low + (high - low) / 2;\n        if(x == mid * mid)\n            return mid;\n        else if(mid * mid < x){\n            ans = mid;\n            low = mid + 1;\n        }\n        else\n            high = mid - 1;\n    }\n    return ans;\n}\n\n/*\nTime Complexity: O(log(x))\nSpace Complexity: O(1)\n*/",
  " All divisors of number": "/*\nQUESTION:\nGiven an integer N, print all the divisors of N in ascending order.\n\nExample:\nInput: 20\nOutput: 1 2 4 5 10 20\nExplanation: 20 is completely divisible by 1, 2, 4, 5, 10, and 20.\n\nAPPROACH:\nTo print all the divisors of a number N, we can iterate from 1 to sqrt(N) and check if each number divides N.\n1. Initialize an empty vector `temp` to store the divisors greater than sqrt(N).\n2. Iterate from 1 to sqrt(N):\n   - If `i` divides `N` (i.e., N % i == 0):\n     - Print `i`.\n     - If N/i != i, it means N/i is a divisor. Add it to `temp`.(we are checking N/i != i because 6*6 = 36 so our divisor should be 1 time 6)\n3. Reverse the elements in `temp` vector.\n4. Print all the elements in `temp`.\n5. The divisors of N will be printed in ascending order.\n\nCODE:*/\nvoid print_divisors(int n) {\n    vector<int> temp;\n    for (int i = 1; i * i <= n; i++) {\n        if (n % i == 0) {\n            cout << i << \" \";\n            if (n / i != i)\n                temp.push_back(n / i);\n        }\n    }\n    reverse(temp.begin(), temp.end());\n    for (auto it : temp)\n        cout << it << \" \";\n}\n\n// Time Complexity: O(sqrt(N))\n// Space Complexity: O(sqrt(N)) (excluding the space required for the output vector)\n",
  " Balanced Binary Tree": "/*\nQuestion:\nGiven a binary tree, determine if it is height-balanced.\n\nApproach:\n- We can solve this problem recursively by checking if the left and right subtrees of each node are height-balanced.\n- For each node, we calculate the height of its left and right subtrees, and check if the absolute difference of their heights is at most 1.\n- If both subtrees are height-balanced, and the absolute difference of their heights is at most 1, then the current node and its subtree are height-balanced.\n- We can use a pair of values to represent the result of the recursion: the first value indicates if the subtree is height-balanced, and the second value represents the height of the subtree.\n\nComplexity Analysis:\n- Since we visit each node once and perform constant time operations for each node, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(H), where H is the height of the binary tree. In the worst case, the tree can be skewed and have a height of N, resulting in O(N) space complexity. In the best case, the tree is balanced and has a height of log(N), resulting in O(log(N)) space complexity.\n\nCode:\n*/\n\npair<bool, int> solve(TreeNode* root) {\n    if (!root) {\n        return {true, 0};\n    }\n    auto left = solve(root->left);\n    auto right = solve(root->right);\n    int height = max(left.second, right.second) + 1;\n    bool balanced = left.first && right.first && abs(left.second - right.second) <= 1;\n    return {balanced, height};\n}\n\nbool isBalanced(TreeNode* root) {\n    auto result = solve(root);\n    return result.first;\n}\n",
  " Best time to buy and sell stock 2": "/*\nQUESTION:\nYou are given an integer array prices where prices[i] is the price of a given stock on the ith day.\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time.\nHowever, you can buy it then immediately sell it on the same day.\nFind and return the maximum profit you can achieve.\n\nExample:\nInput: prices = [7, 1, 5, 3, 6, 4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5 - 1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6 - 3 = 3.\nTotal profit is 4 + 3 = 7.\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- We need to keep track of whether we are holding a stock or not on each day.\n- Define a 2D DP array `dp` where dp[i][hold] represents the maximum profit achievable starting from day i while holding or not holding a stock.\n- The base case is dp[n][0] = dp[n][1] = 0, where n is the number of days.\n- Iterate through each day i in reverse order.\n- If holding a stock, we can either sell the stock or continue holding.\n- If not holding a stock, we can either buy the stock or continue not holding.\n- Return dp[0][0], which represents the maximum profit achievable starting from day 0 while not holding a stock.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n), where n is the number of days.\n- The space complexity is O(n) due to the dp array.\n- Overall, the algorithm runs in O(n) time and O(n) space.\n\nCODE:\n*/\n\nint fmemo(int i, int hold, vector<int>& prices, vector<vector<int>>& dp){\n    if(i == prices.size()) return 0;\n\n    if(dp[i][hold] != -1) return dp[i][hold];\n\n    if(hold){\n        // sell \n        int a = prices[i] + fmemo(i + 1, 0, prices, dp);\n        // not sell\n        int b = fmemo(i + 1, 1, prices, dp);\n        return dp[i][hold] = max(a, b);\n    }\n    else{\n        // buy\n        int a = -prices[i] + fmemo(i + 1, 1, prices, dp);\n        // not buy\n        int b = fmemo(i + 1, 0, prices, dp);\n        return dp[i][hold] = max(a, b);\n    }\n}\n\nint maxProfit(vector<int>& prices) {\n    int n = prices.size();\n    vector<vector<int>> dp(n, vector<int>(2, -1));\n    return fmemo(0, 0, prices, dp);\n}\n",
  " Binary Tree representation": "/*\nQuestion:\nYou are given an array nodes. It contains 7 integers, which represents the value of nodes of the binary tree in level order traversal. You are also given a root of the tree which has a value equal to nodes[0].\nYour task to construct a binary tree by creating nodes for the remaining 6 nodes.\n\nApproach:\n- We can solve this problem recursively by performing a level-order traversal of the tree.\n- Starting from the root node, we can recursively create the left and right child nodes using the given array of values.\n- The position of each child node in the array can be calculated based on the index of its parent node.\n\nComplexity Analysis:\n- Since we are visiting each node once, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(N) as we are using the call stack for recursion.\n\nCode:\n*/\n\nstruct node {\n    int data;\n    node* left;\n    node* right;\n};\n\nnode* newNode(int data) {\n    node* newNode = new node();\n    newNode->data = data;\n    newNode->left = NULL;\n    newNode->right = NULL;\n    return newNode;\n}\n\nnode* solve(vector<int>& vec, int i) {\n    if(i >= 7) {\n        return NULL;\n    }\n    \n    node* root = newNode(vec[i]);\n    i = 2 * i;\n    root->left = solve(vec, i + 1);\n    root->right = solve(vec, i + 2);\n    \n    return root;\n}\n\nvoid create_tree(node*& root0, vector<int>& vec) {\n    root0 = solve(vec, 0);\n}\n",
  " Check if array is heap": "/*\nQUESTION:\nGiven an array A of size N, the task is to check if the given array represents a Binary Max Heap.\n\nAPPROACH:\n1. Start from the root node and recursively check if the current node satisfies the max-heap property.\n2. The max-heap property states that every node should be greater than all of its descendants.\n3. Check if the current node is greater than its left and right children.\n4. Recursively check the max-heap property for the left and right subtrees.\n5. If the current node is greater and the left and right subtrees also satisfy the max-heap property, then the array represents a binary max heap.\n\nThe solve function is implemented to recursively check the max-heap property for each node. It checks if the current node is greater than its left and right children. If the current node is greater and the left and right subtrees also satisfy the max-heap property, then the array represents a binary max heap.\n\nThe isMaxHeap function is the main function that calls the solve function with the root node (index 0) and the size of the array. It returns true if the array represents a binary max heap, and false otherwise.\n\nTIME COMPLEXITY:\nThe time complexity of the isMaxHeap function is O(N), where N is the size of the array. This is because we need to check the max-heap property for each node in the array.\n\nSPACE COMPLEXITY:\nThe space complexity is O(N) due to the recursive calls in the solve function.\n*/\n\nbool solve(int a[], int node, int n) {\n    if (node >= n)\n        return true;\n\n    int left = (2 * node) + 1;\n    int right = (2 * node) + 2;\n\n    return (solve(a, left, n) && solve(a, right, n) && (a[node] > a[left] && a[node] > a[right]));\n}\n\nbool isMaxHeap(int a[], int n) {\n    return solve(a, 0, n);\n}\n",
  " Complete String": "/*\nQUESTION:\nNinja developed a fascination for arrays and strings, so this time his teacher gave him an array of strings 'A' of size 'N'. Each element of this array is a string. A string is called a complete string if every prefix of this string is also present in the array 'A'. Ninja is challenged to find the longest complete string in the array 'A'. If there are multiple strings with the same length, return the lexicographically smallest one, and if no string exists, return \"None\".\n\nExample:\nN = 4\nA = [\"ab\", \"abc\", \"a\", \"bp\"]\nExplanation:\n- Only prefix of the string \"a\" is \"a\", which is present in array 'A'. So, it is one of the possible strings.\n- Prefixes of the string \"ab\" are \"a\" and \"ab\", both of which are present in array 'A'. So, it is one of the possible strings.\n- Prefixes of the string \"bp\" are \"b\" and \"bp\". \"b\" is not present in array 'A'. So, it cannot be a valid string.\n- Prefixes of the string \"abc\" are \"a\", \"ab\", and \"abc\", all of which are present in array 'A'. So, it is one of the possible strings.\n- We need to find the maximum length string, so \"abc\" is the required string.\n\nApproach:\n- Create a Trie data structure to store the strings in the array 'A'.\n- Insert all the strings into the Trie.\n- Iterate through each string in array 'A':\n  - Check if the string is a valid complete string using the Trie.\n  - If it is valid, update the answer string based on the length and lexicographical order.\n\nComplexity Analysis:\n- Inserting each string into the Trie takes O(N*K) time and space, where N is the number of strings and K is the average length of strings.\n- Validating each string takes O(K) time.\n- The overall time complexity is O(N*K) and the space complexity is O(N*K), where N is the number of strings and K is the average length of strings.\n*/\n\nclass TrieNode {\npublic:\n    TrieNode* children[26];\n    bool end;\n\n    TrieNode() {\n        this->end = false;\n        for (int i = 0; i < 26; i++) {\n            this->children[i] = NULL;\n        }\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string& word) {\n        TrieNode* curr = root;\n        int n = word.size();\n        for (int i = 0; i < n; i++) {\n            int key = word[i] - 'a';\n            if (curr->children[key] == NULL) {\n                curr->children[key] = new TrieNode();\n            }\n            curr = curr->children[key];\n        }\n        curr->end = true;\n    }\n\n    bool isvalid(string& word) {\n        TrieNode* curr = root;\n        int n = word.size();\n        for (int i = 0; i < n; i++) {\n            int key = word[i] - 'a';\n            if (curr->children[key] == NULL || curr->children[key]->end == false) {\n                return false;\n            }\n            curr = curr->children[key];\n        }\n        return curr != NULL && curr->end;\n    }\n};\n\nstring completeString(int n, vector<string>& a) {\n\n    Trie tr;\n\n    for (auto it : a) {\n        tr.insert(it);\n    }\n\n    string ans = \"\";\n\n    for (auto it : a) {\n        if (tr.isvalid(it)) {\n            if (ans.size() < it.size())\n                ans = it;\n            else if (ans.size() == it.size() && it < ans)\n                ans = it;\n        }\n    }\n    if (ans.size() == 0)\n        return \"None\";\n    return ans;\n\n}\n",
  " Count and Say": "/*\nQUESTION:\nThe count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n\ncountAndSay(1) = \"1\"\ncountAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\nTo determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\n\nInput: n = 4\nOutput: \"1211\"\nExplanation:\ncountAndSay(1) = \"1\"\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\ncountAndSay(3) = say \"11\" = two 1's = \"21\"\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n\nApproach:\n- We can solve this problem using recursion.\n- The base case is when n = 1, in which case we return \"1\".\n- Otherwise, we calculate the count-and-say string for n-1 using recursion.\n- Then, we iterate through the previous string and build the new string based on the count of consecutive characters.\n\nComplexity Analysis:\n- Since we are using recursion to generate the count-and-say sequence, the time complexity is O(2^n), where n is the given input.\n- The space complexity is O(1) as we are using a constant amount of extra space for each recursion level.\n\nCODE:\n*/\n\nstring countAndSay(int n) {\n    if(n == 1) {\n        return \"1\";\n    }\n    string prev = countAndSay(n - 1);\n    string ans = \"\";\n    for(int i = 0; i < prev.size(); i++) {\n        int j = i + 1;\n        while(j < prev.size() && prev[j - 1] == prev[j]) {\n            j++;\n        }\n        ans += to_string(j - i) + prev[i];\n        i = j - 1;\n    }\n    return ans;\n}\n",
  " Count square submatrices": "/*\nQUESTION:\nGiven a m * n matrix of ones and zeros, return how many square submatrices have all ones.\n\nExample:\nInput: matrix =\n[\n  [0,1,1,1],\n  [1,1,1,1],\n  [0,1,1,1]\n]\nOutput: 15\nExplanation: \nThere are 10 squares of side 1.\nThere are 4 squares of side 2.\nThere is  1 square of side 3.\nTotal number of squares = 10 + 4 + 1 = 15.\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- We need to find the count of square submatrices with all ones.\n- Define a 2D DP array `dp` where dp[i][j] represents the side length of the largest square ending at (i, j).\n- The base case is dp[i][0] = matrix[i][0] and dp[0][j] = matrix[0][j].\n- Iterate through each cell (i, j) in the matrix starting from (1, 1).\n- If matrix[i][j] is 1, update dp[i][j] as the minimum of (dp[i-1][j], dp[i-1][j-1], dp[i][j-1]) + 1.\n- Add dp[i][j] to the `ans` variable to keep track of the total count of squares.\n- Return the `ans`.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(m * n), where m is the number of rows and n is the number of columns in the matrix.\n- The space complexity is O(m * n) due to the dp array.\n- Overall, the algorithm runs in O(m * n) time and O(m * n) space.\n\nCODE:\n*/\n\nint ftab(int m, int n, vector<vector<int>>& matrix){\n    vector<vector<int>> dp(m+1, vector<int>(n+1, 0));\n    int ans = 0;\n    for(int i = 1; i <= m; i++){\n        for(int j = 1; j <= n; j++){\n            if(matrix[i-1][j-1] == 1){\n                int temp = min(dp[i-1][j], dp[i-1][j-1]);\n                dp[i][j] = min(dp[i][j-1], temp) + 1;\n                ans += dp[i][j];\n            }\n        }\n    }\n    return ans;\n}\n\nint countSquares(vector<vector<int>>& matrix) {\n    int m = matrix.size(), n = matrix[0].size();\n    return ftab(m, n, matrix);\n}\n",
  " Count the number of substrings with exactly K unique characters": "/*\nQUESTION:\nGiven an integer array 'nums' and an integer 'k', find the number of good subarrays of 'nums'.\n\nA good array is an array where the number of different integers in that array is exactly 'k'.\n\nFor example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.\nA subarray is a contiguous part of an array.\n\nEXAMPLE:\nInput: nums = [1,2,1,2,3], k = 2\nOutput: 7\nExplanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]\n\nAPPROACH:\nWe can solve this problem using a sliding window approach.\n\n1. Create a function, kDistinctIntegers, that takes 'k' and the input vector 's' as parameters.\n   - Initialize an unordered_map, mp, to store the frequency of elements.\n   - Initialize 'start' to 0 and 'ans' to 0.\n   - Iterate over the vector from left to right:\n     - Increment the frequency of the current element in the map.\n     - If the number of distinct elements in the map exceeds 'k', move the 'start' pointer to the right and remove elements from the map until the number of distinct elements becomes equal to 'k'.\n     - Update 'ans' by adding the number of subarrays that can be formed with exactly 'k' distinct integers, which is equal to (i - start + 1).\n   - Return 'ans', which represents the total number of good subarrays.\n\n2. Create a function, subarraysWithKDistinct, that takes 'nums' and 'k' as parameters.\n   - Return the difference between the number of good subarrays with 'k' distinct integers and the number of good subarrays with 'k-1' distinct integers, which can be calculated using the kDistinctIntegers function.\n\nCOMPLEXITY ANALYSIS:\n- Time complexity: O(n), where n is the length of the input vector 'nums'. We iterate over the vector once using the sliding window approach.\n- Space complexity: O(k), as the space used by the unordered_map is proportional to the number of distinct elements, which can be at most 'k'.\n*/\n\nint kDistinctIntegers(int k, vector<int> &s) {\n    unordered_map<int, int> mp;\n    int start = 0, ans = 0;\n    \n    for (int i = 0; i < s.size(); i++) {\n        mp[s[i]]++;\n        \n        while (mp.size() > k) {\n            mp[s[start]]--;\n            \n            if (mp[s[start]] == 0)\n                mp.erase(s[start]);\n            \n            start++;\n        }\n        \n        ans += i - start + 1;\n    }\n    \n    return ans;\n}\n\nint subarraysWithKDistinct(vector<int>& nums, int k) {\n    return kDistinctIntegers(k, nums) - kDistinctIntegers(k - 1, nums);\n}\n",
  " Exceptionally odd": "/*\nQUESTION:\nGiven an array of N positive integers where all numbers occur an even number of times except one number which occurs an odd number of times. Find the exceptional number.\n\nExample:\nInput: N = 7, Arr[] = {1, 2, 3, 2, 3, 1, 3}\nOutput: 3\nExplanation: Number 3 occurs three times, which is an odd number of times, while all other numbers occur an even number of times.\n\nAPPROACH:\nTo find the exceptional number, we can use the bitwise XOR operation. XORing a number with itself results in 0, so XORing all the numbers in the array will cancel out the even occurrences, leaving only the exceptional number in the result.\n\nCODE:*/\nint getOddOccurrence(int arr[], int n) {\n    int xr = 0;\n    for (int i = 0; i < n; i++) {\n        xr = xr ^ arr[i];\n    }\n    return xr;\n}\n\n// Time Complexity: O(n), where n is the number of elements in the array\n// Space Complexity: O(1)\n\n\n",
  " Floor in BST": "// QUESTION:\n// Given a Binary Search Tree (BST) with `n` number of nodes and a value `x`, find the greatest value node of the BST which is smaller than or equal to `x`.\n// Note: If `x` is smaller than the smallest node of the BST, then return -1.\n\n// APPROACH:\n// To find the floor of `x` in the BST, we can perform a recursive traversal of the tree starting from the root. While traversing, we compare the value of the current node with `x` to find the largest value in the tree that is smaller than or equal to `x`. We update the `ans` variable with the current node's value if it is smaller than or equal to `x` and continue the traversal in the left or right subtree.\n\n// Complexity Analysis\n// Time complexity: O(h), where h is the height of the BST. In the worst case, the function needs to traverse the entire height of the BST.\n// Space complexity: O(1), as the function uses a single integer variable (`ans`) to store the result.\n\n// CODE:-\n\nint findFloor(Node* root, int x) {\n    if (!root) return -1;\n    int ans = -1;\n    while (root) {\n        if (root->data == x) {\n            ans = root->data;\n            break;\n        } else if (root->data < x) {\n            ans = root->data;\n            root = root->right;\n        } else {\n            root = root->left;\n        }\n    }\n    return ans;\n}\n\n\n",
  " Fractional Knapsack": "/*\nQuestion:\nGiven weights and values of N items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.\nNote: Unlike 0/1 knapsack, you are allowed to break the item.\n\nExample:\nInput:\nN = 3, W = 50\nvalues[] = {60, 100, 120}\nweight[] = {10, 20, 30}\nOutput:\n240.00\nExplanation: Total maximum value of items\nwe can have is 240.00 from the given\ncapacity of the sack.\n\nApproach:\n1. We will define a comparator function that compares items based on their value/weight ratio in descending order.\n2. We will sort the items array based on the comparator function.\n3. Initialize a variable loot to keep track of the total value in the knapsack.\n4. Iterate over the items array, starting from the item with the highest value/weight ratio.\n5. If the weight of the current item is greater than the remaining capacity W, we take a fraction of the item to fill the remaining capacity.\n   The fraction is determined by the remaining capacity divided by the weight of the current item.\n6. Add the fraction of the item's value to the loot.\n7. Reduce the remaining capacity by the weight of the item.\n8. Repeat steps 5-7 until the remaining capacity becomes zero or all items are considered.\n9. Finally, return the loot, which represents the maximum total value in the knapsack.\n\nComplexity Analysis:\n- The sorting step takes O(n log n) time, where n is the number of items.\n- The iteration over the items takes O(n) time.\n- Therefore, the overall time complexity is O(n log n).\n\nCode:\n*/\n\nstatic bool comp(Item a, Item b) {\n    return a.value / (a.weight * 1.0) > b.value / (b.weight * 1.0);\n}\n\ndouble fractionalKnapsack(int W, Item arr[], int n) {\n    sort(arr, arr + n, comp);\n    double loot = 0;\n    for (int i = 0; i < n && W; i++) {\n        if (arr[i].weight > W) {\n            loot += (W * (arr[i].value / (arr[i].weight * 1.0)));\n            W = 0;\n        } else {\n            loot += arr[i].value;\n            W -= arr[i].weight;\n        }\n    }\n    return loot;\n}\n",
  " Frog Jump": "/*\nQUESTION:-\nGeek wants to climb from the 0th stair to the (n-1)th stair. At a time, the Geek can climb either one or two steps.\nA height[N] array is also given. Whenever the geek jumps from stair i to stair j, the energy consumed in the jump is abs(height[i] - height[j]), where abs() means the absolute difference.\nReturn the minimum energy that can be used by the Geek to jump from stair 0 to stair N-1.\n\nApproach:\n1. We can use dynamic programming with memoization to find the minimum energy required to jump from the 0th stair to the (n-1)th stair.\n2. We define a helper function fmemo(i, h, dp) that calculates the minimum energy required to jump from the 0th stair to the ith stair using memoization.\n3. The function checks if the minimum energy for the ith stair is already calculated and stored in the dp array. If yes, it returns the value from dp.\n4. Otherwise, it calculates the minimum energy by taking two possible jumps - either from (i-1)th stair or from (i-2)th stair - and stores the result in dp[i].\n5. The base case is when i is 0, in which case the function returns 0 as the Geek is already at the 0th stair.\n6. In the main function minimumEnergy(height, n), we create a dp array of size n initialized with -1 and call the fmemo function passing n-1 (last stair), the height array, and the dp array as arguments.\n\nComplexity Analysis:\n- The time complexity of the fmemo function is O(n) because we are calculating and storing the minimum energy for each stair.\n- The space complexity is also O(n) to store the dp array.\n*/\n\n// Memoization\nint fmemo(int i, vector<int>& h, vector<int>& dp) {\n    if (i == 0)\n        return dp[i] = 0;\n\n    if (dp[i] != -1)\n        return dp[i];\n\n    int s1 = INT_MAX, s2 = INT_MAX;\n    if (i - 1 >= 0)\n        s1 = fmemo(i - 1, h, dp) + abs(h[i - 1] - h[i]);\n    if (i - 2 >= 0)\n        s2 = fmemo(i - 2, h, dp) + abs(h[i - 2] - h[i]);\n\n    return dp[i] = min(s1, s2);\n}\n\n// Tabulation\nint ftab(int n, vector<int>& h){\n    vector<int> dp(n);\n    dp[0] = 0;\n    for(int i=1; i<n; i++){\n        int s1 = INT_MAX, s2 = INT_MAX;\n        if(i-1>=0) s1 = dp[i-1]+abs(h[i-1]-h[i]);\n        if(i-2>=0) s2 = dp[i-2]+abs(h[i-2]-h[i]);\n        dp[i] = min(s1,s2);\n    }\n    return dp[n-1];\n}\n\n// Space Optimized\nint fopt(int n, vector<int>& h){\n    int p1 = 0, p2 = 0, ans = 0;\n    for(int i=1; i<n; i++){\n        int s1 = INT_MAX, s2 = INT_MAX;\n        if(i-1>=0) s1 = p1+abs(h[i-1]-h[i]);\n        if(i-2>=0) s2 = p2+abs(h[i-2]-h[i]);\n        ans = min(s1,s2);\n        p2 = p1; p1 = ans;\n    }\n    return ans;\n}\n\nint minimumEnergy(vector<int>& height, int n) {\n    return fopt(n, height);\n}\n\n",
  " Graph Representation": "/*\nQuestion:\nGiven the adjacency matrix representation of an undirected graph, your task is to return the adjacency list of the graph where each adjacency list contains the vertex itself at the first position and then all its adjacent nodes.\n\nExplanation:\n- We initialize an empty adjacency list vector of vectors.\n- For each vertex in the graph, we add the vertex itself as the first element of its adjacency list.\n- Then, for each edge (u, v) in the graph, we add v to the adjacency list of u and u to the adjacency list of v.\n- Finally, we return the adjacency list.\n\nTime Complexity:\n- The time complexity is O(m), where m is the number of edges in the graph, as we iterate through each edge once.\n\nSpace Complexity:\n- The space complexity is O(n + 2 * m), where n is the number of vertices and 2 * m is the total number of elements in all adjacency lists, as each edge is represented twice (once in the adjacency list of u and once in the adjacency list of v).\n\n*/\n\nvector<vector<int>> printAdjacency(int n, int m, vector<vector<int>>& edges) {\n    vector<vector<int>> adj(n);\n    for (int i = 0; i < n; i++) {\n        adj[i].push_back(i);\n    }\n    for (auto e : edges) {\n        adj[e[0]].push_back(e[1]);\n        adj[e[1]].push_back(e[0]);\n    }\n    return adj;\n}\n",
  " Implement queue using array": "/*\nQuestion:\nImplement a Queue using an Array. Queries in the Queue are of the following type:\n(i) 1 x   (a query of this type means pushing 'x' into the queue)\n(ii) 2     (a query of this type means to pop an element from the queue and print the popped element)\n\nApproach:\n- We use a class `MyQueue` to represent the queue.\n- The queue is implemented using an array `arr`, a front variable to keep track of the front element, and a rear variable to keep track of the next available position to insert an element.\n- The class provides two member functions: `push(int)` to push an element into the queue and `pop()` to pop an element from the front of the queue.\n- The `push(int)` function inserts the element at the rear index and increments the rear.\n- The `pop()` function checks if the queue is empty (rear == front), in which case it returns -1. Otherwise, it retrieves the element at the front index, increments the front, and returns the element.\n\nCode:\n*/\n\nclass MyQueue {\nprivate:\n    int arr[100005];\n    int front;\n    int rear;\n\npublic:\n    MyQueue() { front = 0; rear = 0; }\n    void push(int);\n    int pop();\n};\n\nvoid MyQueue::push(int x)\n{\n    arr[rear] = x;\n    rear++;\n}\n\nint MyQueue::pop()\n{\n    if (rear == front)\n        return -1;\n    int ans = arr[front];\n    front++;\n    return ans;\n}\n\n/*\nComplexity Analysis:\n- The time complexity of both `push()` and `pop()` operations is O(1) since they involve constant-time operations like accessing/modifying array elements and incrementing/decrementing front/rear indices.\n- The space complexity is O(N) where N is the maximum number of elements that can be stored in the queue (in this case, 100005) since we use an array to store the queue elements.\n*/\n\n",
  " Infix to prefix": "/*\nQUESTION:\nGiven an infix expression in the form of string str. Convert this infix expression to postfix expression.\n\nInfix expression: The expression of the form a op b. When an operator is in-between every pair of operands.\nPostfix expression: The expression of the form a b op. When an operator is followed for every pair of operands.\nNote: The order of precedence is: ^ greater than * equals to / greater than + equals to -.\n\nExample:\nInput: str = \"((A-(B/C))*((A/K)-L))\"\nOutput: \"*-A/BC-/AKL\"\nExplanation:\nAfter converting the infix expression into prefix expression, the resultant expression will be *-A/BC-/AKL.\n\nAPPROACH:\n- We can use a stack to convert the infix expression to postfix.\n- We iterate through each character of the input string from right to left.\n- If the character is an alphanumeric character, we append it to the output string.\n- If the character is an closing parenthesis '(', we push it onto the stack.\n- If the character is a opening parenthesis ')', we pop operators from the stack and append them to the output string until we encounter an closing parenthesis '('.\n- If the character is an operator, we compare its precedence with the top of the stack and pop operators with higher or equal precedence and append them to the output string. Then we push the current operator onto the stack.\n- After iterating through all characters, we pop any remaining operators from the stack and append them to the output string.\n\nCODE:\n*/\n\nstring infixToPostfix(string s) {\n    string ans = \"\";\n    unordered_map<char, int> precedence;\n    precedence['^'] = 3;\n    precedence['*'] = 2;\n    precedence['/'] = 2;\n    precedence['+'] = 1;\n    precedence['-'] = 1;\n\n    stack<char> st;\n\n    for (int i = s.size() - 1; i >= 0; i--) {\n        if (('a' <= s[i] && s[i] <= 'z') || ('A' <= s[i] && s[i] <= 'Z') || ('0' <= s[i] && s[i] <= '9')) {\n            ans.push_back(s[i]);\n        } else if (s[i] == ')') {\n            st.push(s[i]);\n        } else if (s[i] == '(') {\n            while (!st.empty() && st.top() != ')') {\n                ans.push_back(st.top());\n                st.pop();\n            }\n            st.pop(); // Pop the closing parenthesis ')'\n        } else {\n            while (!st.empty() && st.top() != ')' && precedence[st.top()] >= precedence[s[i]]) {\n                ans.push_back(st.top());\n                st.pop();\n            }\n            st.push(s[i]);\n        }\n    }\n\n    while (!st.empty()) {\n        ans.push_back(st.top());\n        st.pop();\n    }\n\n    reverse(ans.begin(), ans.end());\n    return ans;\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- The time complexity of the infixToPostfix function is O(N), where N is the length of the input string.\n- We iterate through each character once, and the operations performed inside the loop are all constant time.\n- The space complexity is O(N) as we use a stack to store operators.\n*/\n",
  " Jump Game": "/*\nQuestion:\nYou are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\nReturn true if you can reach the last index, or false otherwise.\n\nExample:\nInput: nums = [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\nApproach:\n- We maintain a variable 'farthest' to keep track of the farthest position we can reach.\n- We iterate over the array from left to right.\n- At each position, we check if the current position is reachable from the previous farthest position.\n- If the current position is beyond the farthest position, it means we cannot reach the end, so we return false.\n- Otherwise, we update the farthest position by taking the maximum of the current farthest and the current position plus the maximum jump length at that position.\n- Finally, if we reach the end of the array or beyond it, we return true.\n\nComplexity Analysis:\n- The time complexity of this approach is O(N), where N is the length of the array nums.\n- We iterate over the array once to update the farthest position.\n- The space complexity is O(1) as we use only a constant amount of extra space.\n\nCode:\n*/\n\nbool canJump(vector<int>& nums) {\n    int farthest = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (farthest < i)\n            return false;\n        farthest = max(farthest, nums[i] + i);\n    }\n    return true;\n}\n",
  " Kahn's Algorithm": "/*\nQUESTION:\nGiven a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.\n\nAPPROACH:\n- We can use Topological Sorting to check if a directed graph contains a cycle or not.\n- If a directed graph is a DAG (Directed Acyclic Graph), it means it does not contain any cycle.\n- So, to check for a cycle, we perform a variation of Topological Sorting using Kahn's algorithm, which is based on the concept of indegree.\n- If there is no cycle in the graph, we can always find a node with an indegree of 0 (no incoming edges) and remove it along with its outgoing edges.\n- We keep repeating this process, and if at any point we are unable to find a node with an indegree of 0, it means there is a cycle in the graph.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(V + E), where V is the number of vertices (nodes) and E is the number of edges in the graph. We perform a BFS-like traversal of all nodes and edges.\n- Space Complexity: O(V), where V is the number of vertices (nodes) in the graph. We use additional space to store the indegree of each node and the queue for BFS.\n*/\n\nbool isCyclic(int V, vector<int> adj[]) {\n    vector<int> indeg(V, 0);\n\n    // Calculate the indegree of each node\n    for (int i = 0; i < V; i++) {\n        for (auto it : adj[i]) {\n            indeg[it]++;\n        }\n    }\n\n    queue<int> q;\n\n    // Find nodes with indegree 0 and add them to the queue\n    for (int i = 0; i < V; i++) {\n        if (indeg[i] == 0) {\n            q.push(i);\n        }\n    }\n\n    int cnt = 0;\n\n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        cnt++;\n\n        // Remove the node and its outgoing edges\n        for (auto i : adj[node]) {\n            indeg[i]--;\n            if (indeg[i] == 0) {\n                q.push(i);\n            }\n        }\n    }\n\n    // If the count of removed nodes is not equal to the total number of nodes, there is a cycle\n    return !(cnt == V);\n}\n",
  " Kruskal's Algorithm": "/* QUESTION:\n\nGiven a weighted, undirected and connected graph of V vertices and E edges, the task is to find the sum of weights of the edges of the Minimum Spanning Tree.\n\nExample:\n\nInput: \n3 3\n0 1 5\n1 2 3\n0 2 1\n\nOutput:\n4\nExplanation:\n\nThe Spanning Tree resulting in a weight\nof 4 is shown above.\n\nAPPROACH:\n- We will use Kruskal's algorithm to find the Minimum Spanning Tree (MST) of the graph.\n- First, we will sort all the edges in non-decreasing order based on their weights.\n- Then, we will initialize a Disjoint Set data structure to keep track of connected components.\n- We will start adding edges one by one from the sorted list of edges to the MST.\n- Before adding an edge (u, v) to the MST, we will check if u and v belong to the same connected component using the Disjoint Set data structure. If they do not belong to the same connected component, we will add the edge to the MST and union the connected components of u and v.\n- We will repeat this process until all vertices are added to the MST.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of Kruskal's algorithm is O(E log E), where E is the number of edges, due to the sorting step.\n- The space complexity is O(V) for the Disjoint Set data structure and other data structures.\n\nCODE:\n*/\n\nclass DisjointSet {\n    vector<int> parent, size;\n\npublic:\n    DisjointSet(int n) {\n        parent.resize(n);\n        size.resize(n, 1);\n        for (int i = 0; i < n; i++)\n            parent[i] = i;\n    }\n\n    int findUParent(int node) {\n        if (parent[node] == node)\n            return node;\n        return parent[node] = findUParent(parent[node]);\n    }\n\n    void unionBySize(int u, int v) {\n        int uP = findUParent(u), vP = findUParent(v);\n        if (uP == vP)\n            return;\n        if (size[uP] > size[vP]) {\n            parent[vP] = uP;\n            size[uP] += size[vP];\n        } else {\n            parent[uP] = vP;\n            size[vP] += size[uP];\n        }\n    }\n};\n\nint minimumSpanningTree(vector<vector<int>>& edges, int n) {\n    DisjointSet djs(n);\n    sort(edges.begin(), edges.end());\n\n    int ans = 0;\n    for (auto e : edges) {\n        int wt = e[0], u = e[1], v = e[2];\n        if (djs.findUParent(u) != djs.findUParent(v)) {\n            ans += wt;\n            djs.unionBySize(u, v);\n        }\n    }\n\n    return ans;\n}\n",
  " Kth smallest element": "/*\nQUESTION:\nGiven an array arr[] and an integer K, where K is smaller than the size of the array, the task is to find the Kth smallest element in the given array. It is given that all array elements are distinct.\n\nAPPROACH:\nTo find the Kth smallest element in the array, we can use a max-heap of size K.\n1. Initialize a max-heap (priority queue) of size K.\n2. Insert the first K elements of the array into the max-heap.\n3. For the remaining elements in the array, if an element is smaller than the top element of the max-heap, replace the top element with the current element and heapify to maintain the max-heap property.\n4. After processing all the elements, the top element of the max-heap will be the Kth smallest element in the array.\n\nThe findKthLargest function implements this approach. It uses a max-heap (priority queue) to find the Kth smallest element in the array without sorting the entire array.\n\nTIME COMPLEXITY:\nThe time complexity of the findKthLargest function is O(N log K), where N is the size of the array. Inserting elements into the max-heap and heapifying take O(log K) time, and we do this for N-K elements. The overall time complexity is dominated by the heap operations.\n\nSPACE COMPLEXITY:\nThe space complexity is O(K) as we need to store K elements in the max-heap.\n*/\n\nint findKthSmallest(vector<int>& arr, int K) {\n    priority_queue<int> pq;\n    for (int i = 0; i < K; i++) {\n        pq.push(arr[i]);\n    }\n    for (int i = K; i < arr.size(); i++) {\n        if (arr[i] < pq.top()) {\n            pq.pop();\n            pq.push(arr[i]);\n        }\n    }\n    return pq.top();\n}\n",
  " Lowest Common Ancestor": "/* QUESTION:\n\nGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\n\nAccording to the definition of LCA on Wikipedia: \"The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\"\n\nExample 1:\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n\n\nAPPROACH:\n\nTo find the lowest common ancestor (LCA) of two nodes `p` and `q` in a binary tree, we can use a recursive approach. We start from the root of the tree and check if either `p` or `q` matches the current node. If one of them matches, it means that the current node is the LCA. Otherwise, we recursively search for `p` and `q` in the left and right subtrees.\n\nCOMPLEXITY ANALYSIS:\n\nLet `n` be the number of nodes in the binary tree.\n- Time Complexity: The time complexity of this approach is O(n) since we may have to visit all nodes of the binary tree in the worst case.\n- Space Complexity: The space complexity is O(h) for the recursive call stack, where `h` is the height of the binary tree. In the worst case, when the binary tree is skewed, the space complexity becomes O(n).\n\n\nCODE:\n*/\n\nTreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n    if (!root) return NULL;\n    if (root->val == p->val || root->val == q->val) return root;\n\n    TreeNode* lef = lowestCommonAncestor(root->left, p, q);\n    TreeNode* rig = lowestCommonAncestor(root->right, p, q);\n\n    if (!lef)\n        return rig;\n    if (!rig)\n        return lef;\n    return root;\n}\n",
  " Max Consecutive 1's": "/*QUESTION:\nGiven a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.\n\nExample 1:\nInput: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2\nOutput: 6\nExplanation: [1,1,1,0,0,1,1,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n\nAPPROACH:\n1. Initialize variables zeroCnt, start, and ans.\n2. Iterate through the array nums:\n   - If the current element is 0, increment zeroCnt.\n   - Enter a while loop to adjust the start index until zeroCnt becomes less than or equal to k.\n   - During the adjustment, decrement zeroCnt if the element at the start index is 0.\n   - Update ans by taking the maximum of the current ans and the length of the current subarray if zeroCnt is less than or equal to k.\n3. Return the maximum length of consecutive 1's (ans).\n\nCODE:*/\n\nint longestOnes(vector<int>& nums, int k) {\n    int zeroCnt = 0, start = 0, ans = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] == 0)\n            zeroCnt++;\n        while(zeroCnt > k) {\n            if(nums[start] == 0)\n                zeroCnt--;\n            start++;\n        }\n        if(zeroCnt <= k)\n            ans = max(ans, i - start + 1);\n    }\n    return ans;\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- Time complexity: O(N), where N is the length of the input array nums. We iterate through the array once.\n- Space complexity: O(1), as we are using a constant amount of additional space to store variables.\n*/\n",
  " Minimum cost to cut stick": "/*\nQUESTION:\nGiven a wooden stick of length n units. The stick is labelled from 0 to n.\nGiven an integer array cuts where cuts[i] denotes a position you should perform a cut at.\nYou should perform the cuts in order, you can change the order of the cuts as you wish.\nThe cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts.\nReturn the minimum total cost of the cuts.\n\nExample:\nInput: n = 7, cuts = [1,3,4,5]\nOutput: 16\nExplanation: Using cuts [1, 3, 4, 5] as the order, the total cost is 1 + 3 + 3 + 4 + 5 = 16.\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- Define a 2D DP array `dp` where dp[i][j] represents the minimum total cost to cut the stick between cuts[i] and cuts[j].\n- Initialize dp[i][i] to 0 because there is no cost for a single cut.\n- Iterate over the stick lengths from length 2 to the length of cuts + 1.\n- For each stick length, iterate through all possible cut starting points (i).\n- Calculate the cost for cutting the stick between cuts[i] and cuts[i + len - 1] and update the dp array.\n- Finally, return dp[0][cuts.size() - 1], which represents the minimum total cost of the cuts.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n^3), where n is the length of the cuts array.\n- The space complexity is O(n^2) due to the dp array.\n- Overall, the algorithm runs in O(n^3) time and O(n^2) space.\n\nCODE:\n*/\n\nint fmemo(int i, int j, vector<int>& cuts, vector<vector<int>>& dp){\n    if(i > j) return 0;\n\n    if(dp[i][j] != -1) return dp[i][j];\n\n    int mini = 1e9;\n    for(int k = i; k <= j; k++){\n        int cost = (cuts[j + 1] - cuts[i - 1]) + fmemo(i, k - 1, cuts, dp) + fmemo(k + 1, j, cuts, dp);\n        mini = min(cost, mini);\n    }\n    return dp[i][j] = mini;\n}\n\nint minCost(int n, vector<int>& cuts) {\n    vector<int> cut;\n    cut.push_back(0);\n    for(auto i : cuts)\n        cut.push_back(i);\n    cut.push_back(n);\n    sort(cut.begin(), cut.end());\n    int s = cut.size();\n    vector<vector<int>> dp(s, vector<int>(s, -1));\n    int i = 1, j = cuts.size();\n    return fmemo(i, j, cut, dp);\n}\n",
  " Minimum Cost to join n ropes": "/*\nQuestion:\nThere are given N ropes of different lengths, we need to connect these ropes into one rope. The cost to connect two ropes is equal to the sum of their lengths. The task is to connect the ropes with the minimum cost. Given an array arr[] containing the lengths of the ropes.\n\nExample:\nInput: arr[] = {4, 3, 2, 6}\nOutput: 29\nExplanation: The minimum cost is obtained by connecting ropes in the following order:\n1. Connect ropes of length 2 and 3, cost = 2 + 3 = 5, resulting array = {4, 5, 6}\n2. Connect ropes of length 4 and 5, cost = 4 + 5 = 9, resulting array = {9, 6}\n3. Connect ropes of length 6 and 9, cost = 6 + 9 = 15, resulting array = {15}\nTotal cost = 5 + 9 + 15 = 29\n\nApproach:\n1. Use a priority queue (min heap) to store the lengths of the ropes.\n2. Push all the rope lengths into the priority queue.\n3. While the priority queue has more than one element:\n   - Extract the two smallest ropes from the priority queue.\n   - Add their lengths together to get the cost.\n   - Push the sum back into the priority queue.\n   - Update the total cost.\n4. Return the total cost as the minimum cost of connecting the ropes.\n\nComplexity Analysis:\n- Time complexity: O(n log n), where n is the number of ropes. Inserting and extracting elements from the priority queue take O(log n) time, and the loop runs for (n-1) iterations.\n- Space complexity: O(n) to store the rope lengths in the priority queue.\n\nCode:\n*/\n\nlong long connectRopes(int* arr, int n)\n{\n    long long ans = 0;\n    priority_queue<int, vector<int>, greater<int>> pq;\n    \n    // Push all rope lengths into the priority queue\n    for (int i = 0; i < n; i++) {\n        pq.push(arr[i]);\n    }\n    \n    // Connect ropes until only one rope remains\n    while (pq.size() > 1) {\n        int a = pq.top(); pq.pop();\n        int b = pq.top(); pq.pop();\n        int sum = a + b;\n        ans += sum;\n        \n        // Push the sum back into the priority queue if there are more than one rope remaining\n        if (!pq.empty()) {\n            pq.push(sum);\n        }\n    }\n    \n    return ans;\n}\n",
  " Next Greater Element 2": "/*QUESTION:\nGiven a circular integer array `nums` (i.e., the next element of `nums[nums.length - 1]` is `nums[0]`), return the next greater number for every element in `nums`.\n\nThe next greater number of a number `x` is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.\n\nExample:\n\nInput: `nums = [1,2,1]`\nOutput: `[2,-1,2]`\nExplanation: The first 1's next greater number is 2. The number 2 doesn't have a next greater number. The second 1's next greater number needs to be searched circularly, which is also 2.\n\nAPPROACH:\nTo find the next greater number for each element in a circular array, we can utilize a stack. \nWe iterate through the array in reverse order to handle the circular nature of the array. \nFor each element, we compare it with the elements in the stack. \nIf an element in the stack is smaller than or equal to the current element, we pop it from the stack since it cannot be the next greater number.\nThe top of the stack at each iteration will hold the next greater element for the corresponding element in the array.\n\nCODE:*/\n\n// NOTE:- we could also implement this via two for loops from n-1 to 0, instead of a single loop of 2*n to 0; cause the complexity remains the same\n\nvector<int> nextGreaterElements(vector<int>& nums) {\n    vector<int> ans(nums.size(), -1);\n    stack<int> st;\n\n    for (int i = 2 * nums.size() - 1; i >= 0; i--) {\n        while (!st.empty() && nums[st.top()] <= nums[i % nums.size()])\n            st.pop();\n        \n        if (!st.empty())\n            ans[i % nums.size()] = nums[st.top()];\n        \n        st.push(i % nums.size());\n    }\n\n    return ans;\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(N), where N is the size of the input array `nums`. We iterate through the array twice: once to find the next greater element in the first pass and once to handle the circular nature of the array in the second pass.\n- The space complexity is O(N) as we use a stack to store the indices of elements.\n*/\n\n",
  " Partition array in two equal sum subsets": "/*\nQUESTION:\n\nGiven an integer array `nums`, return `true` if you can partition the array into two subsets such that the sum of the elements in both subsets is equal, or `false` otherwise.\n\nExample 1:\nInput: nums = [1,5,11,5]\nOutput: true\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\n\nAPPROACH:\n\n- To solve this problem, we can use dynamic programming.\n- We'll create a 2D DP array where `dp[i][j]` represents whether it's possible to select a subset from the first `i` elements of the `nums` array that sums up to `j`.\n- The base case is when `j` is 0, in which case it's always possible to select an empty subset.\n- For each element in the `nums` array, we have two choices: include it in the subset or exclude it.\n- So, the recurrence relation becomes:\n  dp[i][j] = dp[i - 1][j] (exclude nums[i]) || dp[i - 1][j - nums[i]] (include nums[i])\n\nCOMPLEXITY ANALYSIS:\n\n- The time complexity of this approach is O(n * sum), where `n` is the number of elements in the `nums` array and `sum` is the sum of all elements.\n\nCODE:\n*/\n// Memoization\nbool fmemo(int i, int sum, vector<int>& arr, vector<vector<int>>& dp) {\n    if (sum == 0)\n        return true;\n\n    if (dp[i][sum] != -1)\n        return dp[i][sum];\n\n    if (i == 0)\n        return dp[i][sum] = (sum == arr[i]);\n\n    bool t = false;\n    if (arr[i] <= sum)\n        t = fmemo(i - 1, sum - arr[i], arr, dp);\n\n    bool nt = fmemo(i - 1, sum, arr, dp);\n\n    return dp[i][sum] = (t || nt);\n}\n\n// Tabulation\nbool ftab(int n, int tar, vector<int>& arr){\n    vector<vector<int>> dp(n,vector<int>(tar+1));\n    for(int i=0; i<n; i++){\n        for(int sum=0; sum<=tar; sum++){\n            if(sum==0){\n                dp[i][sum] = true;\n                continue;\n            }\n            if(i==0){\n                dp[i][sum] = (sum==arr[i]);\n                continue;\n            }\n            bool t = false;\n            if(arr[i] <= sum) t = dp[i-1][sum-arr[i]];\n            bool nt = dp[i-1][sum];\n            dp[i][sum] = (t || nt);\n        }\n    }\n    return dp[n-1][tar];\n}\n\n// Space Optimization\nbool fopt(int n, int tar, vector<int>& arr){\n    vector<int> prev(tar+1);\n    for(int i=0; i<n; i++){\n        vector<int> curr(tar+1);\n        for(int sum=0; sum<=tar; sum++){\n            if(sum==0){\n                curr[sum] = true;\n                continue;\n            }\n            if(i==0){\n                curr[sum] = (sum==arr[i]);\n                continue;\n            }\n            bool t = false;\n            if(arr[i] <= sum) t = prev[sum-arr[i]];\n            bool nt = prev[sum];\n            curr[sum] = (t || nt);\n        }\n        prev = curr;\n    }\n    return prev[tar];\n}\n\nbool canPartition(vector<int>& nums) {\n    int sum = 0, n = nums.size();\n    for(auto i:nums) sum+=i;\n    if(sum%2!=0) return false;\n    int k = sum/2;\n    vector<vector<int>> dp(n, vector<int>(k + 1, -1));\n    return fmemo(n-1,k,nums,dp);\n}\n",
  " Print LIS": "/*\nQUESTION:\nGiven an integer n and an array of integers, return the Longest Increasing Subsequence which is lexicographically smallest corresponding to the indices of the elements.\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- Let dp[i] represent the length of the longest increasing subsequence ending at index i.\n- Additionally, maintain a prevmap to track the previous index in the increasing subsequence.\n- Iterate through the array and for each index i, iterate through all previous indices (prev) from 0 to i-1.\n- If arr[prev] < arr[i] and dp[i] < dp[prev] + 1, update dp[i] and prevmap[i].\n- Find the index i where dp has the maximum value.\n- Construct the Longest Increasing Subsequence using the prevmap and the found index i.\n- Return the LIS in reverse order to get the lexicographically smallest sequence.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n^2), where n is the length of the input array arr.\n- The space complexity is O(n) due to the dp and prevmap arrays, as well as the lis vector.\n- Overall, the algorithm runs in O(n^2) time and O(n) space.\n\nCODE:\n*/\n\nvector<int> ftab(int n, vector<int>& arr) {\n    vector<int> dp(n, 1);\n    vector<int> prevmap(n, -1);\n    \n    for (int i = 0; i < n; i++) {\n        for (int prev = 0; prev < i; prev++) {\n            if (arr[prev] < arr[i] && dp[i] < dp[prev] + 1) {\n                dp[i] = dp[prev] + 1;\n                prevmap[i] = prev;\n            }\n        }\n    }\n    \n    int i = max_element(dp.begin(), dp.end()) - dp.begin();\n    vector<int> lis;\n    \n    while (i >= 0) {\n        lis.push_back(arr[i]);\n        i = prevmap[i];\n    }\n    \n    reverse(lis.begin(), lis.end());\n    return lis;\n}\n\nvector<int> longestIncreasingSubsequence(int n, vector<int>& arr) {\n    return ftab(n, arr);\n}\n",
  " Print the LCS": "/*\nQUESTION:\nPrint the Longest Common Subsequence between two strings.\n\nAPPROACH:\n- We will use dynamic programming to find the longest common subsequence (LCS) between two strings.\n- We will create a 2D array 'dp' of size (n+1) x (m+1), where n is the length of the first string and m is the length of the second string.\n- dp[i][j] will store the length of LCS between the first i characters of string s1 and the first j characters of string s2.\n- We will iterate through the strings and fill up the dp array as follows:\n  - If s1[i-1] matches s2[j-1], then dp[i][j] = dp[i-1][j-1] + 1, as we are extending the LCS by one character.\n  - Otherwise, dp[i][j] = max(dp[i-1][j], dp[i][j-1]), taking the maximum length LCS till the previous characters.\n- Once the dp array is filled, we will backtrack from the bottom-right corner (dp[n][m]) to reconstruct the LCS.\n- We will start from dp[n][m] and go to dp[0][0], following the conditions mentioned above. If s1[i-1] matches s2[j-1], we add that character to the LCS.\n- Finally, we reverse the obtained LCS to get the correct order.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of the dynamic programming part is O(n * m), where n is the length of the first string and m is the length of the second string.\n- The space complexity is also O(n * m) due to the dp array.\n- The space required for storing the LCS is O(min(n, m)), which is the maximum length of the LCS.\n- Overall, the algorithm runs in O(n * m) time and O(n * m) space.\n\nCODE:\n*/\n\n\nvoid ftab(int n, int m, string &s1, string &s2, vector<vector<int>> &dp) {\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            if (s1[i - 1] == s2[j - 1])\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            else\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n}\n\nstring findLCS(int n, int m, string &s1, string &s2) {\n    vector<vector<int>> dp(n + 1, vector<int>(m + 1));\n    ftab(n, m, s1, s2, dp);\n    int i = n, j = m;\n    string lcs = \"\";\n    while (i > 0 && j > 0) {\n        if (s1[i - 1] == s2[j - 1]) {\n            lcs += s1[i - 1];\n            i = i - 1;\n            j = j - 1;\n        } else {\n            if (dp[i - 1][j] > dp[i][j - 1])\n                i = i - 1;\n            else\n                j = j - 1;\n        }\n    }\n    reverse(lcs.begin(), lcs.end());\n    return lcs;\n}\n",
  " Rotten Oranges": "/*\nQuestion: \n\nYou are given an m x n grid where each cell can have one of three values:\n\n0 representing an empty cell,\n1 representing a fresh orange, or\n2 representing a rotten orange.\n\nEvery minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.\n\nReturn the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.\n\nExample:\n\nInput: grid = [[2,1,1],[1,1,0],[0,1,1]]\nOutput: 4\n\nApproach:\n\n1. Use Breadth-First Search (BFS) to rot the oranges.\n2. Initialize a queue to store the rotten oranges.\n3. Iterate through the grid to find the rotten oranges and count the number of fresh oranges.\n4. Perform BFS starting from each rotten orange and keep track of the time required to rot all the fresh oranges.\n5. For each level in BFS (each minute), check adjacent cells to a rotten orange and mark them as rotten if they contain a fresh orange. Decrease the fresh count and add the newly rotten oranges to the queue.\n6. Repeat this process until all fresh oranges are rotten or the queue is empty.\n7. Return the time required (minutes) if all fresh oranges are rotten, otherwise, return -1.\n\nTime Complexity: O(m * n) - where 'm' is the number of rows and 'n' is the number of columns in the grid.\nSpace Complexity: O(m * n) - due to the queue and the grid.\n\nCode:\n*/\n\nint orangesRotting(vector<vector<int>>& grid) {\n    int ans = -1, fresh = 0, m = grid.size(), n = grid[0].size();\n    queue<pair<int, int>> q;\n\n    for(int i = 0; i < m; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 2) {\n                q.push({i, j});\n            }\n            if(grid[i][j] == 1) {\n                fresh++;\n            }\n        }\n    }\n\n    if(fresh == 0) {\n        return 0;\n    }\n\n    vector<int> dr = {-1, 1, 0, 0};\n    vector<int> dc = {0, 0, -1, 1};\n\n    while(!q.empty()) {\n        int k = q.size();\n        while(k--) {\n            auto p = q.front();\n            q.pop();\n            int x = p.first, y = p.second;\n\n            for(int i = 0; i < 4; i++) {\n                int nx = x + dr[i], ny = y + dc[i];\n                if(nx >= 0 && nx < m && ny >= 0 && ny < n && grid[nx][ny] == 1) {\n                    grid[nx][ny] = 2;\n                    q.push({nx, ny});\n                    fresh--;\n                }\n            }\n        }\n        ans++;\n    }\n\n    return (fresh > 0) ? -1 : ans;\n}\n",
  " Search in BST": "/**Question:**\n\nYou are given the root of a binary search tree (BST) and an integer `val`. You need to find the node in the BST whose value equals `val` and return the subtree rooted with that node. If such a node does not exist, return `NULL`.\n\n**Approach:**\n\nSince the given binary tree is a binary search tree, we can utilize its property to efficiently find the node with the value `val`. We start from the root and compare its value with `val`. If the current node's value is equal to `val`, we return the current node as it is the node we are looking for. If the current node's value is greater than `val`, we need to search in the left subtree because all nodes in the left subtree have smaller values. Similarly, if the current node's value is smaller than `val`, we need to search in the right subtree. We recursively perform this process until we find the desired node or reach a leaf node (where the node is not present).\n\n**Complexity Analysis:**\n\nLet's analyze the time and space complexity of our approach:\n\n- Time Complexity: O(log N) on average for balanced BST, O(N) in the worst case for skewed BST.\n  - In a balanced binary search tree, each level reduces the search space by half, so the time complexity is logarithmic. However, in the worst case, the BST can be skewed, and we may need to traverse all nodes in one path, leading to linear time complexity.\n\n- Space Complexity: O(H), where H is the height of the BST.\n  - The space complexity is determined by the recursion stack. In the average case, the height of a balanced BST is logarithmic, resulting in a logarithmic space complexity. In the worst case, when the tree is skewed, the height is N, resulting in a space complexity of O(N).\n\n**Code:**/\n\n\nTreeNode* searchBST(TreeNode* root, int val) {\n    if (!root) return NULL;\n    if (root->val == val) return root;\n    if (root->val > val) return searchBST(root->left, val);\n    else return searchBST(root->right, val);\n}\n",
  " Shortest path in DAG": "/*\nQUESTION:\nGiven a Directed Acyclic Graph of N vertices from 0 to N-1 and a 2D Integer array (or vector) edges[][] of length M, where there is a directed edge from edges[i][0] to edges[i][1] with a distance of edges[i][2] for all i.\n\nFind the shortest path from the source (vertex 0) to all other vertices, and if it is impossible to reach any vertex, then return -1 for that vertex.\n\nAPPROACH:\n- To find the shortest path from the source vertex to all other vertices in a Directed Acyclic Graph (DAG), we can use a topological sorting based approach along with dynamic programming (DP).\n- First, we perform a topological sorting of the DAG. This will give us a linear order in which the vertices should be visited such that there are no backward edges.\n- After obtaining the topological order, we initialize the distance array with a large value (infinity) for all vertices, except the source vertex whose distance is set to 0.\n- We then iterate through the vertices in the topological order and update the distance for each vertex by considering all outgoing edges from that vertex and the distances of its neighboring vertices.\n- Since the graph is a DAG, we are guaranteed that we visit all the parent nodes of a vertex before visiting the vertex itself. Hence, we can safely update the distance of each vertex in a topological order.\n- After updating the distance array, if any vertex remains at the initial large value (infinity), it means that it is not reachable from the source vertex, and we set its distance to -1.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(N + M), where N is the number of vertices and M is the number of edges in the graph. The time complexity is dominated by the topological sorting and DP updates.\n- Space Complexity: O(N + M), where N is the number of vertices and M is the number of edges in the graph. We use additional space for the adjacency list, visited array, topological order, and the distance array.\n*/\n\nbool dfs(int node, vector<pair<int, int>> adj[], vector<bool>& vis, vector<int>& topo){\n    vis[node] = true;\n    for(auto v : adj[node]){\n        if(!vis[v.first]){\n            dfs(v.first, adj, vis, topo);\n        }\n    }\n    topo.push_back(node);\n}\n\nvector<int> shortestPath(int N, int M, vector<vector<int>>& edges){\n    vector<pair<int, int>> adj[N];\n    for(auto e : edges){\n        adj[e[0]].push_back({e[1], e[2]});\n    }\n    \n    vector<bool> vis(N);\n    vector<int> topo;\n    for(int i = 0; i < N; i++){\n        if(!vis[i]){\n            dfs(i, adj, vis, topo);\n        }\n    }\n    reverse(topo.begin(), topo.end());\n    \n    vector<int> dis(N, 1e9);\n    dis[0] = 0;\n    \n    for(auto u : topo){\n        for(auto p : adj[u]){\n            int v = p.first, d = p.second;\n            dis[v] = min(dis[v], dis[u] + d);\n        }\n    }\n    \n    for(int i = 0; i < N; i++){\n        if(dis[i] == 1e9){\n            dis[i] = -1;\n        }\n    }\n    \n    return dis;\n}\n",
  " Stock span problem": "/*\nQUESTION:\nDesign an algorithm to calculate the span of a stock's price for the current day based on the price history.\n\nAPPROACH:\nTo solve this problem, we can use a stack to store the prices along with their corresponding spans.\n1. Initialize an empty stack and a variable to keep track of the current day (let's call it 'cnt').\n2. For each price, do the following:\n   - While the stack is not empty and the price at the top of the stack is less than or equal to the current price, pop elements from the stack.\n   - Calculate the span for the current price using the following formula:\n     - If the stack is empty, the span is cnt + 1.\n     - Otherwise, the span is cnt - stack.top().second, where stack.top().second represents the day corresponding to the price at the top of the stack.\n   - Push the current price along with its span (pair<int, int>) onto the stack.\n   - Increment the 'cnt' variable.\n3. Return the calculated spans.\n\nExample:\nInput: [100, 80, 60, 70, 60, 75, 85]\nOutput: [1, 1, 1, 2, 1, 4, 6]\n\nCODE:\n*/\n\nclass StockSpanner {\npublic:\n    stack<pair<int, int>> st;\n    int cnt;\n\n    StockSpanner() {\n        cnt = 0;\n    }\n    \n    int next(int price) {\n        while (!st.empty() && st.top().first <= price)\n            st.pop();\n        \n        int ans = 1;\n        \n        if (!st.empty())\n            ans = cnt - st.top().second;\n        else\n            ans = cnt + 1;\n        \n        st.push({price, cnt});\n        cnt++;\n        \n        return ans;\n    }\n};\n\n/*\nCOMPLEXITY ANALYSIS:\n- The time complexity for each 'next' operation is O(1) on average because each price is pushed and popped from the stack at most once.\n- The space complexity is O(n), where n is the number of prices, because the stack can store at most n elements.\n*/\n\n",
  " Strongly Connected Components": "/*\nQUESTION:-\nGiven a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, Find the number of strongly connected components in the graph.\n\nApproach:\n1. We can use Kosaraju's algorithm to find the number of strongly connected components (SCCs) in a directed graph.\n2. Kosaraju's algorithm performs two DFS traversal on the graph to find SCCs.\n3. In the first DFS traversal, we find the order of vertices in which they finish their DFS traversal (topological ordering).\n4. In the second DFS traversal, we visit the vertices in reverse order of their finish times (based on the first DFS traversal) and mark the SCCs.\n5. The number of SCCs will be the number of times we perform the second DFS traversal and find a new SCC.\n\nComplexity Analysis:\n- Let V be the number of vertices and E be the number of edges in the directed graph.\n- The time complexity of Kosaraju's algorithm is O(V + E) as we perform two DFS traversals.\n- The space complexity is O(V + E) to store the adjacency list and O(V) for the auxiliary arrays.\n*/\n\n\nvoid topo(int node, vector<bool>& vis, vector<vector<int>>& adj, stack<int>& st) {\n    vis[node] = true;\n    for (auto v : adj[node]) {\n        if (!vis[v]) {\n            topo(v, vis, adj, st);\n        }\n    }\n    st.push(node);\n}\n\nvoid dfs(int node, vector<bool>& vis, vector<int> revadj[]) {\n    vis[node] = true;\n    for (auto v : revadj[node]) {\n        if (!vis[v]) {\n            dfs(v, vis, revadj);\n        }\n    }\n}\n\nint kosaraju(int V, vector<vector<int>>& adj) {\n    stack<int> st;\n    vector<bool> vis(V);\n    for (int i = 0; i < V; i++) {\n        if (!vis[i])\n            topo(i, vis, adj, st);\n    }\n\n    vector<int> revadj[V];\n    for (int i = 0; i < V; i++) {\n        for (auto j : adj[i]) {\n            revadj[j].push_back(i);\n        }\n    }\n\n    int ans = 0;\n    vector<bool> visi(V);\n    while (!st.empty()) {\n        int node = st.top();\n        st.pop();\n        if (!visi[node]) {\n            dfs(node, visi, revadj);\n            ans++;\n        }\n    }\n    return ans;\n}\n",
  " Unique Paths": "/*\nQUESTION:-\nThere is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n\nExample 1:\nInput: m = 3, n = 7\nOutput: 28\n\nApproach:\n1. We can solve this problem using dynamic programming with memoization (top-down approach).\n2. We define a helper function fmemo(i, j, dp) that calculates the number of unique paths from the top-left corner (0, 0) to the cell (i, j) on the grid.\n3. The function checks if the number of unique paths for the cell (i, j) is already calculated and stored in the dp array. If yes, it returns the value from dp.\n4. Otherwise, it calculates the number of unique paths for the cell (i, j) by adding the number of unique paths from the cell above (i-1, j) and the cell to the left (i, j-1).\n5. The base case is when i or j is less than 0, in which case the function returns 0 as there are no paths to reach those cells.\n6. In the main function uniquePaths(m, n), we create a dp array of size m x n initialized with -1 and call the fmemo function for the bottom-right cell (m-1, n-1).\n7. Finally, we return the number of unique paths obtained for the bottom-right cell as the result.\n\nComplexity Analysis:\n- The time complexity of the fmemo function is O(m x n) because we are calculating the number of unique paths for each cell only once and storing it in the dp array.\n- The space complexity is also O(m x n) to store the dp array.\n\nNote: The given test cases are generated such that the answer will be less than or equal to 2 x 10^9.\n*/\n\n//Memeoization\nint fmemo(int i, int j, vector<vector<int>>& dp) {\n    if (i < 0 || j < 0)\n        return 0;\n\n    if (dp[i][j] != -1)\n        return dp[i][j];\n\n    int top = fmemo(i - 1, j, dp);\n    int left = fmemo(i, j - 1, dp);\n    return dp[i][j] = top + left;\n}\n\n//Tabulation\nint ftab(int m, int n){\n    vector<vector<int>> dp(m,vector<int>(n));\n    dp[0][0] = 1;\n    for(int i=0; i<m; i++){\n        for(int j=0; j<n; j++){\n            if(i==0 && j==0) continue;\n            int top = 0, left = 0;\n            if(i-1>=0) top = top = dp[i-1][j];\n            if(j-1>=0) left = dp[i][j-1];\n            dp[i][j] = top+left;\n        }\n    }\n    return dp[m-1][n-1];\n}\n\n//Space Optimization\nint fopt(int m, int n){\n    vector<int> prev(n);\n    prev[0] = 1;\n    for(int i=0; i<m; i++){\n        vector<int> curr(n);\n        curr[0] = 1;\n        for(int j=0; j<n; j++){\n            if(i==0 && j==0) continue;\n            int top = 0, left = 0;\n            if(i-1>=0) top = top = prev[j];\n            if(j-1>=0) left = curr[j-1];\n            curr[j] = top+left;\n        }\n        prev = curr;\n    }\n    return prev[n-1];\n}\n\n\nint uniquePaths(int m, int n) {\n    vector<vector<int>> dp(m, vector<int>(n, -1));\n    return fmemo(m - 1, n - 1, dp);\n}\n\n",
  "Check for the ith bit": "/*QUESTION:\nGiven a number N and a bit number K, check if the Kth index bit of N is set or not. A bit is called set if it is 1. The position of the set bit '1' should be indexed starting with 0 from the least significant bit (LSB) side in the binary representation of the number.\n\nExample:\nInput: N = 4, K = 0\nOutput: No\nExplanation: The binary representation of 4 is 100, in which the 0th index bit from the LSB is not set. So, return false.\n\nApproach:\n1. Perform a bitwise AND operation between N and (1 << K).\n2. If the result is non-zero, it means the Kth index bit is set (1); otherwise, it is not set (0).\n\nCODE:*/\nbool checkKthBit(int n, int k) {\n    if (n & (1 << k))\n        return true;\n    return false;\n}\n",
  "Count_good_numbers": "/*QUESTION:\nA digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7).\nGiven an integer n, return the total number of good digit strings of length n. Since the answer may be large, return it modulo 109 + 7.\nA digit string is a string consisting of digits 0 through 9 that may contain leading zeros.\n\nExample 1:\nInput: n = 1\nOutput: 5\nExplanation: The good numbers of length 1 are \"0\", \"2\", \"4\", \"6\", \"8\".\n\nExample 2:\nInput: n = 4\nOutput: 400\n\nExample 3:\nInput: n = 50\nOutput: 564908303\n\nApproach:\n- We can observe that for a good digit string of length n, each digit can be either even or a prime number (2, 3, 5, or 7).\n- For odd indices, there are 4 choices (2, 3, 5, or 7) since they must be prime.\n- For even indices, there are 5 choices (0, 2, 4, 6, or 8) since they must be even.\n- We can use a recursive approach to count the number of good digit strings.\n- The base case is when n = 1, in which case there are 5 possible digit strings (0, 2, 4, 6, or 8).\n- For even lengths (n % 2 == 0), we multiply the count of good digit strings of length n-1 by 4 (since there are 4 choices for odd indices).\n- For odd lengths (n % 2 != 0), we multiply the count of good digit strings of length n-1 by 5 (since there are 5 choices for even indices).\n- We return the result modulo 10^9 + 7 to handle large outputs.\n\nTime Complexity: O(n) (due to the recursive calls)\nSpace Complexity: O(n) (due to the recursive calls)\n\nCODE:*/\n\nconst long long mod = 1e9 + 7;\n\nint countGoodNumbers(long long n) {\n    // Base case\n    if (n == 1)\n        return 5;\n\n    if (n % 2 == 0)\n        return (countGoodNumbers(n - 1) % mod * 4 % mod);\n    else\n        return (countGoodNumbers(n - 1) % mod * 5 % mod);\n}\n",
  "Implement_lower_bound": "/*\nQUESTION:\nGiven a sorted array arr[] of size N without duplicates, and given a value x. Floor of x is defined as the largest element K in arr[] such that K is smaller than or equal to x. Find the index of K (0-based indexing).\n\nExample 1:\nInput:\nN = 7, x = 0\narr[] = {1,2,8,10,11,12,19}\nOutput: -1\nExplanation: No element less than 0 is found. So the output is \"-1\".\n\nExample 2:\nInput:\nN = 7, x = 5\narr[] = {1,2,8,10,11,12,19}\nOutput: 1\nExplanation: Largest number less than 5 is 2 (i.e K = 2), whose index is 1 (0-based indexing).\n\nAPPROACH:\n- Initialize low as 0 and high as N-1.\n- Iterate using a while loop until low is less than or equal to high.\n- Calculate the mid index using mid = low + (high - low) / 2.\n- Check if the element at mid index is less than or equal to x.\n  - If true, update the answer as mid and move the low pointer to mid+1 to search for a larger element.\n  - If false, update the high pointer to mid-1 to search in the lower half of the array.\n- Finally, return the answer.\n\nCODE:\n*/\n\nint findFloor(vector<long long> v, long long n, long long x) {\n    long long low = 0, high = n - 1;\n    int ans = -1;\n    while (low <= high) {\n        long long mid = low + (high - low) / 2;\n        if (v[mid] <= x) {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\n\n// TIME COMPLEXITY: O(log N)\n// SPACE COMPLEXITY: O(1)\n",
  "Inserting_node_to_linked_list": "/*\nQUESTION:- \nCreate a link list of size N according to the given input literals. Each integer input is accompanied by an indicator which can either be 0 or 1. If it is 0, insert the integer in the beginning of the link list. If it is 1, insert the integer at the end of the link list. \nHint: When inserting at the end, make sure that you handle NULL explicitly.\n\nExample 1:\n\nInput:\nLinkedList: 9->0->5->1->6->1->2->0->5->0\nOutput: 5 2 9 5 6\nExplanation:\nLength of Link List = N = 5\n9 0 indicated that 9 should be\ninserted in the beginning. Modified\nLink List = 9.\n5 1 indicated that 5 should be\ninserted in the end. Modified Link\nList = 9,5.\n6 1 indicated that 6 should be\ninserted in the end. Modified Link\nList = 9,5,6.\n2 0 indicated that 2 should be\ninserted in the beginning. Modified\nLink List = 2,9,5,6.\n5 0 indicated that 5 should be\ninserted in the beginning. Modified\nLink List = 5,2,9,5,6. \nFinal linked list = 5, 2, 9, 5, 6.\n\nExample 2:\n\nInput:\nLinkedList: 5->1->6->1->9->1\nOutput: 5 6 9\n\nThe approach to solving this problem is as follows:\n\n1. Initialize an empty linked list by setting the `head` pointer to `NULL`.\n2. Iterate through the given input literals.\n3. If the indicator is 0, insert the integer at the beginning of the linked list by calling the `insertAtBeginning` function. This function creates a new node with the given integer value and inserts it at the beginning of the linked list.\n4. If the indicator is 1, insert the integer at the end of the linked list by calling the `insertAtEnd` function. This function creates a new node with the given integer value and inserts it at the end of the linked list.\n5. After iterating through all the input literals, the resulting linked list will be the desired output.\n\nTime complexity of this approach is O(N), where N is the number of input literals, as we need to iterate through all the literals to construct the linked list.\nSpace complexity is O(1) as we are not using any extra space that grows with the input size. We only need a constant amount of space to store the pointers and temporary variables.\n\nCODE:-\n*/\n\nNode *insertAtBegining(Node *head, int x) {\n    if(head==NULL)\n        return new Node(x);\n    Node* temp = new Node(x);\n    temp->next = head;\n    return temp;    \n}\n\n\n//Function to insert a node at the end of the linked list.\nNode *insertAtEnd(Node *head, int x)  {\n    if(head==NULL)\n        return new Node(x);\n    Node* curr = head;\n    while(curr->next){\n        curr = curr->next;\n    }\n    curr->next = new Node(x);\n    return head;\n}",
  "Insert_node_in_DLL": "/*\nQUESTION:-\nGiven a doubly-linked list, a position p, and an integer x. The task is to add a new node with value x at the position just after pth node in the doubly linked list.\n\nExample 1:\n\nInput:\nLinkedList: 2<->4<->5\np = 2, x = 6 \nOutput: 2 4 5 6\nExplanation: p = 2, and x = 6. So, 6 is\ninserted after p, i.e, at position 3\n(0-based indexing).\nExample 2:\n\nInput:\nLinkedList: 1<->2<->3<->4\np = 0, x = 44\nOutput: 1 44 2 3 4\nExplanation: p = 0, and x = 44 . So, 44\nis inserted after p, i.e, at position 1\n(0-based indexing).\n\nAPPROACH:-\nThe approach to adding a node at a specific position in a doubly linked list is as follows:\n\n1. Initialize a counter `cnt` to 0 and a pointer `curr` to the head of the linked list.\n2. Traverse the linked list using the `curr` pointer until the `cnt` is less than the specified position.\n3. Increment the `cnt` by 1 and move the `curr` pointer to the next node in each iteration.\n4. Once the `cnt` reaches the desired position, create a new node with the given data.\n5. Set the `next` pointer of the new node to the next node of the current node (`curr->next`) and the `prev` pointer of the new node to the current node (`curr`).\n6. Update the `next` pointer of the current node (`curr->next`) to point to the new node.\n7. If the new node is inserted in the middle of the list, update the `prev` pointer of the next node (`nxt`) to point to the new node.\n8. The new node is successfully inserted into the linked list.\n\nTime complexity of this approach is O(N), where N is the number of nodes in the doubly linked list. In the worst case, we may need to traverse the entire list to reach the desired position.\nSpace complexity is O(1) as we are using a constant amount of extra space to store temporary pointers during the insertion process.\n\nCODE:-\n*/\n\nvoid addNode(Node *head, int pos, int data)\n{\n   int cnt = 0;\n   Node* curr = head;\n   while(cnt<pos){\n       curr = curr->next;\n       cnt++;\n   }\n   Node* nxt = curr->next;\n   curr->next = new Node(data);\n   curr->next->prev = curr;\n   curr->next->next = nxt;\n}",
  "Majority_element_2": "/*\nQUESTION:\nGiven an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.\n\nExample 1:\nInput: nums = [3,2,3]\nOutput: [3]\n\nExample 2:\nInput: nums = [1]\nOutput: [1]\n\nAPPROACH:\nTo find all elements that appear more than ⌊ n/3 ⌋ times, we can use the Boyer-Moore Majority Vote algorithm. This algorithm helps us find potential candidates that could appear more than ⌊ n/3 ⌋ times in a single pass. After finding the candidates, we count their occurrences and return the elements that meet the criteria.\n\n1. Initialize two candidate variables, c1 and c2, and their corresponding vote counters, vote1 and vote2.\n2. Iterate through the array:\n   - If the current element matches c1, increment vote1.\n   - Else if the current element matches c2, increment vote2.\n   - Else if vote1 is 0, assign the current element to c1 and set vote1 to 1.\n   - Else if vote2 is 0, assign the current element to c2 and set vote2 to 1.\n   - Else, decrement both vote1 and vote2.\n3. After finding the potential candidates, count the occurrences of each candidate using cnt1 and cnt2.\n4. If cnt1 is greater than ⌊ n/3 ⌋, add c1 to the result vector.\n5. If cnt2 is greater than ⌊ n/3 ⌋ and c2 is different from c1, add c2 to the result vector.\n6. Return the result vector containing the elements that appear more than ⌊ n/3 ⌋ times.\n\n\n*/\n\nvector<int> majorityElement(vector<int> &nums)\n{\n    int c1 = 0, c2 = 0, vote1 = 0, vote2 = 0;\n\n    // Finding potential candidates\n    for (int i = 0; i < nums.size(); i++)\n    {\n        if (c1 == nums[i])\n        {\n            vote1++;\n        }\n        else if (c2 == nums[i])\n        {\n            vote2++;\n        }\n        else if (vote1 == 0)\n        {\n            c1 = nums[i];\n            vote1 = 1;\n        }\n        else if (vote2 == 0)\n        {\n            c2 = nums[i];\n            vote2 = 1;\n        }\n        else\n        {\n            vote1--;\n            vote2--;\n        }\n    }\n\n    vector<int> ans;\n    int cnt1 = 0, cnt2 = 0;\n\n    // Counting occurrences of potential candidates\n    for (auto it : nums)\n    {\n        if (it == c1)\n        {\n            cnt1++;\n        }\n        if (it == c2)\n        {\n            cnt2++;\n        }\n    }\n\n    // Checking if candidates appear more than ⌊ n/3 ⌋ times\n    if (cnt1 > nums.size() / 3)\n    {\n        ans.push_back(c1);\n    }\n    if (cnt2 > nums.size() / 3 && c2 != c1)\n    {\n        ans.push_back(c2);\n    }\n\n    return ans;\n}\n\n// TIME COMPLEXITY: O(n), where n is the size of the input array.\n// SPACE COMPLEXITY: O(1), as we are using a constant amount of extra space.\n",
  "Max_nesting_depth_of_parenthesis": "/*\nQuestion:\nGiven a VPS represented as a string s, return the nesting depth of s.\n\nApproach:\n1. Initialize `opened` as 0 and `ans` as 0 to keep track of the number of opened parentheses and the maximum nesting depth respectively.\n2. Iterate through each character `c` in the string `s`.\n    a. If `c` is an opening parenthesis '(', increment `opened` by 1 and update `ans` if it is greater than the current value of `ans`.\n    b. If `c` is a closing parenthesis ')', decrement `opened` by 1.\n3. Return `ans` as the maximum nesting depth.\n\nCODE:-\n\n*/\n\nint maxDepth(string s) {\n    int opened = 0, ans = 0;\n    for (auto c : s) {\n        if (c == '(') {\n            opened++;\n            ans = max(ans, opened);\n        } else if (c == ')') {\n            opened--;\n        }\n    }\n    return ans;\n}\n\n/*\nTime Complexity: O(n), where n is the length of the string `s`.\nSpace Complexity: O(1)\n*/",
  "Nth_root_of_integer": "/*\nQUESTION:\nYou are given 2 numbers (n, m); the task is to find n√m (nth root of m).\n\nExample:\n\nInput: n = 2, m = 9\nOutput: 3\nExplanation: 3^2 = 9\n\nInput: n = 3, m = 9\nOutput: -1\nExplanation: 3rd root of 9 is not an integer.\n\nAPPROACH:\nWe can use a binary search algorithm to find the nth root of m.\n1. Initialize the search range with low = 1 and high = m.\n2. While low is less than or equal to high:\n   - Calculate the mid value as the average of low and high.\n   - If mid raised to the power of n is equal to m, return mid.\n   - If mid raised to the power of n is less than m, update low to mid + 1.\n   - If mid raised to the power of n is greater than m, update high to mid - 1.\n3. If the loop exits without finding the nth root, return -1.\n\n\nCODE:\n*/\n\nint NthRoot(int n, int m) {\n    int low = 1, high = m;\n    while (low <= high) {\n        long long mid = low + (high - low) / 2;\n        if (pow(mid, n) == m)\n            return mid;\n        else if (pow(mid, n) < m)\n            low = mid + 1;\n        else\n            high = mid - 1;\n    }\n    return -1;\n}\n\n/*\nTIME COMPLEXITY: O(log m)\nThe binary search algorithm runs in logarithmic time complexity as it reduces the search range by half at each step.\n\nSPACE COMPLEXITY: O(1)\nThe algorithm uses a constant amount of space to store the variables and perform calculations.\n*/",
  "Pair_sum_in_dll": "/*\nGiven a sorted doubly linked list of positive distinct elements, the task is to find pairs in the doubly linked list whose sum is equal to a given value `target`.\n\nExample 1:\nInput:  \n1 <-> 2 <-> 4 <-> 5 <-> 6 <-> 8 <-> 9\nTarget: 7\nOutput: (1, 6), (2, 5)\nExplanation: We can see that there are two pairs (1, 6) and (2, 5) with a sum of 7.\n\nExample 2:\nInput: \n1 <-> 5 <-> 6\nTarget: 6\nOutput: (1, 5)\nExplanation: We can see that there is one pair (1, 5) with a sum of 6.\n\nApproach:\n1. Initialize two pointers, `start` and `end`, pointing to the beginning and end of the doubly linked list, respectively.\n2. While the `start` pointer's data is less than the `end` pointer's data:\n   - Calculate the sum of the data at the `start` and `end` pointers.\n   - If the sum is equal to the target value, add the pair (start->data, end->data) to the result vector and move both the `start` and `end` pointers.\n   - If the sum is less than the target value, move the `start` pointer to the next node.\n   - If the sum is greater than the target value, move the `end` pointer to the previous node.\n3. Return the result vector containing all the pairs whose sum is equal to the target.\n\nTime Complexity: O(N), where N is the number of nodes in the doubly linked list.\nSpace Complexity: O(1).\n\nCODE:\n*/\nvector<pair<int, int>> findPairsWithGivenSum(Node *head, int target)\n{\n    vector<pair<int, int>> ans;\n    Node* start = head;\n    Node* end = head;\n    while (end->next) {\n        end = end->next;\n    }\n    while (start->data < end->data) {\n        int sum = start->data + end->data;\n        if (sum == target) {\n            ans.push_back({ start->data, end->data });\n            start = start->next;\n            end = end->prev;\n        }\n        else if (sum < target) {\n            start = start->next;\n        }\n        else {\n            end = end->prev;\n        }\n    }\n    return ans;\n}\n",
  "Power set": "/*QUESTION:\nGiven an integer array nums of unique elements, return all possible subsets (the power set).\n\nExample 1:\nInput: nums = [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n\nExample 2:\nInput: nums = [0]\nOutput: [[],[0]]\n\nApproach:\nTo generate all possible subsets, we can use a recursive backtracking approach.\n1. Create a helper function called 'solve' that takes a vector of vectors to store the subsets, a vector to store the current subset, the input array 'nums', and the current index as parameters.\n2. In the 'solve' function:\n   - If the current index is equal to the size of the input array 'nums', add the current subset to the vector of vectors.\n   - Otherwise, do the following:\n     - Include the element at the current index in the current subset by pushing it into the vector.\n     - Recursively call the 'solve' function with the updated current subset and increment the current index.\n     - Exclude the element at the current index from the current subset by popping it from the vector.\n     - Recursively call the 'solve' function with the updated current subset and increment the current index.\n3. Create the main function called 'subsets' that generates all possible subsets using the 'solve' function.\n   - Create an empty vector of vectors to store the subsets.\n   - Create an empty vector to store the current subset.\n   - Call the 'solve' function with the empty vector of vectors, empty current subset, input array 'nums', and index 0.\n   - Return the vector of vectors containing all the subsets.\n\nTime Complexity: O(2^N), where N is the size of the input array 'nums'.\nSpace Complexity: O(N), where N is the size of the input array 'nums' (for the recursion stack and storing subsets).\n\nCODE:*/\nvoid solve(vector<vector<int>>& ans, vector<int>& temp, vector<int>& nums, int index) {\n\tif (index == nums.size()) {\n\t\tans.push_back(temp);\n\t\treturn;\n\t}\n\n\t// Include the element at the current index\n\ttemp.push_back(nums[index]);\n\tsolve(ans, temp, nums, index + 1);\n\n\t// Exclude the element at the current index\n\ttemp.pop_back();\n\tsolve(ans, temp, nums, index + 1);\n}\n\nvector<vector<int>> subsets(vector<int>& nums) {\n\tvector<vector<int>> ans;\n\tvector<int> temp;\n\tsolve(ans, temp, nums, 0);\n\treturn ans;\n}\n",
  "Reverse_LL": "/*\nQUESTION:-\nGiven the head of a singly linked list, reverse the list, and return the reversed list.\n\nExample 1:\nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n\nExample 2:\nInput: head = [1,2]\nOutput: [2,1]\n*/\n\n/*\nAPPROACH:\nTo reverse a singly linked list, we can use an iterative approach.\nInitialize three pointers: prev as NULL, curr as head, and frwd as NULL.\nIterate through the linked list until curr becomes NULL:\n    - Store the next node of curr in frwd.\n    - Set the next of curr to prev, reversing the link.\n    - Move prev and curr one step forward.\n    - Move curr to the next node (frwd) to continue the iteration.\nReturn prev, which will be the new head of the reversed list.\n*/\n\n// CODE:-\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = NULL;\n    ListNode* curr = head;\n    while (curr) {\n        ListNode* frwd = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = frwd;\n    }\n    return prev;\n}\n\n// TIME COMPLEXITY: O(N)\n// SPACE COMPLEXITY: O(1)\n",
  "Reverse_words_in_string": "/*\nQuestion:\nGiven an input string s, reverse the order of the words.\nA word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\nReturn a string of the words in reverse order concatenated by a single space.\nNote that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n\nExample:\nInput: s = \"the sky is blue\"\nOutput: \"blue is sky the\"\n\nApproach:\n- Initialize an empty string 'ans' to store the reversed words.\n- Initialize 'start' and 'end' variables to keep track of the start and end indices of each word.\n- Iterate through the input string 's'.\n- Ignore leading spaces by advancing the iterator 'i' until a non-space character is found.\n- Set 'start' to the current index 'i'.\n- Find the end index 'end' of the current word by advancing 'i' until a space or the end of the string is encountered.\n- Extract the current word using the substr() function and store it in a temporary string 'temp'.\n- Reverse the characters in 'temp'.\n- Append 'temp' to 'ans' with a space delimiter.\n- Reverse the characters in 'ans' to get the reversed order of words.\n- Remove any leading or trailing spaces in 'ans'.\n- Return the resulting string 'ans'.\n\nCode:\n*/\n\nstring reverseWords(string s) {\n    string ans = \"\";\n    int start = -1, end = -1;\n    for(int i=0; i<s.size(); i++){\n        while(s[i]==' ')\n            i++;\n        start = i;\n        while(i<s.size() && s[i]!=' ')\n            i++;\n        end = i;\n        string temp = s.substr(start,end-start);\n        reverse(temp.begin(),temp.end());\n        ans = ans+\" \"+temp;\n    }\n    reverse(ans.begin(),ans.end());\n    int i=0, j=ans.size()-1;\n    while(ans[i]==' ')\n        i++;\n    while(ans[j]==' ')\n        j--;\n    ans = ans.substr(i,j-i+1);\n    return ans;\n}\n\n/*\nTime Complexity: O(n), where n is the length of the input string 's'.\nSpace Complexity: O(n), where n is the length of the input string 's'.\n*/\n",
  "Rotate_LL_k_times": "/*\nQUESTION:-\nGiven the head of a linked list, rotate the list to the right by k places.\n\nAPPROACH:\nTo rotate the linked list to the right by k places, we need to perform the following steps:\n1. Find the length of the linked list and connect the last node to the head to form a circular linked list.\n2. Calculate the actual number of rotations by taking the modulus of k with the length of the linked list.\n3. Traverse to the (length - k - 1)th node, which will be the new tail of the rotated list.\n4. Set the new head as the next node of the (length - k - 1)th node and disconnect it from the rest of the list.\n5. Return the new head.\n\nTIME COMPLEXITY: O(N), where N is the number of nodes in the linked list.\nSPACE COMPLEXITY: O(1).\n\n*/\n\nint find_len(ListNode* head) {\n    ListNode* curr = head;\n    int cnt = 1;\n    while (curr->next) {\n        curr = curr->next;\n        cnt++;\n    }\n    curr->next = head; // Connect the last node to the head to form a circular linked list\n    return cnt;\n}\n\nListNode* rotateRight(ListNode* head, int k) {\n    if (head == NULL || k == 0)\n        return head;\n    int len = find_len(head); // Find the length of the linked list and form a circular linked list\n    k = k % len; // Calculate the actual number of rotations\n    ListNode* curr = head;\n    // Traverse to the (length - k - 1)th node\n    for (int i = 0; i < len - k - 1; i++) {\n        curr = curr->next;\n    }\n    ListNode* newHead = curr->next; // The next node will be the new head\n    curr->next = NULL; // Disconnect the new tail from the rest of the list\n    return newHead;\n}\n",
  "Second_largest_element_in_array": "/*\nQUESTION:-\nGiven an array Arr of size N, print second largest distinct element from an array.\n\nExample:\n\nInput:\nN = 6\nArr[] = {12, 35, 1, 10, 34, 1}\nOutput: 34\nExplanation: The largest element of the\narray is 35 and the second largest element\nis 34.\n*/\n\n/*\nAPPROACH\n-> If the current element is larger than ‘large’ then update second_large and large variables\n-> Else if the current element is larger than ‘second_large’ then we update the variable second_large.\n-> Once we traverse the entire array, we would find the second largest element in the variable second_large.\n*/\n\n// CODE:-\nint print2largest(int arr[], int n)\n{\n    int prev = -1, curr = arr[0];\n    for (int i = 1; i < n; i++)\n    {\n        if (arr[i] > curr)\n        {\n            prev = curr;\n            curr = arr[i];\n        }\n        else if (arr[i] > prev && arr[i] != curr)\n            prev = arr[i];\n    }\n    return prev;\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(0)",
  "Sort_0_1_2": "/*\nQUESTION:-\nGiven an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\nYou must solve this problem without using the library's sort function.\n\nExample 1:\n\nInput: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\n\nExample 2:\n\nInput: nums = [2,0,1]\nOutput: [0,1,2]\n*/\n\n/*\nAPPROACH:-\n-> Initialize three pointers: low at the beginning of the array, mid at the beginning of the array, and high at the end of the array.\n-> Iterate through the array while the mid pointer is less than or equal to the high pointer:\n1. If the current element at the mid pointer is 0 (red), we swap it with the element at the low pointer and increment both low and mid pointers. This ensures that red elements are moved to the left side of the array.\n2. If the current element at the mid pointer is 1 (white), we simply increment the mid pointer. This keeps white elements in the middle of the array.\n3. If the current element at the mid pointer is 2 (blue), we swap it with the element at the high pointer and decrement the high pointer. This ensures that blue elements are moved to the right side of the array.\n\nRepeat step 2 until the mid pointer crosses the high pointer.\nAt the end of the algorithm, the array will be sorted in the desired order.\n*/\n\n// CODE:-\nvoid sortColors(vector<int> &nums)\n{\n    int low = 0, mid = 0, high = nums.size() - 1;\n    while (mid <= high)\n    {\n        if (nums[mid] == 0)\n            swap(nums[mid++], nums[low++]);\n        else if (nums[mid] == 1)\n            mid++;\n        else\n            swap(nums[mid], nums[high--]);\n    }\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(0)",
  "Word search in grid": "/*QUESTION:\nGiven an m x n grid of characters board and a string word, return true if word exists in the grid.\n\nExample 1:\n\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\nOutput: true\n\nExample 2:\n\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\nOutput: true\n\nExample 3:\n\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\nOutput: false\n\n\nApproach:\nWe can use a backtracking approach to solve this problem.\n1. Create a helper function called 'solve' that takes the current row index, column index, letter index, the target word, and the board.\n2. In the 'solve' function:\n   - If the letter index is equal to the length of the target word, set the flag to true and return.\n   - Check if the current cell value is equal to the target letter.\n   - If it is, mark the current cell as visited (by changing its value to '!') and recursively call the 'solve' function for its neighboring cells (up, down, left, and right).\n   - After the recursive call, restore the original value of the current cell.\n3. Create the main function called 'exist' that calculates and returns true if the word exists in the grid, false otherwise.\n   - Initialize a flag variable to false.\n   - Iterate through each cell in the grid.\n   - If the current cell value is equal to the first letter of the target word, mark the current cell as visited (by changing its value to '!') and call the 'solve' function with the current cell's coordinates, letter index as 1, the target word, and the board.\n   - If the flag is true, return true (word exists in the grid).\n   - If the loop completes without finding the word, return false.\n   \nTime Complexity: O(M * N * 4^L), where M is the number of rows, N is the number of columns in the grid, and L is the length of the target word. In the worst case, we traverse the entire grid for each letter in the target word, and we have 4 choices (up, down, left, right) at each step.\nSpace Complexity: O(L), where L is the length of the target word. The space is used for the recursive call stack.\n\nCODE:*/\n\n// Note:- I'm making recursive call only for the potential grids rather than making call for the all four to reduce unwanted calls,\n// this makes code quite big but if you want to make it compact you could make call for all four cases and after call check if it's valid\n// just check the code of rat in maze for shorter code\n\nbool flag = false;\n\nvoid solve(int i, int j, int ltr, string& word, vector<vector<char>>& board) {\n    if (ltr == word.size()) {\n        flag = true;\n        return;\n    }\n\n    // left\n    if (j - 1 >= 0 && board[i][j - 1] == word[ltr]) {\n        board[i][j - 1] = '!';\n        solve(i, j - 1, ltr + 1, word, board);\n        board[i][j - 1] = word[ltr];\n    }\n    // right\n    if (j + 1 < board[0].size() && board[i][j + 1] == word[ltr]) {\n        board[i][j + 1] = '!';\n        solve(i, j + 1, ltr + 1, word, board);\n        board[i][j + 1] = word[ltr];\n    }\n    // top\n    if (i - 1 >= 0 && board[i - 1][j] == word[ltr]) {\n        board[i - 1][j] = '!';\n        solve(i - 1, j, ltr + 1, word, board);\n        board[i - 1][j] = word[ltr];\n    }\n    // bottom\n    if (i + 1 < board.size() && board[i + 1][j] == word[ltr]) {\n        board[i + 1][j] = '!';\n        solve(i + 1, j, ltr + 1, word, board);\n        board[i + 1][j] = word[ltr];\n    }\n}\n\nbool exist(vector<vector<char>>& board, string word) {\n    flag = false;\n\n    for (int i = 0; i < board.size(); i++) {\n        for (int j = 0; j < board[0].size(); j++) {\n            if (board[i][j] == word[0]) {\n                board[i][j] = '!';\n                solve(i, j, 1, word, board);\n                board[i][j] = word[0];\n                if (flag)\n                    return true;\n            }\n        }\n    }\n    return false;\n}\n",
  " Best time to buy and sell stock upto 2 transaction": "/*\nQUESTION:\nYou are given an array prices where prices[i] is the price of a given stock on the ith day.\nFind the maximum profit you can achieve. You may complete at most two transactions.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\nExample:\nInput: prices = [3, 3, 5, 0, 0, 3, 1, 4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3 - 0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4 - 1 = 3.\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- We need to keep track of the number of transactions completed so far (cap) and whether we are holding a stock or not on each day.\n- Define a 3D DP array `dp` where dp[i][hold][cap] represents the maximum profit achievable starting from day i while holding or not holding a stock and having completed cap transactions.\n- The base case is dp[n][0][0] = dp[n][0][1] = dp[n][0][2] = dp[n][1][0] = dp[n][1][1] = dp[n][1][2] = 0, where n is the number of days.\n- Iterate through each day i in reverse order.\n- If holding a stock, we can either sell the stock or continue holding.\n- If not holding a stock, we can either buy the stock or continue not holding.\n- Return dp[0][0][0], which represents the maximum profit achievable starting from day 0 while not holding a stock and having completed 0 transactions.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n), where n is the number of days.\n- The space complexity is O(n) due to the dp array.\n- Overall, the algorithm runs in O(n) time and O(n) space.\n\nCODE:\n*/\n\nint fmemo(int i, int hold, int cap, vector<int>& prices, vector<vector<vector<int>>>& dp){\n    if(i == prices.size()) return 0;\n    if(cap == 3) return 0;\n\n    if(dp[i][hold][cap] != -1) return dp[i][hold][cap];\n\n    if(hold){\n        // sell \n        int a = prices[i] + fmemo(i + 1, 0, cap, prices, dp);\n        // not sell\n        int b = fmemo(i + 1, 1, cap, prices, dp);\n        return dp[i][hold][cap] = max(a, b);\n    }\n    else{\n        // buy\n        int a = -prices[i] + fmemo(i + 1, 1, cap + 1, prices, dp);\n        // not buy\n        int b = fmemo(i + 1, 0, cap, prices, dp);\n        return dp[i][hold][cap] = max(a, b);\n    }\n}\n\nint maxProfit(vector<int>& prices) {\n    int n = prices.size();\n    vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(3, -1)));\n    return fmemo(0, 0, 0, prices, dp);\n}\n",
  " BFS": "/*\nQuestion:\nGiven a directed graph, perform Breadth First Traversal (BFS) of the graph starting from vertex 0 and visit all the nodes directly or indirectly connected to Node 0.\n\nExplanation:\n- We initialize an empty vector 'ans' to store the BFS traversal.\n- We also initialize a vector 'vis' to keep track of visited nodes, initialized with 'false' for all nodes.\n- We use a queue 'q' to perform BFS. We start by pushing vertex 0 into the queue and mark it as visited.\n- While the queue is not empty, we pop the front element and add it to the 'ans' vector.\n- For each adjacent vertex of the current node, if it has not been visited, we push it into the queue and mark it as visited.\n- We continue this process until the queue becomes empty and all connected nodes are visited.\n- Finally, we return the 'ans' vector containing the BFS traversal.\n\nTime Complexity:\n- The time complexity is O(V + E), where V is the number of vertices and E is the number of edges in the graph. In the worst case, we visit all the vertices and edges.\n\nSpace Complexity:\n- The space complexity is O(V), where V is the number of vertices, as we use extra space for the 'vis' vector and the 'q' queue.\n\n*/\n\nvector<int> bfsOfGraph(int V, vector<int> adj[]) {\n    vector<int> ans;\n    vector<bool> vis(V, false);\n\n    queue<int> q;\n    q.push(0);\n    vis[0] = true;\n\n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        ans.push_back(node);\n        for (auto i : adj[node]) {\n            if (!vis[i]) {\n                q.push(i);\n                vis[i] = true;\n            }\n        }\n    }\n\n    return ans;\n}\n",
  " Burst Ballons": "/*\nQUESTION:\nYou are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums.\nYou are asked to burst all the balloons.\nIf you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins.\nIf i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\nReturn the maximum coins you can collect by bursting the balloons wisely.\n\nExample:\nInput: nums = [3, 1, 5, 8]\nOutput: 167\nExplanation:\nnums = [3, 1, 5, 8] --> [3, 5, 8] --> [3, 8] --> [8] --> []\ncoins = 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167.\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- Define a 2D DP array `dp` where dp[i][j] represents the maximum coins collected by bursting balloons between indices i and j.\n- Iterate over the stick lengths from length 2 to the length of nums - 1.\n- For each subarray length, iterate through all possible starting indices (i).\n- Calculate the maximum coins collected by bursting balloons in the subarray between i and j, and update the dp array.\n- Finally, return dp[1][n - 2], which represents the maximum coins collected by bursting all the balloons.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n^3), where n is the length of the nums array.\n- The space complexity is O(n^2) due to the dp array.\n- Overall, the algorithm runs in O(n^3) time and O(n^2) space.\n\nCODE:\n*/\n\nint fmemo(int i, int j, vector<int>& nums, vector<vector<int>>& dp){\n    if(j < i) return 0;\n\n    if(dp[i][j] != -1) return dp[i][j];\n\n    int ans = -1e9;\n    // the main curx is we are finding the last ballon remaining instead of the one bursting so that both sub problems remain independent\n    for(int k = i; k <= j; k++){\n        int coins = (nums[i - 1] * nums[k] * nums[j + 1]) + fmemo(i, k - 1, nums, dp) + fmemo(k + 1, j, nums, dp);\n        ans = max(ans, coins);\n    }\n    return dp[i][j] = ans;\n}\n\nint maxCoins(vector<int>& nums) {\n    nums.insert(nums.begin(), 1);\n    nums.push_back(1);\n    int n = nums.size();\n    int i = 1, j = n - 2;\n    vector<vector<int>> dp(n, vector<int>(n, -1));\n    return fmemo(i, j, nums, dp);\n}\n\n",
  " Celebrity Problem": "/*\nQUESTION:\nGiven a square NxN matrix representing people at a party, determine if there is a celebrity in the party. A celebrity is defined as a person who is known to all but does not know anyone at the party.\n\nAPPROACH:\nTo solve this problem, we can use a stack to keep track of potential celebrity candidates.\n1. Initially, push all the people (indices) onto the stack.\n2. While the stack size is greater than 1, do the following:\n   - Pop two people 'a' and 'b' from the stack.\n   - Check if 'a' knows 'b' and 'b' does not know 'a'. If true, push 'b' back onto the stack.\n   - Check if 'b' knows 'a' and 'a' does not know 'b'. If true, push 'a' back onto the stack.\n3. After the above loop, if the stack is empty, there is no celebrity, so return -1.\n4. Otherwise, get the potential celebrity from the top of the stack.\n5. Check if the potential celebrity is known by everyone else and does not know anyone else.\n   - If true, return the potential celebrity index.\n   - If false, return -1.\n\nExample:\nInput: N = 3, M[][] = {{0, 1, 0}, {0, 0, 0}, {0, 1, 0}}\nOutput: 1\nExplanation: Both person 0 and person 2 know person 1. Therefore, person 1 is the celebrity.\n\nCODE:\n*/\n\nbool knows(int a, int b, vector<vector<int>>& M) {\n    return M[a][b];\n}\n\nint celebrity(vector<vector<int>>& M, int n) {\n    stack<int> st;\n    for (int i = 0; i < n; i++) {\n        st.push(i);\n    }\n\n    while (st.size() > 1) {\n        int a = st.top();\n        st.pop();\n        int b = st.top();\n        st.pop();\n\n        if (knows(a, b, M) && !knows(b, a, M))\n            st.push(b);\n        else if (knows(b, a, M) && !knows(a, b, M))\n            st.push(a);\n    }\n\n    if (st.empty())\n        return -1;\n\n    int potentialCeleb = st.top();\n\n    // Check if the potential celebrity is known by everyone else and does not know anyone else\n    for (int i = 0; i < n; i++) {\n        if (i != potentialCeleb && (M[i][potentialCeleb] == 0 || M[potentialCeleb][i] == 1))\n            return -1;\n    }\n\n    return potentialCeleb;\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- The time complexity is O(N) because each person is pushed onto and popped from the stack at most once.\n- The space complexity is O(N) because the stack can store at most N elements.\n*/\n",
  " Convert min heap to max heap": "/*\nQUESTION:\nYou are given an array arr of N integers representing a min Heap. The task is to convert it to a max Heap.\n\nA max-heap is a complete binary tree in which the value in each internal node is greater than or equal to the values in the children of that node.\n\nAPPROACH:\nTo convert a min-heap to a max-heap, we need to rearrange the elements of the array in such a way that the max-heap property is satisfied.\n1. Start from the last internal node of the heap (N/2 - 1) and perform heapify on each internal node.\n2. Heapify a node by comparing it with its left and right children and swapping if necessary.\n3. Continue this process for all internal nodes until the entire heap is converted to a max-heap.\n\nThe heapify function is implemented to compare a node with its left and right children and swap if necessary to satisfy the max-heap property.\n\nThe convertMinToMaxHeap function is the main function that converts the given min-heap to a max-heap. It starts from the last internal node (N/2 - 1) and performs heapify on each internal node.\n\nTIME COMPLEXITY:\nThe time complexity of the convertMinToMaxHeap function is O(N), where N is the size of the array. This is because we need to perform heapify on each internal node of the heap.\n\nSPACE COMPLEXITY:\nThe space complexity is O(1) as no extra space is used in the conversion process.\n*/\n\nvoid heapify(vector<int>& arr, int node) {\n    int left = (2 * node) + 1;\n    int right = (2 * node) + 2;\n    int largest = node;\n    int n = arr.size();\n\n    if (left < n && arr[left] > arr[largest])\n        largest = left;\n\n    if (right < n && arr[right] > arr[largest])\n        largest = right;\n\n    if (largest != node) {\n        swap(arr[node], arr[largest]);\n        heapify(arr, largest);\n    }\n}\n\nvoid convertMinToMaxHeap(vector<int>& arr, int N) {\n    for (int i = (N / 2) - 1; i >= 0; i--) {\n        heapify(arr, i);\n    }\n}\n",
  " Count distinct subsitrings": "/*\nQUESTION:\nGiven a string of length N of lowercase alphabet characters. Implement the function countDistinctSubstring() to return the count of total distinct substrings of the given string.\n\nApproach:\n- Create a Trie data structure to efficiently store and count distinct substrings.\n- For each character in the string, insert its suffixes into the Trie, and each insertion increases the count of distinct substrings.\n- Return the total count of distinct substrings.\n\nComplexity Analysis:\n- Inserting each substring into the Trie takes O(N) time and O(N) space.\n- Overall time complexity is O(N^2) since there are O(N^2) substrings in total.\n- Space complexity is O(N) to store the Trie.\n*/\n\nclass TrieNode {\npublic:\n    TrieNode* child[26];\n    \n    TrieNode() {\n        for (int i = 0; i < 26; i++) {\n            this->child[i] = NULL;\n        }\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(string word, int& cnt) {\n        TrieNode* curr = root;\n        for (int i = 0; i < word.size(); i++) {\n            int ltr = word[i] - 'a';\n            if (!curr->child[ltr]) {\n                cnt++;\n                curr->child[ltr] = new TrieNode();\n            }\n            curr = curr->child[ltr];\n        }\n    }\n};\n\nint countDistinctSubstring(string s) {\n    int cnt = 0;\n    Trie* tr = new Trie();\n    for (int i = 0; i < s.size(); i++) {\n        tr->insert(s.substr(i), cnt);\n    }\n    return cnt + 1; // Adding 1 for the empty string itself\n}\n",
  " Course Scheduler 1": "/*\nQUESTION:\nThere are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n\nReturn true if you can finish all courses. Otherwise, return false.\n\nAPPROACH:\n- We can model the problem as a directed graph, where each course is a node, and a prerequisite pair [ai, bi] indicates a directed edge from course bi to course ai.\n- To check if we can finish all courses, we need to ensure that the directed graph is a DAG (Directed Acyclic Graph) with no cycles.\n- If there are cycles in the graph, it means there is a circular dependency between courses, and we cannot finish all courses in such cases.\n- To check for cycles, we can use Kahn's algorithm for Topological Sorting.\n- If we can perform a successful Topological Sort (i.e., there is no cycle), then it means we can finish all courses.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(N + E), where N is the number of courses (nodes) and E is the number of prerequisites (edges) in the graph. We perform a BFS-like traversal of all nodes and edges.\n- Space Complexity: O(N + E), where N is the number of courses (nodes) and E is the number of prerequisites (edges) in the graph. We use additional space to store the adjacency list and indegree of each node.\n*/\n\nbool canFinish(int numCourses, vector<vector<int>>& prerequisites) {\n    vector<int> indeg(numCourses, 0);\n    vector<vector<int>> adj(numCourses);\n\n    // Calculate the indegree of each course and build the adjacency list\n    for (auto it : prerequisites) {\n        indeg[it[0]]++;\n        adj[it[1]].push_back(it[0]);\n    }\n\n    queue<int> q;\n\n    // Find courses with indegree 0 and add them to the queue\n    for (int i = 0; i < numCourses; i++) {\n        if (indeg[i] == 0) {\n            q.push(i);\n        }\n    }\n\n    int cnt = 0;\n\n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        cnt++;\n\n        // Remove the course and its outgoing edges\n        for (auto v : adj[node]) {\n            indeg[v]--;\n            if (indeg[v] == 0) {\n                q.push(v);\n            }\n        }\n    }\n\n    // If the count of finished courses is equal to the total number of courses, return true\n    return cnt == numCourses;\n}\n",
  " Diameter of Binary Tree": "/*\nQuestion:\nGiven the root of a binary tree, return the length of the diameter of the tree.\n\nApproach:\n- The diameter of a binary tree is the length of the longest path between any two nodes in the tree.\n- This path may or may not pass through the root.\n- To find the diameter of the tree, we can recursively calculate the height of each node's left and right subtrees.\n- At each node, we calculate the diameter as the maximum of the following three values:\n  - The diameter of the left subtree.\n  - The diameter of the right subtree.\n  - The sum of the heights of the left and right subtrees plus one (for the current node).\n- We update the diameter variable with the maximum diameter encountered during the traversal.\n\nComplexity Analysis:\n- Since we visit each node once and perform constant time operations for each node, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(H), where H is the height of the binary tree. In the worst case, the tree can be skewed and have a height of N, resulting in O(N) space complexity. In the best case, the tree is balanced and has a height of log(N), resulting in O(log(N)) space complexity.\n\nCode:\n*/\n\nint maxDepth(TreeNode* root, int& diameter) {\n    if (!root) {\n        return 0;\n    }\n    int left = maxDepth(root->left, diameter);\n    int right = maxDepth(root->right, diameter);\n    diameter = max(diameter, left + right);\n    return max(left, right) + 1;\n}\n\nint diameterOfBinaryTree(TreeNode* root) {\n    int diameter = 0;\n    maxDepth(root, diameter);\n    return diameter;\n}\n",
  " Dijkstra's Algorithm": "/*\nQUESTION:\nGiven a weighted, undirected, and connected graph of V vertices and an adjacency list 'adj', where 'adj[i]' is a list of lists containing two integers where the first integer of each list j denotes there is an edge between node i and node j, and the second integer corresponds to the weight of that edge. You are also given the source vertex S. You need to find the shortest distance of all vertices from the source vertex S. You have to return a list of integers denoting the shortest distance between each node and the source vertex S.\n\nAPPROACH:\n- We can use Dijkstra's algorithm to find the shortest distance from the source vertex to all other vertices in a weighted graph.\n- The algorithm maintains a priority queue (min-heap) to store the vertices based on their tentative distances from the source vertex. We start with the source vertex and update the distances of its neighbors, pushing them into the priority queue.\n- We continue this process until all vertices are visited and their distances are finalized. The priority queue ensures that we always pick the vertex with the minimum tentative distance for processing.\n- We initialize the distance array 'dis' with a large value (infinity) for all vertices, except the source vertex whose distance is set to 0.\n- We push the source vertex into the priority queue along with its distance, and then perform Dijkstra's algorithm.\n- After the algorithm completes, we have the shortest distances of all vertices from the source vertex in the 'dis' array.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(E + log(V)), where E is the number of edges and V is the number of vertices in the graph. The time complexity is dominated by the priority queue operations in Dijkstra's algorithm.\n- Space Complexity: O(V + E), where V is the number of vertices and E is the number of edges in the graph. We use additional space for the adjacency list, the distance array, and the priority queue.\n*/\n\nvector<int> dijkstra(int n, vector<vector<int>> adj[], int s){\n    vector<int> dis(n, 1e9);\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n\n    dis[s] = 0;\n    pq.push({0, s});\n\n    while(!pq.empty()){\n        int u = pq.top().second;\n        pq.pop();\n        for(auto p : adj[u]){\n            int v = p[0], wt = p[1]; \n            if(dis[u] + wt < dis[v]){\n                dis[v] = dis[u] + wt;\n                pq.push({dis[v], v});\n            }\n        }\n    }\n\n    return dis;\n}\n",
  " Flood-Fill Algorithm": "/*\nQUESTION:\n\nAn image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.\n\nYou are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].\n\nTo perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color.\n\nReturn the modified image after performing the flood fill.\n\nExample:\n\nInput: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.\n\nCODE:\n*/\n\nvector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {\n    vector<vector<int>> ans(image.begin(), image.end());\n    int m = image.size(), n = image[0].size();\n    queue<pair<int, int>> q;\n    q.push({sr, sc});\n    int s = ans[sr][sc];\n    ans[sr][sc] = color;\n\n    vector<int> dr = {-1, 1, 0, 0};\n    vector<int> dc = {0, 0, -1, 1};\n\n    while (!q.empty()) {\n        int siz = q.size();\n        while (siz--) {\n            auto p = q.front();\n            q.pop();\n            int x = p.first, y = p.second;\n            for (int i = 0; i < 4; i++) {\n                int nx = x + dr[i], ny = y + dc[i];\n                if (nx >= 0 && nx < m && ny >= 0 && ny < n && ans[nx][ny] == s && ans[nx][ny] != color) {\n                    ans[nx][ny] = color;\n                    q.push({nx, ny});\n                }\n            }\n        }\n    }\n\n    return ans;\n}\n",
  " Frog K Jumps": "/*\nQUESTION:-\nGeek wants to climb from the 0th stair to the (n-1)th stair. At a time, the Geek can climb k steps.\nA height[N] array is also given. Whenever the geek jumps from stair i to stair j, the energy consumed in the jump is abs(height[i] - height[j]), where abs() means the absolute difference.\nReturn the minimum energy that can be used by the Geek to jump from stair 0 to stair N-1.\n\nExample:\nInput:\n4 2\n10 40 30 10\nOutput:\n40\n\nExplanation:\nFor 'n' = 4, 'k' = 2, height = {10, 40, 30, 10}\n\nInitially, we are present at stone 1 having height 10. We can reach stone 3 as 'k' is 2. So, the cost incurred is |10 - 30| = 20.\n\nNow, we are present at stone 3, we can reach stone 4 as 'k' is 2. So, the cost incurred is |30 - 10| = 20. So, the total cost is 40. We can show any other path will lead to greater cost.\n\nApproach:\n1. We can use dynamic programming with memoization to find the minimum energy required to jump from the 0th stair to the (n-1)th stair.\n2. We define a helper function fmemo(i, k, h, dp) that calculates the minimum energy required to jump from the 0th stair to the ith stair using memoization.\n3. The function checks if the minimum energy for the ith stair is already calculated and stored in the dp array. If yes, it returns the value from dp.\n4. Otherwise, it calculates the minimum energy by considering all possible jumps from i-j (where j varies from 1 to k) and stores the result in dp[i].\n5. The base case is when i is 0, in which case the function returns 0 as the Geek is already at the 0th stair.\n6. In the main function minimizeCost(n, k, height), we create a dp array of size n initialized with -1 and call the fmemo function passing n-1 (last stair), k, the height array, and the dp array as arguments.\n\nComplexity Analysis:\n- The time complexity of the fmemo function is O(n*k) because we are calculating and storing the minimum energy for each stair and considering k possible jumps at each stair.\n- The space complexity is also O(n) to store the dp array.\n*/\n\n// Memoization\nint fmemo(int i, int k, vector<int>& h, vector<int>& dp) {\n    if (i == 0)\n        return dp[i] = 0;\n\n    if (dp[i] != -1)\n        return dp[i];\n\n    int ans = INT_MAX, temp = INT_MAX;\n    for (int j = 1; j <= k; j++) {\n        if (i - j >= 0)\n            temp = fmemo(i - j, k, h, dp) + abs(h[i] - h[i - j]);\n        ans = min(ans, temp);\n    }\n\n    return dp[i] = ans;\n}\n\n// Tabulation\nint ftab(int i, int k, vector<int>& h){\n    int n = h.size();\n    vector<int> dp(n,INT_MAX);\n    dp[0] = 0;\n\n    int temp = INT_MAX;\n    for(int i=1; i<n; i++){\n        for(int j=1; j<=k; j++){\n            if(i-j >= 0) temp = dp[i-j]+abs(h[i]-h[i-j]);\n            dp[i] = min(dp[i],temp);\n        }\n    }\n    return dp[n-1];\n}\n\nint minimizeCost(int n, int k, vector<int>& height) {\n    vector<int> dp(n, -1);\n    return fmemo(n - 1, k, height, dp);\n}\n",
  " Fruit into Baskets": "/*QUESTION:\nYou are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits of size N, where fruits[i] is the type of fruit the ith tree produces.\nYou want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:\n1. You only have two baskets, and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold.\n2. Starting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of the baskets.\n3. Once you reach a tree with fruit that cannot fit in your baskets, you must stop.\n\nGiven the integer array fruits, return the maximum number of fruits you can pick.\n\nExample 1:\nInput: N = 3, fruits[] = {2, 1, 2}\nOutput: 3\nExplanation: We can pick fruits from all three trees.\n\nAPPROACH:\n1. Initialize an unordered_map mp to track the frequency of fruit types.\n2. Initialize variables ans and start to keep track of the maximum number of fruits and the start index of the subarray.\n3. Iterate through the fruit trees using a sliding window approach:\n   - Increment the frequency of the current fruit type in the map.\n   - Enter a while loop to adjust the start index until the number of fruit types in the map becomes more than 2.\n   - During the adjustment, decrement the frequency of the fruit type at the start index and remove it from the map if the frequency becomes 0.\n   - Update the ans by taking the maximum of the current ans and the length of the current subarray if the number of fruit types in the map is at most 2.\n4. Return the maximum number of fruits (ans).\n\nCODE:*/\n\nint totalFruits(int N, vector<int>& fruits) {\n    unordered_map<int, int> mp;\n    int ans = 0, start = 0;\n    for(int i = 0; i < fruits.size(); i++) {\n        mp[fruits[i]]++;\n        while(mp.size() > 2) {\n            mp[fruits[start]]--;\n            if(mp[fruits[start]] == 0)\n                mp.erase(fruits[start]);\n            start++;\n        }\n        if(mp.size() <= 2)\n            ans = max(ans, i - start + 1);\n    }\n    return ans;\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- Time complexity: O(N), where N is the number of fruit trees. We iterate through the fruit trees once using the sliding window approach.\n- Space complexity: O(1) or O(2), as the size of the map can be at most 2 since we only have two baskets.\n*/\n",
  " Implement stack using queue": "/*\nQuestion:\nImplement a Stack using one queue.\n\nApproach:\n- We use the class `QueueStack` to represent the stack.\n- The stack is implemented using one queue `q`.\n- The `push(int)` function inserts an element into `q`.\n- The `pop()` function transfers `n-1` elements from front of `q` to it's back and returns the last element from `q` as the popped element.\n\n\nCode:\n*/\n\nclass QueueStack {\nprivate:\n    std::queue<int> q;\n\npublic:\n    void push(int x);\n    int pop();\n};\n\nvoid QueueStack::push(int x)\n{\n    q.push(x);\n}\n\nint QueueStack::pop()\n{\n    if (q.empty())\n        return -1;\n\n    for(int i=0; i<q.size()-1; i++){\n        int temp = q.front();\n        q.pop();\n        q.push(temp);\n    }\n\n    int popped = q.front();\n    q.pop();\n\n    return popped;\n}\n\n\n/*\nComplexity Analysis:\n- The `push()` operation has a time complexity of O(1) since we only need to enqueue an element into `q`.\n- The `pop()` operation has a time complexity of O(N) in the worst case, where N is the number of elements in `q`.\n- The space complexity is O(N), where N is the total number of elements stored in the queue.\n*/\n\n",
  " Insert into BST": "/*\nQuestion:\nYou are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.\n\nNotice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.\n\nExample 1:\nInput: root = [4,2,7,1,3], val = 5\nOutput: [4,2,7,1,3,5]\n*/\n\n/*\nApproach:\n1. To insert a value 'val' into the BST, we start from the root node and traverse down the tree to find the appropriate position for insertion.\n2. If the BST is empty (i.e., root is null), we create a new node with value 'val' and make it the root of the BST.\n3. If the value of the current node is less than 'val', we move to the right subtree, as the value to be inserted will be greater than the current node.\n4. If the value of the current node is greater than or equal to 'val', we move to the left subtree, as the value to be inserted will be less than or equal to the current node.\n5. We continue this process of traversing down the tree until we reach a leaf node where we can insert the new value 'val'.\n\nComplexity Analysis\nTime complexity: O(h), where h is the height of the BST. In the worst case, the function needs to traverse the entire height of the BST to find the appropriate position for insertion.\nSpace complexity: O(h), where h is the height of the BST. In the worst case, the function may have to traverse the entire height of the BST, leading to h recursive calls in the call stack.\n\nCODE:-\n\n*/\n\nTreeNode* insertIntoBST(TreeNode* root, int val) {\n    if (!root) return new TreeNode(val);\n    if (root->val < val) root->right = insertIntoBST(root->right, val); \n    else root->left =  insertIntoBST(root->left, val);\n    return root;\n}\n",
  " Jump Game 2": "/*\nQuestion:\nYou are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\nEach element nums[i] represents the maximum length of a forward jump from index i.\nReturn the minimum number of jumps to reach nums[n - 1].\n\nExample:\nInput: nums = [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\nApproach:\n- We maintain three variables: 'steps', 'end', and 'farthest'.\n- 'steps' keeps track of the minimum number of jumps required.\n- 'end' represents the current farthest position that we can reach.\n- 'farthest' stores the farthest position we can reach by taking a jump from the current position.\n- We iterate over the array from left to right, except for the last element.\n- At each position, we update the 'farthest' by taking the maximum of the current farthest and the current position plus the maximum jump length at that position.\n- If the 'farthest' position is greater than or equal to the last index, it means we can reach the end, so we return 'steps + 1'.\n- When we reach the 'end' position, it means we have taken the maximum number of jumps from the previous step.\n- So, we increment 'steps' by 1 and update the 'end' to the 'farthest' position.\n- Finally, we return the 'steps' as the minimum number of jumps required.\n\nComplexity Analysis:\n- The time complexity of this approach is O(N), where N is the length of the input array 'nums'.\n- We iterate over the array once.\n- The space complexity is O(1) as we use only a constant amount of extra space.\n\nCode:\n*/\n\nint jump(vector<int>& nums) {\n    int steps = 0, end = 0, farthest = 0;\n    for (int i = 0; i < nums.size() - 1; i++) {\n        farthest = max(farthest, nums[i] + i);\n        if (farthest >= nums.size() - 1)\n            return steps + 1;\n        if (i == end) {\n            steps++;\n            end = farthest;\n        }\n    }\n    return steps;\n}\n",
  " KMP or Z string matching algo": "/*\nQUESTION:\nGiven two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n\nExample 1:\nInput: haystack = \"sadbutsad\", needle = \"sad\"\nOutput: 0\nExplanation: \"sad\" occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n\nApproach:\n- We can solve this problem using the KMP (Knuth-Morris-Pratt) string matching algorithm.\n- First, we calculate the LPS (Longest Prefix Suffix) array for the needle string.\n- Then, we create a new string by concatenating needle, a special character (not present in either needle or haystack), and haystack.\n- We iterate through the new string and compare characters using the LPS array to determine if there is a match.\n- If the LPS value becomes equal to the length of the needle, it means we have found a match, and we return the starting index of the match in the haystack string.\n\nComplexity Analysis:\n- The time complexity of this solution is O(m + n), where m is the length of the needle and n is the length of the haystack.\n- The space complexity is O(m + n) but can be reduced to O(n), where m is the length of the needle.\n\nCODE:\n*/\n\nvector<int> lps(string& s){\n    int n = s.size();\n    vector<int> pi(n);\n    for(int i = 1; i < n; i++){\n        int j = pi[i - 1];\n        while(j > 0 && s[j] != s[i]) {\n            j = pi[j - 1];\n        }\n        if(s[j] == s[i]) {\n            j++;\n        }\n        pi[i] = j;\n    }\n    return pi;\n}\n\nint strStr(string haystack, string needle) {\n    if(needle.empty()) {\n        return 0;\n    }\n    string temp = needle + '$' + haystack;\n    vector<int> lpsArray = lps(temp);\n    for(int i = 0; i < lpsArray.size(); i++) {\n        if(lpsArray[i] == needle.size()) {\n            return i - 2 * needle.size();\n        }\n    }\n    return -1;\n}\n",
  " Kth largest element in stream": "/*\nQuestion:\nDesign a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.\n\nImplement KthLargest class:\n- KthLargest(int k, int[] nums): Initializes the object with the integer k and the stream of integers nums.\n- int add(int val): Appends the integer val to the stream and returns the element representing the kth largest element in the stream.\n\nExample:\nInput:\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\nOutput:\n[null, 4, 5, 5, 8, 8]\n\nExplanation:\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8\n\nApproach:\n- Use a min heap (priority queue) to store the k largest elements.\n- Initialize the min heap with the first k elements from the stream (nums) in the constructor.\n- For each subsequent element in the stream, add it to the min heap.\n- If the size of the min heap exceeds k, remove the smallest element.\n- The top element of the min heap represents the kth largest element.\n\nComplexity Analysis:\n- The time complexity of adding an element is O(log k) due to the insertion and removal operations in the min heap.\n- The space complexity is O(k) to store the k largest elements in the min heap.\n\nCode:\n*/\n\nclass KthLargest {\nprivate:\n    priority_queue<int, vector<int>, greater<int>> pq;\n    int k;\n    \npublic:\n    KthLargest(int k, vector<int>& nums) {\n        this->k = k;\n        for (int i = 0; i < nums.size(); i++) {\n            pq.push(nums[i]);\n            if (pq.size() > k) {\n                pq.pop();\n            }\n        }\n    }\n    \n    int add(int val) {\n        pq.push(val);//* this is amazing to use\n        if (pq.size() > k) {\n            pq.pop();\n        }\n        return pq.top();\n    }\n};\n\n",
  " Largest Divisible Subset": "/*\nQUESTION:\nGiven a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:\n- answer[i] % answer[j] == 0, or\n- answer[j] % answer[i] == 0\nIf there are multiple solutions, return any of them.\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- Sort the input array nums in ascending order.\n- Let dp[i] represent the size of the largest divisible subset ending at index i.\n- Additionally, maintain a prevmap to track the previous index in the subset.\n- Iterate through the sorted array and for each index i, iterate through all previous indices (prev) from 0 to i-1.\n- If nums[i] is divisible by nums[prev] and dp[i] < dp[prev] + 1, update dp[i] and prevmap[i].\n- Find the index i where dp has the maximum value.\n- Construct the largest divisible subset using the prevmap and the found index i.\n- Return the subset.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n^2), where n is the length of the input array nums.\n- The space complexity is O(n) due to the dp and prevmap arrays, as well as the lis vector.\n- Overall, the algorithm runs in O(n^2) time and O(n) space.\n\nCODE:\n*/\n\nvector<int> ftab(int n, vector<int>& nums) {\n    vector<int> dp(n, 1);\n    vector<int> prevmap(n, -1);\n    \n    for (int i = 0; i < n; i++) {\n        for (int prev = 0; prev < i; prev++) {\n            if (nums[i] % nums[prev] == 0 && dp[i] < dp[prev] + 1) {\n                dp[i] = dp[prev] + 1;\n                prevmap[i] = prev;\n            }\n        }\n    }\n    \n    int i = max_element(dp.begin(), dp.end()) - dp.begin();\n    vector<int> lis;\n    \n    while (i >= 0) {\n        lis.push_back(nums[i]);\n        i = prevmap[i];\n    }\n    \n    return lis;\n}\n\nvector<int> largestDivisibleSubset(vector<int>& nums) {\n    int n = nums.size();\n    sort(nums.begin(), nums.end());\n    return ftab(n, nums);\n}\n",
  " Lemonade Exchange": "/*\nQuestion:\nAt a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills).\nEach customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5.\nNote that you do not have any change in hand at first.\nGiven an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.\n\nExample:\nInput: bills = [5, 5, 5, 10, 20]\nOutput: true\nExplanation:\nFrom the first 3 customers, we collect three $5 bills in order.\nFrom the fourth customer, we collect a $10 bill and give back a $5.\nFrom the fifth customer, we give a $10 bill and a $5 bill.\nSince all customers got correct change, we output true.\n\nApproach:\n- We maintain two counters: `fiveCnt` to count the number of $5 bills and `tenCnt` to count the number of $10 bills we have.\n- We iterate over the bills array.\n- For each bill, we check if it is $5, $10, or $20.\n  - If it is $5, we increment the `fiveCnt`.\n  - If it is $10, we increment the `tenCnt` and decrement the `fiveCnt` since we need to give back a $5 bill as change.\n  - If it is $20, we try to give back a $10 bill and a $5 bill as change if we have them. Otherwise, we try to give back three $5 bills.\n- After each transaction, we check if the `fiveCnt` is negative, which means we have given a $5 bill that we actually don't have. In this case, we return false.\n- If we successfully process all the bills without any negative `fiveCnt`, we return true.\n\nComplexity Analysis:\n- The time complexity of this approach is O(N), where N is the length of the bills array.\n- We iterate over the bills array once to process each bill.\n- The space complexity is O(1) as we are using only a constant amount of extra space.\n\nCode:\n*/\n\nbool lemonadeChange(vector<int>& bills) {\n    int fiveCnt = 0, tenCnt = 0;\n    for (auto bill : bills) {\n        if (bill == 5)\n            fiveCnt++;\n        else if (bill == 10) {\n            tenCnt++;\n            fiveCnt--;\n        } else {\n            if (tenCnt) {\n                tenCnt--;\n                fiveCnt--;\n            } else\n                fiveCnt -= 3;\n        }\n        // this means we have given $5 which we actually don't have\n        if (fiveCnt < 0)\n            return false;\n    }\n    return true;\n}",
  " Longest Common Substring": "/*\nQUESTION:\nGiven two strings. The task is to find the length of the longest common substring.\n\nExample:\nInput: S1 = \"ABCDGH\", S2 = \"ACDGHR\", n = 6, m = 6\nOutput: 4\nExplanation: The longest common substring is \"CDGH\" which has length 4.\n\nAPPROACH:\n- This problem can be solved using Dynamic Programming (DP).\n- Initialize a 2D DP array 'dp' where dp[i][j] represents the length of \n  the longest common suffix of substrings S1[0..i-1] and S2[0..j-1].\n- Initialize a variable 'maxi' to keep track of the maximum length found.\n- For each character at index 'i' in S1 and each character at index 'j' \n  in S2:\n  - If S1[i] == S2[j], then dp[i][j] = dp[i-1][j-1] + 1\n  - Else, dp[i][j] = 0 (as no common suffix found)\n  - Update 'maxi' with dp[i][j]\n- The required answer will be 'maxi'.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of the solution is O(n*m), where 'n' and 'm' are \n  the lengths of S1 and S2 respectively.\n- The space complexity is O(n*m) for the dp array.\n\nCODE:\n*/\n\nint maxi = 0;\n\nint fmemo(int i, int j, string& s, string& r, vector<vector<int>>& dp){\n    if(i < 0 || j < 0) return 0;\n\n    if(dp[i][j] != -1) return dp[i][j];\n\n    if(s[i] == r[j]){\n        dp[i][j] = fmemo(i - 1, j - 1, s, r, dp) + 1;\n        maxi = max(maxi, dp[i][j]);\n    }\n    else dp[i][j] = 0;\n\n    fmemo(i - 1, j, s, r, dp);\n    fmemo(i, j - 1, s, r, dp);\n\n    return dp[i][j];\n}\n\nint longestCommonSubstr(string S1, string S2, int n, int m){\n    vector<vector<int>> dp(n, vector<int>(m, -1));\n    fmemo(n - 1, m - 1, S1, S2, dp);\n    return maxi;\n}\n",
  " Max width of binary tree": "/* QUESTION:\n\nGiven the root of a binary tree, return the maximum width of the given tree.\n\nThe maximum width of a tree is the maximum width among all levels.\n\nThe width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.\n\nIt is guaranteed that the answer will be in the range of a 32-bit signed integer.\n\nExample 1:\nInput: root = [1,3,2,5,3,null,9]\nOutput: 4\nExplanation: The maximum width exists in the third level with length 4 (5,3,null,9).\n\n\nAPPROACH:\n\nTo find the maximum width, we can perform a level-order traversal (BFS) of the binary tree while keeping track of the indices of nodes at each level. For each level, we calculate the width by finding the difference between the indices of the leftmost and rightmost non-null nodes. The maximum width among all levels will be the answer.\n\nCOMPLEXITY ANALYSIS:\n\nLet `n` be the number of nodes in the binary tree.\n- Time Complexity: The time complexity of this approach is O(n) since we need to traverse all nodes in the binary tree using BFS.\n- Space Complexity: The space complexity is O(w) for the queue, where `w` is the maximum width of the binary tree at any level.\n\nCODE:\n*/\n\nint widthOfBinaryTree(TreeNode* root) {\n    if (!root) return 0;\n    long long ans = 0;\n    queue<pair<long long, TreeNode*>> q;\n    q.push({0, root});\n\n    while (!q.empty()) {\n        int n = q.size();\n        long long start = q.front().first;\n        long long end = q.back().first;\n\n        for (int i = 0; i < n; i++) {\n            auto p = q.front();\n            q.pop();\n            // note we are doing -start because we don't need previous value\n            long long index = p.first - start;\n            TreeNode* curr = p.second;\n\n            if (curr->left) q.push({2 * index + 1, curr->left});\n            if (curr->right) q.push({2 * index + 2, curr->right});\n        }\n\n        ans = max(ans, end - start + 1);\n    }\n\n    return (int)ans;\n}\n",
  " Merge K sorted arrays": "/*\nQUESTION:\nGiven K sorted arrays arranged in the form of a matrix of size K*K, the task is to merge them into one sorted array.\n\nAPPROACH:\nTo merge K sorted arrays, we can use a min-heap (priority queue) to store the smallest elements from each array.\n1. Create a min-heap of size K to store the current smallest elements from each array.\n2. Initialize the min-heap with the first element from each array.\n3. While the min-heap is not empty, extract the smallest element from the min-heap, add it to the merged array, and replace it with the next element from the same array.\n4. Repeat step 3 until all elements from all arrays are processed.\n\nThe mergeKArrays function implements this approach. It uses a min-heap (priority queue) to merge K sorted arrays into one sorted array.\n\nTIME COMPLEXITY:\nThe time complexity of the mergeKArrays function is O(K^2 log K), where K is the size of each array. Inserting elements into the min-heap and extracting the minimum element take O(log K) time, and we do this for K^2 elements. The overall time complexity is dominated by the heap operations.\n\nSPACE COMPLEXITY:\nThe space complexity is O(K) as we need to store K elements in the min-heap.\n*/\n\ntypedef pair<int, pair<int, int>> triplet;\n\nvector<int> mergeKArrays(vector<vector<int>>& arr, int K) {\n    priority_queue<triplet, vector<triplet>, greater<triplet>> pq;\n    \n    for (int i = 0; i < K; i++) {\n        pq.push({arr[i][0], {i, 0}});\n    }\n    \n    vector<int> mergedArray;\n    \n    while (!pq.empty()) {\n        triplet mini = pq.top();\n        pq.pop();\n        \n        mergedArray.push_back(mini.first);\n        \n        int row = mini.second.first;\n        int col = mini.second.second;\n        \n        if (col + 1 < K) {\n            pq.push({arr[row][col + 1], {row, col + 1}});\n        }\n    }\n    \n    return mergedArray;\n}\n",
  " Minimum Sum Partition": "/*\nQUESTION:\nGiven an array arr of size n containing non-negative integers,\nthe task is to divide it into two sets S1 and S2 such that the absolute\ndifference between their sums is minimum and find the minimum difference\n\nExample 1:\nInput: N = 4, arr[] = {1, 6, 11, 5}\nOutput: 1\nExplanation:\nSubset1 = {1, 5, 6}, sum of Subset1 = 12\nSubset2 = {11}, sum of Subset2 = 11\n\nAPPROACH:\n- Calculate the sum of all elements in the array.\n- Initialize a 2D dp array of size n x (sum + 1) to store if it is possible to achieve a sum 's' using the first 'i' elements.\n- Initialize dp[i][0] to true, since an empty subset can have a sum of 0.\n- For each element 'arr[i]' and each possible sum 's' from 1 to 'sum':\n  - Check if it's possible to achieve a sum of 's' using the first 'i-1' elements, or using 's - arr[i]' and the first 'i-1' elements.\n  - Update dp[i][s] accordingly.\n- Iterate through the dp array for the last row and find the minimum absolute difference between the sum 's' and 'totalSum - s' for which dp[n-1][s] is true.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of the solution is O(n * sum), where 'n' is the number of elements and 'sum' is the sum of all elements.\n- The space complexity is O(n * sum) for the dp array.\n\nCODE:\n*/\n\n\nbool ftab(int n, int tar, int arr[], vector<vector<int>>& dp){\n    for(int i = 0; i < n; i++){\n        for(int sum = 0; sum <= tar; sum++){\n            if(sum == 0){\n                dp[i][sum] = true;\n                continue;\n            }\n            if(i == 0){\n                dp[i][sum] = (sum == arr[i]);\n                continue;\n            }\n            bool t = false;\n            if(arr[i] <= sum) t = dp[i-1][sum - arr[i]];\n            bool nt = dp[i-1][sum];\n            dp[i][sum] = (t || nt);\n        }\n    }\n    return dp[n-1][tar];\n}\n\nint minDifference(int arr[], int n){\n    int totalSum = 0;\n    for(int i = 0; i < n; i++) totalSum += arr[i];\n    vector<vector<int>> dp(n, vector<int>(totalSum + 1));\n    ftab(n, totalSum, arr, dp);\n    int ans = INT_MAX;\n    for(int i = 0; i <= totalSum; i++){\n        if(dp[n-1][i])\n            ans = min(ans, abs(i - (totalSum - i)));\n    }\n    return ans;\n}\n",
  " Minimum value in BST": "/**QUESTION:**\n\nGiven a Binary Search Tree (BST), find the minimum value in it.\n\nExample:\n\n\n    8\n   / \n  5\n / \\\n3   6 \n\n\nBST for the given input looks like the above. The minimum value in this BST is `3`.\n\n**APPROACH:**\n\nTo find the minimum value in a BST, we can traverse the left child nodes until we reach the leftmost leaf node, which will have the minimum value.\n\n**COMPLEXITY ANALYSIS:**\n\nLet 'n' be the number of nodes in the BST.\n\n- Time Complexity: The time complexity of finding the minimum value in a BST is O(h), where 'h' is the height of the BST. In the worst case, the height of a skewed BST could be 'n', but in a balanced BST, the height is log(n), making the average time complexity O(log n).\n- Space Complexity: The space complexity is O(1) as we are not using any extra space.\n\n**CODE:**/\n\nint minVal(Node* root) {\n    if (!root) return -1;\n    while (root->left)\n        root = root->left;\n    return root->data;\t\n}\n",
  " Minimum Window Substring": "/*\nQUESTION:\nGiven two strings 's' and 't' of lengths 'm' and 'n' respectively, find the minimum window substring of 's' that contains all the characters of 't' (including duplicates). If there is no such substring, return an empty string.\n\nEXAMPLE:\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string 't'.\n\nAPPROACH:\nWe can solve this problem using a sliding window approach.\n\n1. Create a function, minWindow, that takes 's' and 't' as parameters.\n   - Initialize an unordered_map, mp, to store the frequency of characters in 't'.\n   - Iterate over 't' and update the frequencies in the map.\n   - Initialize 'count' to the number of unique characters in 't'.\n   - Initialize 'start' to 0 and 'minlen' to INT_MAX.\n   - Initialize 'substrBegin' to 0, which represents the starting index of the minimum window substring.\n   - Iterate over 's' from left to right:\n     - Decrement the frequency of the current character in the map.\n     - If the frequency becomes 0, decrement 'count'.\n     - Check if 'count' becomes 0, indicating that we have found a window containing all characters of 't'.\n       - If the current window length is smaller than 'minlen', update 'minlen' and 'substrBegin' to the current window length and starting index respectively.\n       - Move the 'start' pointer to the right, increment the frequency of the character at 'start' in the map, and increment 'count' if the frequency becomes greater than 0.\n   - Return the minimum window substring by using the substr function on 's' with 'substrBegin' and 'minlen' as parameters.\n   - If 'minlen' is still INT_MAX, return an empty string.\n\nCOMPLEXITY ANALYSIS:\n- Time complexity: O(m + n), where m is the length of 's' and n is the length of 't'. We iterate over both strings once using the sliding window approach.\n- Space complexity: O(n), as the space used by the unordered_map is proportional to the number of unique characters in 't', which can be at most 'n'.\n*/\n\nstring minWindow(string s, string t) {\n    unordered_map<char, int> mp;\n\n    for (auto it : t) {\n        mp[it]++;\n    }\n    \n    int count = mp.size();\n    int start = 0, minlen = INT_MAX;\n    int substrBegin = 0;\n\n    for (int i = 0; i < s.size(); i++) {\n        mp[s[i]]--;\n        \n        if (mp[s[i]] == 0)\n            count--;\n        \n        while (count == 0) {\n            if (i - start + 1 < minlen) {\n                substrBegin = start;\n                minlen = i - start + 1;\n            }\n            \n            mp[s[start]]++;\n            \n            if (mp[s[start]] > 0) {\n                count++;\n            }\n            \n            start++;\n        }\n    }\n    \n    return (minlen == INT_MAX) ? \"\" : s.substr(substrBegin, minlen);\n}\n",
  " Number of Operations to make Network": "/* QUESTION:\n\nThere are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] represents a connection between computers ai and bi. Any computer can reach any other computer directly or indirectly through the network.\n\nYou are given an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.\n\nReturn the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.\n\nAPPROACH:\n- We can use the Disjoint Set data structure to keep track of connected components and find the minimum number of times we need to add connections.\n- If the number of connections is less than n - 1 (number of computers minus one), it means the network is disconnected, and we cannot make all the computers connected. In this case, we return -1.\n- Otherwise, we initialize a Disjoint Set data structure with n nodes representing each computer.\n- We iterate through the given connections and union the connected components of each pair of computers using the Disjoint Set data structure.\n- After this, we count the number of disconnected components using the findUPar function of the Disjoint Set data structure.\n- The minimum number of times we need to add connections to make all computers connected is the number of disconnected components minus one.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(E + V), where E is the number of connections and V is the number of computers. The log V factor is due to the unionBySize operation in the Disjoint Set data structure.\n- The space complexity is O(V) for the Disjoint Set data structure and other data structures.\n\nCODE:\n*/\n\nclass DisjointSet {\n    vector<int> parent, size;\n\npublic:\n    DisjointSet(int n) {\n        parent.resize(n);\n        size.resize(n, 1);\n        for (int i = 0; i < n; i++)\n            parent[i] = i;\n    }\n\n    int findUPar(int node) {\n        if (parent[node] == node)\n            return node;\n        return parent[node] = findUPar(parent[node]);\n    }\n\n    void unionBySize(int u, int v) {\n        int uP = findUPar(u), vP = findUPar(v);\n        int uPSize = size[uP], vPSize = size[vP];\n        if (uPSize > vPSize) {\n            parent[vP] = uP;\n            size[uP] += vPSize;\n        } else {\n            parent[uP] = vP;\n            size[vP] += uPSize;\n        }\n    }\n\n    int disconnected(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (parent[i] == i)\n                cnt++;\n        }\n        return cnt;\n    }\n};\n\nint makeConnected(int n, vector<vector<int>>& connections) {\n    if (n - 1 > connections.size())\n        return -1;\n\n    DisjointSet djs(n);\n    for (auto c : connections) {\n        int u = c[0], v = c[1];\n        if (djs.findUPar(u) != djs.findUPar(v))\n            djs.unionBySize(u, v);\n    }\n\n    int ans = djs.disconnected(n);\n    return ans - 1;\n}\n",
  " Prefix to infix": "/*\nQUESTION:\nYou are given a string S of size N that represents the prefix form of a valid mathematical expression. Convert it to its infix form.\n\nExample:\nInput: \n*-A/BC-/AKL\nOutput: \n((A-(B/C))*((A/K)-L))\nExplanation: \nThe above output is its valid infix form.\n\nAPPROACH:\n- We can use a stack to convert the prefix expression to infix.\n- We iterate through each character of the input string in reverse order.\n- If the character is an operand (letter or digit), we push it onto the stack.\n- If the character is an operator, we pop two operands from the stack, concatenate them with the operator and enclosing parentheses, and push the result back onto the stack.\n- After iterating through all characters, the top of the stack will contain the final infix expression.\n\nCODE:\n*/\n\nstring preToInfix(string pre_exp) {\n    stack<string> st;\n    \n    for (int i = pre_exp.size() - 1; i >= 0; i--) {\n        char ch = pre_exp[i];\n        \n        if (('A' <= ch && ch <= 'Z') || ('a' <= ch && ch <= 'z') || ('0' <= ch && ch <= '9')) {\n            string temp = \"\";\n            temp += ch;\n            st.push(temp);\n        } else {\n            string a = st.top();\n            st.pop();\n            string b = st.top();\n            st.pop();\n            \n            string temp = \"(\" + a + ch + b + \")\";\n            st.push(temp);\n        }\n    }\n    \n    return st.top();\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- The time complexity of the preToInfix function is O(N), where N is the length of the input string.\n- We iterate through each character once, and the operations performed inside the loop are all constant time.\n- The space complexity is O(N) as we use a stack to store operands.\n*/\n",
  " Preorder Traversal": "/*\nQuestion:\nGiven the root of a binary tree, return the preorder traversal of its nodes' values.\n\nApproach:\n- Preorder traversal visits the root node first, followed by the left subtree, and then the right subtree.\n- We can solve this problem recursively by following the preorder traversal order.\n- Starting from the root node, we can add the node's value to the result vector, then recursively traverse the left subtree and right subtree.\n\nComplexity Analysis:\n- Since we are visiting each node once, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(N) as we are using the call stack for recursion.\n\nCode:\n*/\n\nvector<int> preorderTraversal(TreeNode* root) {\n    vector<int> ans;\n    solve(root, ans);\n    return ans;\n}\n\nvoid solve(TreeNode* root, vector<int>& ans) {\n    if (!root) {\n        return;\n    }\n    ans.push_back(root->val);\n    solve(root->left, ans);\n    solve(root->right, ans);\n}\n",
  " Previous Smaller Element": "/*QUESTION:\nGiven an array `a` of integers of length `n`, find the nearest smaller number for every element such that the smaller element is on the left side. If no smaller element is present on the left, print -1.\n\nExample:\n\nInput: n = 3\na = {1, 6, 2}\nOutput: -1 1 1\nExplanation: There is no number at the left of 1. The smaller number than 6 and 2 is 1.\n\nAPPROACH:\nTo find the nearest smaller number on the left for each element, we can utilize a stack. \nWe iterate through the array from left to right. For each element, we compare it with the elements in the stack. \nIf an element in the stack is greater than or equal to the current element, we pop it from the stack since it cannot be the nearest smaller number on the left. \nThe top of the stack at each iteration will hold the nearest smaller number on the left for the corresponding element in the array.\n\nCODE:*/\n\nvector<int> leftSmaller(int n, int arr[]) {\n    stack<int> st;\n    vector<int> ans(n, -1);\n\n    for (int i = 0; i < n; i++) {\n        while (!st.empty() && st.top() >= arr[i])\n            st.pop();\n\n        if (!st.empty())\n            ans[i] = st.top();\n\n        st.push(arr[i]);\n    }\n\n    return ans;\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(N), where N is the length of the input array `a`. We iterate through the array once.\n- The space complexity is O(N) as we use a stack to store the elements.\n*/\n\n",
  " Sieve of Eratosthenes": "/*\nQUESTION:\nGiven an integer n, return the number of prime numbers that are strictly less than n.\n\nExample:\nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, which are 2, 3, 5, and 7.\n\nAPPROACH:\nTo count the number of prime numbers less than a given number n, we can use the Sieve of Eratosthenes algorithm.\n1. Create a boolean vector `primes` of size n+1 and initialize all elements to true. This vector will be used to mark numbers as prime or not.\n2. Initialize a variable `cnt` to count the number of primes.\n3. Iterate from 2 to n-1:\n   - If primes[i] is true (i.e., i is a prime number), increment `cnt`.\n   - Mark all multiples of i as false in the `primes` vector, as they are not prime.\n4. Return `cnt`, which will be the count of prime numbers less than n.\n\nCODE:*/\nint countPrimes(int n) {\n    vector<bool> primes(n + 1, true);\n    int cnt = 0;\n    for (long long i = 2; i < n; i++) {\n        if (primes[i]) {\n            cnt++;\n            for (long long j = i * i; j <= n; j += i) {\n                primes[j] = false;\n            }\n        }\n    }\n    return cnt;\n}\n\n// Time Complexity: O(n log log n)\n// Space Complexity: O(n)\n\n\n",
  " Unique Paths 2": "/*\nQUESTION:-\nYou are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n\nAn obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\n\nReturn the number of possible unique paths that the robot can take to reach the bottom-right corner.\n\nExample:\nInput: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\nOutput: 2\nExplanation: There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right\n\nApproach:\n1. We can solve this problem using dynamic programming with memoization (top-down approach).\n2. We define a helper function fmemo(i, j, grid, dp) that calculates the number of unique paths from the top-left corner (0, 0) to the cell (i, j) on the grid.\n3. The function checks if the number of unique paths for the cell (i, j) is already calculated and stored in the dp array. If yes, it returns the value from dp.\n4. If the cell (i, j) contains an obstacle (i.e., grid[i][j] == 1), then there is no possible path through that cell, so the function returns 0.\n5. Otherwise, it calculates the number of unique paths for the cell (i, j) by adding the number of unique paths from the cell above (i-1, j) and the cell to the left (i, j-1).\n6. The base case is when i or j is less than 0, in which case the function returns 0 as there are no paths to reach those cells.\n7. In the main function uniquePathsWithObstacles(obstacleGrid), we create a dp array of size m x n initialized with -1 and call the fmemo function for the bottom-right cell (m-1, n-1).\n8. Finally, we return the number of unique paths obtained for the bottom-right cell as the result.\n\nComplexity Analysis:\n- The time complexity of the fmemo function is O(m x n) because we are calculating the number of unique paths for each cell only once and storing it in the dp array.\n- The space complexity is also O(m x n) to store the dp array.\n\nNote: The given test cases are generated such that the answer will be less than or equal to 2 x 10^9.\n*/\n\n// Memoization\nint fmemo(int i, int j, vector<vector<int>>& grid, vector<vector<int>>& dp) {\n    if (i < 0 || j < 0)\n        return 0;\n\n    if (dp[i][j] != -1)\n        return dp[i][j];\n\n    if (grid[i][j] == 1)\n        return dp[i][j] = 0;\n\n    int top = fmemo(i - 1, j, grid, dp);\n    int left = fmemo(i, j - 1, grid, dp);\n    return dp[i][j] = top + left;\n}\n\n// Tabulation\nint ftab(int m, int n, vector<vector<int>>& grid){\n    vector<vector<int>> dp(m,vector<int>(n));\n    for(int i=0; i<m; i++){\n        for(int j=0; j<n; j++){\n            if(i==0 && j==0){\n                dp[i][j] = 1;\n                continue;\n            }\n            if(grid[i][j]==1){\n                dp[i][j] = 0;\n                continue;\n            }\n            int top = 0, left = 0;\n            if(i-1>=0) top = dp[i-1][j];\n            if(j-1>=0) left = dp[i][j-1];\n            dp[i][j] = top+left;\n        }\n    }\n    return dp[m-1][n-1];\n}\n\n// Space Optimization\nint fopt(int m, int n, vector<vector<int>>& grid){\n    vector<int> prev(n);\n    for(int i=0; i<m; i++){\n        vector<int> curr(n);\n        for(int j=0; j<n; j++){\n            if(grid[i][j]==1){\n                curr[j]=0;\n                continue;\n            }\n            if(i==0 && j==0){\n                curr[j]=1;\n                continue;\n            }\n            int top = 0, left = 0;\n            if(i-1>=0) top = prev[j];\n            if(j-1>=0) left = curr[j-1];\n            curr[j] = top+left;\n        }\n        prev = curr;\n    }\n    return prev[n-1];\n}\n\nint uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n    int m = obstacleGrid.size(), n = obstacleGrid[0].size();\n    if (obstacleGrid[0][0] == 1 || obstacleGrid[m - 1][n - 1] == 1)\n        return 0;\n\n    vector<vector<int>> dp(m, vector<int>(n, -1));\n    return fmemo(m - 1, n - 1, obstacleGrid, dp);\n}\n",
  " XOR of numbers from L to R": "/*\nQuestion:\nYou are given two integers L and R, your task is to find the XOR of elements of the range [L, R].\n\nExample:\n\nInput:\nL = 4, R = 8\nOutput:\n8\nExplanation:\n4 ^ 5 ^ 6 ^ 7 ^ 8 = 8\n*/\n\n/*\nApproach:\nThe XOR of a range [L, R] can be calculated by XORing the XORs of the individual numbers in the range [1, L-1] and [1, R].\nWe can observe a pattern in the XOR values based on the remainders of the numbers divided by 4.\nUsing this pattern, we can calculate the XOR of a given number n by applying some conditions.\n\n1. If n % 4 == 0, the XOR value is n.\n2. If n % 4 == 1, the XOR value is 1.\n3. If n % 4 == 2, the XOR value is n+1.\n4. If n % 4 == 3, the XOR value is 0.\n\nBy calculating the XOR values for L-1 and R separately using the above pattern, we can XOR them to get the final result.\n\nCode:\n*/\n\nint calculateXOR(int n) {\n    if (n % 4 == 0)\n        return n;\n    if (n % 4 == 1)\n        return 1;\n    if (n % 4 == 2)\n        return n + 1;\n    if (n % 4 == 3)\n        return 0;\n}\n\nint findXOR(int L, int R) {\n    int uptol = calculateXOR(L - 1);\n    int uptor = calculateXOR(R);\n    return uptor ^ uptol;\n}\n\n/*\nComplexity Analysis:\n- The time complexity is O(1) as the calculations are based on simple arithmetic operations.\n- The space complexity is O(1) as no extra space is required.\n*/\n\n",
  "3_sum": "/*\nQUESTION:\nGiven an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\n\nExample:\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation:\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n*/\n\n/*\nAPPROACH:\nTo find all triplets that sum up to zero, we can follow these steps:\n1. Sort the input array in non-decreasing order.\n2. Iterate through the array and fix the first element as nums[k] (where k = 0 to n-1).\n3. Use two pointers (i and j) to find the other two elements such that nums[i] + nums[j] = -nums[k].\n4. Move the pointers accordingly to find all possible triplets.\n5. Skip duplicate elements to avoid duplicate triplets.\n6. Return the resulting triplets.\n*/\n\nvector<vector<int>> threeSum(vector<int> &nums)\n{\n    vector<vector<int>> ans;\n    sort(nums.begin(), nums.end());\n\n    for (int k = 0; k < nums.size(); k++)\n    {\n        int i = k + 1;\n        int j = nums.size() - 1;\n        int target = -nums[k];\n\n        while (i < j)\n        {\n            int sum = nums[i] + nums[j];\n\n            if (sum == target)\n            {\n                ans.push_back({nums[k], nums[i], nums[j]});\n                i++;\n                j--;\n\n                // Skip duplicate elements\n                while (i < j && nums[i] == nums[i - 1])\n                    i++;\n                while (i < j && nums[j] == nums[j + 1])\n                    j--;\n            }\n            else if (sum < target)\n            {\n                i++;\n            }\n            else\n            {\n                j--;\n            }\n        }\n\n        // Skip duplicate elements\n        while (k + 1 < nums.size() && nums[k + 1] == nums[k])\n            k++;\n    }\n\n    return ans;\n}\n\n/*\nTIME COMPLEXITY: O(n^2), where n is the size of the input array.\nThe sorting step takes O(n log n), and the two-pointer traversal takes O(n^2) in the worst case.\nHence, the overall time complexity is O(n^2).\n\nSPACE COMPLEXITY: O(1), as we are using a constant amount of extra space for storing the output and variables.\n*/\n",
  "Check for odd even": "/*\nQUESTION:-\nGiven a positive integer N, determine whether it is odd or even.\n\nExample 1:\n\nInput:\nN = 1\nOutput:\nodd\nExplanation:\nThe number 1 is odd.\n\nAPPROACH:\nTo determine whether a positive integer N is odd or even, we can check the least significant bit (LSB) of N. \nIf the LSB is 1, the number is odd. If the LSB is 0, the number is even.\nWe can use the bitwise AND operation with 1 (N & 1) to check the LSB.\nIf the result is 1, we return \"odd\". If the result is 0, we return \"even\".\n\n\nCODE*/\n\nstring oddEven(int N){\n    if(N&1)\n        return \"odd\";\n    return \"even\";\n}\n\n// Time Complexity: O(1)\n// Space Complexity: O(1)\n",
  "Check_if_array_is_sorted_and_rotated": "/*\nQUESTION:-\nGiven an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.\nThere may be duplicates in the original array.\nExample 1:\n\nInput: nums = [3,4,5,1,2]\nOutput: true\nExplanation: [1,2,3,4,5] is the original sorted array.\nYou can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].\nExample 2:\n\nInput: nums = [2,1,3,4]\nOutput: false\nExplanation: There is no sorted array once rotated that can make nums.\n\n*/\n\n/*\nAPPROACH:-\nCompare all neignbour elements (a,b) in A,\nthe case of a > b can happen at most once.\n\nNote that the first element and the last element are also connected.\n\nIf all a <= b, A is already sorted so answer is true.\nIf all a <= b but only one a > b, and the first element is greater than equal to last element\nwe can rotate and make b the first element so answer is true.\nOther case, return false.\n*/\n\n// CODE:-\nbool check(vector<int> &nums)\n{\n    int cnt = 0;\n    int n = nums.size();\n    for (int i = 0; i < n - 1; i++)\n    {\n        if (nums[i] > nums[i + 1])\n            cnt++;\n    }\n    if (cnt == 0)\n        return true;\n    else if (cnt == 1 && nums[0] >= nums[n - 1])\n        return true;\n    return false;\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(0)\n",
  "Copy_LL_with_random_pointers": "/*\nQUESTION:\nA linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\n\nConstruct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\n\nFor example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\n\nReturn the head of the copied linked list.\n\nThe linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\n\nval: an integer representing Node.val\nrandom_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\nYour code will only be given the head of the original linked list.\n\nExample 1:\nInput: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\nOutput: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n\nExample 2:\nInput: head = [[1,1],[2,1]]\nOutput: [[1,1],[2,1]]\n\nAPPROACH:\nTo create a deep copy of a linked list with random pointers, we can follow these steps:\n1. Traverse the original linked list and create a new node for each node in the original list. Insert the new node between the original node and its next node.\n2. Set the random pointer of the new node by mapping it to the corresponding random node in the original list.\n3. Separate the original list and the copied list by updating the next pointers of nodes in both lists.\n4. Return the head of the copied list.\n\nTIME COMPLEXITY:\nThe time complexity of this approach is O(n) since we traverse the original list once to create the copied list.\n\nSPACE COMPLEXITY:\nThe space complexity is also O(n) because we create a new node for each node in the original list.\n\nCODE:\n*/\nNode* copyRandomList(Node* head) {\n    if (head == NULL)\n        return head;\n\n    // inserting dupli node in between\n    Node* orig = head;\n    while (orig) {\n        Node* temp = orig->next;\n        orig->next = new Node(orig->val);\n        orig->next->next = temp;\n        orig = orig->next->next;\n    }\n    // setting random pointers\n    orig = head;\n    while (orig) {\n        if (orig->random && orig->next)\n            orig->next->random = orig->random->next;\n        orig = orig->next->next;\n    }\n    // setting next pointers and dettaching duplicate nodes from the original list\n    orig = head;\n    Node* ans = orig->next;\n    while (orig && orig->next) {\n        Node* temp = orig->next->next;\n        if (orig->next->next)\n            orig->next->next = orig->next->next->next;\n        orig->next = temp;\n        orig = orig->next;\n    }\n    return ans;\n}\n",
  "Count distinct substrings": "/*QUESTION:\nGiven a string consisting of lowercase English alphabets, the task is to find the number of distinct subsequences of the string. Note that the answer can be very large, so the output will be the answer modulo 10^9 + 7.\n\nExample:\nInput: s = \"gfg\"\nOutput: 7\nExplanation: The seven distinct subsequences are \"\", \"g\", \"f\", \"gf\", \"fg\", \"gg\", and \"gfg\".\n\nApproach:\nTo find the number of distinct subsequences, we can use a recursive approach with backtracking.\n1. Create a set to store the distinct subsequences.\n2. Create a helper function called 'solve' that takes the input string 's', the current index, and a temporary string as parameters.\n3. In the 'solve' function:\n   - If the current index is equal to the size of the input string 's', insert the temporary string into the set of distinct subsequences.\n   - Otherwise, do the following:\n     - Include the character at the current index in the temporary string by appending it.\n     - Recursively call the 'solve' function with the updated temporary string and the next index.\n     - Exclude the character at the current index from the temporary string.\n     - Recursively call the 'solve' function with the updated temporary string and the next index.\n4. Create the main function called 'distinctSubsequences' that calculates the number of distinct subsequences.\n   - Initialize an empty string as the temporary string.\n   - Call the 'solve' function with the input string 's', index 0, and the empty temporary string.\n   - Return the size of the set of distinct subsequences modulo 10^9 + 7.\n\nTime Complexity: O(2^N), where N is the length of the input string 's'.\nSpace Complexity: O(2^N), where N is the length of the input string 's' (for storing the distinct subsequences in the set).\n\nCODE:*/\nunordered_set<string> st;\n\nvoid solve(string& s, int index, string& temp) {\n\tif (index == s.size()) {\n\t\tst.insert(temp);\n\t\treturn;\n\t}\n\n\t// Include the character at the current index\n\ttemp.push_back(s[index]);\n\tsolve(s, index + 1, temp);\n\n\t// Exclude the character at the current index\n\ttemp.pop_back();\n\tsolve(s, index + 1, temp);\n}\n\nint distinctSubsequences(string s) {\n\tstring temp = \"\";\n\tsolve(s, 0, temp);\n\treturn st.size() % (int)(1e9 + 7);\n}\n",
  "Delete_node_in_DLL": "/*Given a doubly linked list and a position. The task is to delete a node from given position in a doubly linked list.\n\nExample 1:\n\nInput:\nLinkedList = 1 <--> 3 <--> 4 \nx = 3\nOutput: 1 3  \nExplanation: After deleting the node at\nposition 3 (position starts from 1),\nthe linked list will be now as 1->3.\nExample 2:\n\nInput:\nLinkedList = 1 <--> 5 <--> 2 <--> 9  \nx = 1\nOutput: 5 2 9\n\nAPPROACH:-\n1. The function `deleteNode` takes in two parameters: `head_ref`, which is a pointer to the head of the doubly linked list, and `x`, which represents the position of the node to be deleted.\n2. The variable `temp` is initialized as the `head_ref`, which is a pointer to the head node of the linked list.\n3. If `x` is equal to 1, it means the node to be deleted is the head node. In this case, the `temp` pointer is moved to the next node, and the new `temp` pointer is returned as the new head of the linked list. This effectively deletes the original head node.\n4. If `x` is greater than 1, the code enters a loop that iterates `x-1` times. This loop moves the `temp` pointer to the node just before the position to be deleted.\n5. After the loop, the variable `previous` is assigned the value of `temp`, which represents the node just before the position to be deleted.\n6. The `previous->next` pointer is adjusted to skip over the node to be deleted by assigning it the value of `temp->next->next`.\n7. The `temp->prev` pointer is adjusted to point to the `previous` node, updating the backward link.\n8. Finally, the updated `head_ref` is returned.\n\nCODE:-\n*/\nNode* deleteNode(Node *head_ref, int x) {\n  Node* temp = head_ref;\n  \n  // If the node to be deleted is the head node\n  if (x == 1) {\n    temp = temp->next;\n    return temp;\n  }\n  \n  // Traverse to the node just before the position to be deleted\n  for (int i = 1; i < (x - 1); i++) {\n    temp = temp->next;\n  }\n  \n  // Store the previous and next nodes of the node to be deleted\n  Node* previous = temp;\n  previous->next = temp->next->next;\n  temp->prev = previous;\n  \n  return head_ref;\n}\n\n/*\nTime Complexity:\n- If the node to be deleted is the head node (position 1), the code performs a constant number of operations, resulting in a time complexity of O(1).\n- If the node to be deleted is at any other position, the code traverses the linked list until it reaches the node just before the position to be deleted. This traversal requires visiting at most (x-1) nodes, where x is the position of the node to be deleted. Therefore, the time complexity in this case is O(x).\nSpace Complexity:\n- The code uses a constant amount of extra space for variables (`temp`, `previous`). Hence, the space complexity is O(1).\nIn summary, the time complexity of the provided code is O(1) when deleting the head node and O(x) when deleting any other node, where x is the position of the node to be deleted. The space complexity is O(1).\n*/",
  "Deleting_node_in_linked_list": "/*\nQUESTION:- \nGiven a singly linked list and an integer x.Delete xth node from the singly linked list.\n\nExample 1:\n\nInput: 1 -> 3 -> 4 \n       x = 3\nOutput: 1 -> 3\nExplanation:\nAfter deleting the node at 3rd\nposition (1-base indexing), the\nlinked list is as 1 -> 3. \nExample 2:\n\nInput: 1 -> 5 -> 2 -> 9 \nx = 2\nOutput: 1 -> 2 -> 9\nExplanation: \nAfter deleting the node at 2nd\nposition (1-based indexing), the\nlinked list is as 1 -> 2 -> 9.\n\nAPPROACH:- \n1. If the given position is 1, it means the node to be deleted is the first node. In this case, we simply update the head pointer to the next node and return the new head.\n2. Initialize a counter `cnt` to 1 and a pointer `curr` to the head of the linked list.\n3. Traverse the linked list by moving the `curr` pointer to the next node until the counter `cnt` reaches the position just before the node to be deleted.\n4. Once we reach the position just before the node to be deleted, we update the `next` pointer of the current node to skip the next node and point to the node after it.\n5. Return the head pointer of the modified linked list.\n\n\n\nTime complexity of this approach is O(N), where N is the number of nodes in the linked list. We may need to traverse the linked list until we reach the desired position.\nSpace complexity is O(1) as we are not using any extra space that grows with the input size. We only need a constant amount of space to store the counter variable and the temporary pointer.\n\nCODE:-\n*/\n\nNode* deleteNode(Node *head,int x)\n{\n    if(x==1)\n        return head->next;\n    \n    int cnt = 1;\n    Node* curr = head;\n    while(cnt<x-1){\n        cnt++;\n        curr = curr->next;\n    }\n    curr->next = curr->next->next;\n    return head;\n}",
  "Detect_loop_in_LL": "/*\nQUESTION:-\nGiven head, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n\nReturn true if there is a cycle in the linked list. Otherwise, return false.\n\nExample 1:\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n\nExample 2:\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n*/\n\n/*\nAPPROACH:\nTo determine if a linked list has a cycle, we can use the two-pointer technique.\nInitialize two pointers, slow and fast, to the head of the linked list.\nMove the slow pointer one step at a time and the fast pointer two steps at a time.\nIf the linked list has a cycle, the fast pointer will eventually catch up to the slow pointer.\nIn other words, if there is a cycle, the two pointers will meet at some point.\nIf the fast pointer reaches the end of the list (i.e., it becomes NULL or reaches a node with a NULL next pointer), then there is no cycle in the linked list.\nReturn true if the two pointers meet (indicating a cycle), and false otherwise.\n*/\n\n// CODE:-\nbool hasCycle(ListNode *head) {\n    ListNode* slow = head;\n    ListNode* fast = head;\n\n    while (fast && fast->next) {\n        slow = slow->next;\n        fast = fast->next->next;\n        if (slow == fast)\n            return true;\n    }\n    return false;\n}\n\n// TIME COMPLEXITY: O(N)\n// SPACE COMPLEXITY: O(1)\n",
  "Implement_lower_upper_bound": "/*\nQUESTION:\nGiven an unsorted array Arr[] of N integers and an integer X, find floor and ceiling of X in Arr[0..N-1].\n\nFloor of X is the largest element which is smaller than or equal to X. Floor of X doesn’t exist if X is smaller than the smallest element of Arr[].\n\nCeil of X is the smallest element which is greater than or equal to X. Ceil of X doesn’t exist if X is greater than the greatest element of Arr[].\n\nExample:\n\nInput:\nN = 8, X = 7\nArr[] = {5, 6, 8, 9, 6, 5, 5, 6}\nOutput: 6 8\nExplanation:\nFloor of 7 is 6 and ceil of 7 is 8.\n\nAPPROACH:\n1. Sort the array in ascending order.\n2. Use binary search to find the floor and ceil values.\n3. The floor value is the largest element smaller than or equal to X, and the ceil value is the smallest element greater than or equal to X.\n4. If the floor or ceil values are not found, set them to -1.\n\nCODE:\n*/\n\nint lowerbound(int arr[], int n, int x){\n    int low = 0, high = n-1;\n    int ans = -1;\n    while(low<=high){\n        int mid = low+(high-low)/2;\n        if(arr[mid]<=x){\n            ans = mid;\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    if(ans!=-1) ans = arr[ans];\n    return ans;\n}\n\nint upperbound(int arr[], int n, int x){\n    int low = 0, high = n-1;\n    int ans = -1;\n    while(low<=high){\n        int mid = low+(high-low)/2;\n        if(arr[mid]>=x){\n            ans = mid;\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    if(ans!=-1) ans = arr[ans];\n    return ans;\n}\n\npair<int, int> getFloorAndCeil(int arr[], int n, int x) {\n    sort(arr,arr+n);\n    int Floor = lowerbound(arr,n,x);\n    int Ceil = upperbound(arr,n,x);\n    return {Floor,Ceil};\n}\n\n// TIME COMPLEXITY: O(NlogN)\n// SPACE COMPLEXITY: O(1)\n",
  "Koko_eating_banana": "/*\nQUESTION:\nKoko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.\n\nKoko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.\n\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\n\nReturn the minimum integer k such that she can eat all the bananas within h hours.\n\nEXAMPLES:\nInput: piles = [3,6,7,11], h = 8\nOutput: 4\n\nInput: piles = [30,11,23,4,20], h = 5\nOutput: 30\n\nAPPROACH:\n- We can apply binary search to find the minimum eating speed.\n- The eating speed can range from 1 to the maximum number of bananas in a pile.\n- For each eating speed, we check if it is possible to finish eating all the bananas within h hours.\n- We calculate the required time based on the eating speed, considering the number of bananas in each pile.\n- If the required time is less than or equal to h, it means it is possible to finish eating all the bananas within h hours.\n- We update the answer accordingly and continue the binary search.\n\n\nCODE:\n*/\n\nbool isPossible(int mid, vector<int>& piles, int h){\n    long req = 0;\n    for(auto it:piles){\n        int time = it/mid;\n        req += time;\n        if(it%mid!=0) req++;\n    }\n    if(req<=h)\n        return true;\n    return false;\n}\n\nint minEatingSpeed(vector<int>& piles, int h) {\n    int ans = -1;\n    int low = 1, high = INT_MIN;\n    for(auto it:piles){\n        high = max(high,it);\n    }\n    while(low<=high){\n        int mid = low+(high-low)/2;\n        if(isPossible(mid,piles,h)){\n            ans = mid;\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return ans;\n}\n\n// TIME COMPLEXITY: O(N log M), where N is the number of piles and M is the maximum number of bananas in a pile.\n// SPACE COMPLEXITY: O(1)",
  "Largest_odd_number_in_string": "/*\nQuestion:\nYou are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string \"\" if no odd integer exists.\nA substring is a contiguous sequence of characters within a string.\n\nApproach:\n1. Iterate through the string from the last character.\n2. Check if the current character is odd.\n3. If it is odd, return the substring from the beginning of the string to the current character index.\n4. If no odd number is found, return an empty string.\n\nTime Complexity: O(N), where N is the length of the input string num.\n- We iterate through the string once to find the largest odd number.\n\nSpace Complexity: O(1)\n- We use constant space to store the result and iterate through the string.\n\nCode:\n*/\n\nstring largestOddNumber(string num) {\n    // Check the first odd number from last\n    for (int i = num.size() - 1; i >= 0; i--) {\n        if ((num[i] - '0') % 2 != 0)\n            return num.substr(0, i + 1);\n    }\n    return \"\";\n}\n",
  "Majority_element": "/*\nQUESTION:-\nGiven an array nums of size n, return the majority element.\nThe majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.\n\nExample 1:\n\nInput: nums = [3,2,3]\nOutput: 3\n\nExample 2:\n\nInput: nums = [2,2,1,1,1,2,2]\nOutput: 2\n*/\n\n/*\nAPROACH:-\n-> Initialize two variables: candidate and count. Set candidate to the first element of the array, and count to 1.\n-> Iterate through the array starting from the second element:\n    If the current element is equal to the candidate, increment the count by 1.\n    If the current element is different from the candidate, decrement the count by 1.\n    If the count becomes 0, update the candidate to the current element and set the count to 1 again.\n-> After the iteration, the candidate variable will hold the majority element.\nReturn the candidate as the result.\n*/\n\n// CODE:-\nint majorityElement(vector<int> &nums)\n{\n    int candidate = nums[0];\n    int vote = 1;\n    for (int i = 1; i < nums.size(); i++)\n    {\n        if (vote <= 0)\n            candidate = nums[i];\n        if (nums[i] == candidate)\n            vote++;\n        else\n            vote--;\n    }\n    return candidate;\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(0)",
  "Rat in maze": "/*QUESTION:\nConsider a rat placed at (0, 0) in a square matrix of order N * N. It has to reach the destination at (N - 1, N - 1). Find all possible paths that the rat can take to reach from source to destination. The directions in which the rat can move are 'U'(up), 'D'(down), 'L' (left), 'R' (right). Value 0 at a cell in the matrix represents that it is blocked and rat cannot move to it while value 1 at a cell in the matrix represents that rat can be travel through it.\n\nExample 1:\n\nInput:\nN = 4\nm[][] = {{1, 0, 0, 0},\n         {1, 1, 0, 1}, \n         {1, 1, 0, 0},\n         {0, 1, 1, 1}}\nOutput:\nDDRDRR DRDDRR\nExplanation:\nThe rat can reach the destination at \n(3, 3) from (0, 0) by two paths - DRDDRR \nand DDRDRR, when printed in sorted order \nwe get DDRDRR DRDDRR.\n\nApproach:\nWe can use a backtracking approach to find all possible paths.\n1. Create a helper function called 'solve' that takes the current row index, column index, a string representing the current path, a vector of strings to store the paths, the matrix, and the size of the matrix.\n2. In the 'solve' function:\n   - If the current position is the destination (N-1, N-1), add the current path to the vector of paths and return.\n   - Check if the current position is valid and not a blocked cell.\n   - Mark the current position as visited (by setting its value to 0) to avoid revisiting it.\n   - Recursively call the 'solve' function for the neighboring cells (left, right, up, down) with the updated path.\n   - After the recursive calls, restore the original value of the current position to allow other paths to visit it.\n3. Create the main function called 'findPath' that calculates and returns all possible paths from (0, 0) to (N-1, N-1).\n   - If the source cell or the destination cell is blocked, return an empty vector.\n   - Initialize an empty vector of strings to store the paths.\n   - Call the 'solve' function with the initial position (0, 0), an empty path string, the vector of paths, the matrix, and the size of the matrix.\n   - Return the vector of paths.\n   \nTime Complexity: O(3^(N^2)), where N is the size of the matrix. In the worst case, each cell can have three possible neighboring cells to explore.\nSpace Complexity: O(N^2), as we are using a vector of strings to store the paths.\n\nCODE:*/\nbool isValid(int i, int j, vector<vector<int>>& m, int n) {\n    if (i < 0 || i >= n || j < 0 || j >= n || m[i][j] == 0)\n        return false;\n    return true;\n}\n\nvoid solve(int i, int j, string temp, vector<string>& ans, vector<vector<int>>& m, int n) {\n    if (i == n - 1 && j == n - 1) {\n        ans.push_back(temp);\n        return;\n    }\n\n    if (!isValid(i, j, m, n))\n        return;\n\n    m[i][j] = 0;\n\n    solve(i, j - 1, temp + 'L', ans, m, n);\n    solve(i, j + 1, temp + 'R', ans, m, n);\n    solve(i - 1, j, temp + 'U', ans, m, n);\n    solve(i + 1, j, temp + 'D', ans, m, n);\n\n    m[i][j] = 1;\n}\n\nvector<string> findPath(vector<vector<int>>& m, int n) {\n    if (m[0][0] == 0 || m[n - 1][n - 1] == 0)\n        return {};\n\n    vector<string> ans;\n    string temp = \"\";\n    solve(0, 0, temp, ans, m, n);\n    return ans;\n}\n",
  "Remove_duplicates_from_dll": "/*Given a doubly linked list of n nodes sorted by values, the task is to remove duplicate nodes present in the linked list.\n\nExample 1:\nInput:\nn = 6\n1<->1<->1<->2<->3<->4\nOutput:\n1<->2<->3<->4\nExplanation:\nOnly the first occurrence of the node with value 1 is retained, and the rest of the nodes with value 1 are deleted.\n\nExample 2:\nInput:\nn = 7\n1<->2<->2<->3<->3<->4<->4\nOutput:\n1<->2<->3<->4\nExplanation:\nOnly the first occurrence of nodes with values 2, 3, and 4 are retained, and the rest of the repeating nodes are deleted.\n\nApproach:\n1. Initialize a variable `dupli` with the value of the head node.\n2. Start from the next node, `curr`, and iterate until the end of the linked list.\n3. For each node, check if its data is equal to `dupli`.\n   - If it is equal, remove the node by updating the `next` and `prev` pointers of its neighboring nodes.\n   - Continue removing all consecutive nodes with the same value.\n4. If `curr` is not null, update `dupli` with the data of `curr`.\n5. Repeat steps 3-4 until the end of the linked list is reached.\n6. Return the head of the modified linked list.\n\nTime Complexity: O(N), where N is the number of nodes in the linked list.\nSpace Complexity: O(1).\n\nCODE:\n*/\nNode* removeDuplicates(Node* head)\n{\n    int dupli = head->data;\n    Node* curr = head->next;\n\n    while (curr) {\n        while (curr && curr->data == dupli) {\n            if (curr->next)\n                curr->next->prev = curr->prev;\n            curr->prev->next = curr->next;\n            curr = curr->next;\n        }\n        if (curr) {\n            dupli = curr->data;\n            curr = curr->next;\n        }\n    }\n    return head;\n}\n",
  "Reverse_stack_using_recursion": "/*QUESTION:\nReverse a given stack of 'N' integers using recursion.\nNote: You are not allowed to use any extra space other than the internal stack space used due to recursion.\n\nExample:\nInput: [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n\nApproach:\nTo reverse a stack using recursion without using any extra space, we can follow the following steps:\n1. Create a helper function called 'insertAtBottom' that takes an element and a stack as parameters.\n2. The 'insertAtBottom' function inserts the given element at the bottom of the stack using recursion.\n   - If the stack is empty, push the element to the stack and return.\n   - Otherwise, pop the top element from the stack and recursively call 'insertAtBottom' with the element and the modified stack.\n     After the recursive call, push the popped element back to the stack.\n3. Create the main function called 'reverseStack' that reverses the given stack using recursion.\n   - Base case: If the stack is empty, return.\n   - Otherwise, pop the top element from the stack and recursively call 'reverseStack' on the modified stack.\n     After the recursive call, call the 'insertAtBottom' function with the popped element and the modified stack.\n4. The 'reverseStack' function will reverse the stack in place using recursion and the 'insertAtBottom' function.\n\nTime Complexity: O(N^2) (due to multiple recursive calls)\nSpace Complexity: O(N) (due to the internal stack space used for recursion)\n\nCODE:*/\nvoid insertAtBottom(int ele, stack<int>& stack) {\n    if (stack.empty()) {\n        stack.push(ele);\n        return;\n    }\n\n    int temp = stack.top();\n    stack.pop();\n    insertAtBottom(ele, stack);\n    stack.push(temp);\n}\n\nvoid reverseStack(stack<int>& stack) {\n    if (stack.empty())\n        return;\n\n    int first = stack.top();\n    stack.pop();\n    reverseStack(stack);\n    insertAtBottom(first, stack);\n}\n",
  "Roman_to_Integer": "/*\nQuestion:\nGiven a Roman numeral as a string, convert it to an integer.\n\nExample 1:\n\nInput: s = \"III\"\nOutput: 3\nExplanation: III = 3.\nExample 2:\n\nInput: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\n\n\nApproach:\n1. Create a map to store the values of each Roman symbol.\n2. Initialize `result` as the value of the first symbol in the input string.\n3. Iterate through each character `c` in the input string `s`, starting from the second character.\n    a. If the value of the current symbol is greater than the value of the previous symbol, subtract twice the value of the previous symbol from `result` and add the value of the current symbol.\n    b. Otherwise, add the value of the current symbol to `result`.\n4. Return `result` as the converted integer.\n\nTime Complexity: O(n), where n is the length of the input string `s`.\nSpace Complexity: O(1)\n*/\n\nint romanToInt(string s) {\n    unordered_map<char, int> symbolValues = {\n        {'I', 1},\n        {'V', 5},\n        {'X', 10},\n        {'L', 50},\n        {'C', 100},\n        {'D', 500},\n        {'M', 1000}\n    };\n\n    int result = symbolValues[s[0]];\n    for (int i = 1; i < s.size(); i++) {\n        if (symbolValues[s[i]] > symbolValues[s[i - 1]]) {\n            result -= 2 * symbolValues[s[i - 1]];\n            result += symbolValues[s[i]];\n        } else {\n            result += symbolValues[s[i]];\n        }\n    }\n\n    return result;\n}\n",
  " Best time to buy and sell stock uoto k transaction": "/*\nQUESTION:\nYou are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.\nFind the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\nExample:\nInput: k = 2, prices = [2, 4, 1]\nOutput: 2\nExplanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4 - 2 = 2.\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- We need to keep track of the number of transactions completed so far (cap) and whether we are holding a stock or not on each day.\n- Define a 3D DP array `dp` where dp[i][hold][cap] represents the maximum profit achievable starting from day i while holding or not holding a stock and having completed cap transactions.\n- The base case is dp[n][0][0] = dp[n][0][1] = ... = dp[n][0][k] = dp[n][1][0] = ... = dp[n][1][k] = 0, where n is the number of days and k is the given limit of transactions.\n- Iterate through each day i in reverse order.\n- If holding a stock, we can either sell the stock or continue holding.\n- If not holding a stock, we can either buy the stock or continue not holding.\n- Return dp[0][0][0], which represents the maximum profit achievable starting from day 0 while not holding a stock and having completed 0 transactions.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n * k), where n is the number of days and k is the given limit of transactions.\n- The space complexity is O(n * k) due to the dp array.\n- Overall, the algorithm runs in O(n * k) time and O(n * k) space.\n\nCODE:\n*/\n\nint maxi;\nint fmemo(int i, int hold, int cap, vector<int>& prices, vector<vector<vector<int>>>& dp){\n    if(i == prices.size()) return 0;\n    if(cap == maxi + 1) return 0;\n\n    if(dp[i][hold][cap] != -1) return dp[i][hold][cap];\n\n    if(hold){\n        // sell \n        int a = prices[i] + fmemo(i + 1, 0, cap, prices, dp);\n        // not sell\n        int b = fmemo(i + 1, 1, cap, prices, dp);\n        return dp[i][hold][cap] = max(a, b);\n    }\n    else{\n        // buy\n        int a = -prices[i] + fmemo(i + 1, 1, cap + 1, prices, dp);\n        // not buy\n        int b = fmemo(i + 1, 0, cap, prices, dp);\n        return dp[i][hold][cap] = max(a, b);\n    }\n}\n\nint maxProfit(int k, vector<int>& prices) {\n    int n = prices.size();\n    maxi = k;\n    vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(k + 1, -1)));\n    return fmemo(0, 0, 0, prices, dp);\n}\n",
  " Bitwise basic operations": "/*\nQUESTION:\nYou are given six positive integers: 'a', 'b', 'c', 'd', 'e', and 'f'.\nYou will be given three functions: 'getXOR', 'getBit', and 'setBit'.\nYour task is to do the following:\n1. In the function 'getXOR', you will be given two parameters, 'a', and 'b'. Your task is to return the XOR of 'a' and 'b'.\n2. In the function 'getBit', you will be given two parameters, 'c' and 'd'. Your task is to return 1 if the 'c'th bit of 'd' is set. Otherwise, return 0.\n3. In the function 'setBit', you will be given two parameters, 'e' and 'f'. Your task is to set the 'e'th bit in 'f' if it is not set. At last, return the integer 'f'. The expected time complexity is 'O(1)', and the expected space complexity is 'O(1').\n\nCODE:\n\nApproach:\n1. For the 'getXOR' function, simply use the XOR (^) operator to get the XOR of 'a' and 'b'.\n2. For the 'getBit' function, use the right shift (>>) and bitwise AND (&) operators to check if the 'c'th bit of 'd' is set or not.\n3. For the 'setBit' function, use the bitwise OR (|) operator and left shift (<<) to set the 'e'th bit in 'f'.\n\nComplexity Analysis:\n- All three functions have a time complexity of O(1) as they involve simple bitwise operations.\n- All three functions have a space complexity of O(1) as they do not require additional memory allocation.\n*/\n\nint getXOR(int a, int b) {\n    return a ^ b;\n}\n\nint getBit(int c, int d) {\n    return (d >> c) & 1;\n}\n\nint setBit(int e, int f) {\n    return f | (1 << e);\n}\n",
  " Check children sum property": "/* QUESTION:\n\nGiven a Binary Tree. Return true if, for every node X in the tree other than the leaves, its value is equal to the sum of its left subtree's value and its right subtree's value. Else return false.\n\nAn empty tree is also a Sum Tree as the sum of an empty tree can be considered to be 0. A leaf node is also considered a Sum Tree.\n\n\nExample 1:\nInput:\n    3\n  /   \\    \n 1     2\n\nOutput: 1\nExplanation:\nThe sum of left subtree and right subtree is 1 + 2 = 3, which is the value of the root node.\nTherefore, the given binary tree is a sum tree.\n\n\nAPPROACH:\n\nTo determine if a binary tree is a Sum Tree, we can perform a post-order traversal of the tree and check if each node satisfies the condition of being a Sum Tree.\n\nFor each node in the tree, we will calculate the sum of its left subtree and right subtree. If both subtrees are Sum Trees and the value of the current node is equal to the sum of its subtrees, then the current node is also a Sum Tree. Otherwise, it is not a Sum Tree.\n\nTo indicate that the current node is not a Sum Tree, we return a special value (e.g., INT_MIN) from the recursive function. If the result is INT_MIN, then the binary tree is not a Sum Tree. Otherwise, it is a Sum Tree.\n\nCOMPLEXITY ANALYSIS:\n\nLet `n` be the number of nodes in the binary tree.\n- Time Complexity: The time complexity of this approach is O(n) as we visit each node in the binary tree once during the post-order traversal.\n- Space Complexity: The space complexity is O(h) due to the recursion stack, where h is the height of the binary tree.\n\nCODE:\n*/\n\nint solve(Node* root) {\n    if (!root) return 0;\n    if (!root->left && !root->right) return root->data;\n    \n    int lef = solve(root->left);\n    int rig = solve(root->right);\n    \n    return (lef + rig == root->data) ? 2 * root->data : INT_MIN;\n}\n\nbool isSumTree(Node* root) {\n    int ans = solve(root);\n    return (ans == INT_MIN) ? false : true;\n}\n",
  " Count number of subsets with sum K": "/*\nQUESTION:\nGiven an array arr[] of non-negative integers and an integer sum, \nthe task is to count all subsets of the given array with a sum \nequal to a given sum.\n\nNote: Answer can be very large, so, output answer modulo 10^9+7\n\nExample 1:\nInput: N = 6, arr[] = {2, 3, 5, 6, 8, 10}\n       sum = 10\nOutput: 3\nExplanation: {2, 3, 5}, {2, 8}, {10}\n\nAPPROACH:\n- We'll use a bottom-up dynamic programming approach using a 2D dp array.\n- Initialize dp[i][j] as the number of subsets with sum 'j' using the first 'i' elements.\n- Base cases:\n  - dp[0][0] = 1 since an empty subset has a sum of 0.\n  - dp[i][0] = 1 since there's always an empty subset.\n- For each element 'arr[i]' and each possible sum 'j' from 1 to 'sum':\n  - dp[i][j] = dp[i-1][j] (not taking the current element)\n  - if 'arr[i]' is less than or equal to 'j', then dp[i][j] += dp[i-1][j-arr[i]] (taking the current element)\n- Return dp[n][sum] which represents the number of subsets with sum 'sum' using all 'n' elements.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of the solution is O(n * sum), where 'n' is the number of elements and 'sum' is the required sum.\n- The space complexity is O(n * sum) for the dp array.\n\nCODE:\n*/\n\n\nconst int mod = 1e9 + 7;\n\n// Memoization\nint fmemo(int i, int tar, int arr[], vector<vector<int>>& dp){\n    if(i == 0){\n        if(tar == 0 && arr[i] == 0) return dp[i][tar] = 2;\n        if(tar == 0) return dp[i][tar] = 1;\n        return dp[i][tar] = (arr[i] == tar);\n    }\n\n    if(dp[i][tar] != -1) return dp[i][tar];\n\n    int take = 0;\n    if(arr[i] <= tar) take = fmemo(i - 1, tar - arr[i], arr, dp);\n    int notake = fmemo(i - 1, tar, arr, dp);\n    return dp[i][tar] = (take + notake) % mod;\n}\n\n// Tabulation\nint ftab(int n, int sum, int arr[]){\n    vector<vector<int>> dp(n,vector<int>(sum+1));\n    for(int i=0; i<n; i++){\n        for(int tar=0; tar<=sum; tar++){\n            if(i==0){\n                if(tar==0 && arr[i]==0) dp[i][tar] = 2;\n                else if(tar==0) dp[i][tar] = 1;\n                else dp[i][tar] =  (arr[i]==tar);\n                continue;\n            }\n            int take = 0;\n            if(arr[i] <= tar) take = dp[i-1][tar-arr[i]];\n            int notake = dp[i-1][tar];\n            dp[i][tar] =  (take+notake)%mod;\n        }\n    }\n    return dp[n-1][sum];\n}\n\n// Space Optimization\nint fopt(int n, int sum, int arr[]){\n    vector<int> prev(sum+1);\n    for(int i=0; i<n; i++){\n        vector<int> curr(sum+1);\n        for(int tar=0; tar<=sum; tar++){\n            if(i==0){\n                if(tar==0 && arr[i]==0) curr[tar] = 2;\n                else if(tar==0) curr[tar] = 1;\n                else curr[tar] =  (arr[i]==tar);\n                continue;\n            }\n            int take = 0;\n            if(arr[i] <= tar) take = prev[tar-arr[i]];\n            int notake = prev[tar];\n            curr[tar] =  (take+notake)%mod;\n        }\n        prev = curr;\n    }\n    return prev[sum];\n}\n\nint perfectSum(int arr[], int n, int sum){\n    vector<vector<int>> dp(n, vector<int>(sum + 1, -1));\n    return fmemo(n - 1, sum, arr, dp);\n}\n",
  " Course Scheduler 2": "/*\nQUESTION:\nThere are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n\nReturn the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.\n\nAPPROACH:\n- We can model the problem as a directed graph, where each course is a node, and a prerequisite pair [ai, bi] indicates a directed edge from course bi to course ai.\n- To find the course ordering, we can use Kahn's algorithm for Topological Sorting.\n- If we can perform a successful Topological Sort, it means we can finish all courses, and the order in which we pop the nodes from the queue will give us the correct course order.\n- If there is a cycle in the graph (i.e., it is not possible to finish all courses), the algorithm will not be able to remove all nodes with indegree 0, and we will not get a valid course ordering.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(N + E), where N is the number of courses (nodes) and E is the number of prerequisites (edges) in the graph. We perform a BFS-like traversal of all nodes and edges.\n- Space Complexity: O(N + E), where N is the number of courses (nodes) and E is the number of prerequisites (edges) in the graph. We use additional space to store the adjacency list and indegree of each node.\n*/\n\nvector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n    vector<int> indeg(numCourses, 0);\n    vector<vector<int>> adj(numCourses);\n\n    // Calculate the indegree of each course and build the adjacency list\n    for (auto it : prerequisites) {\n        indeg[it[0]]++;\n        adj[it[1]].push_back(it[0]);\n    }\n\n    queue<int> q;\n\n    // Find courses with indegree 0 and add them to the queue\n    for (int i = 0; i < numCourses; i++) {\n        if (indeg[i] == 0) {\n            q.push(i);\n        }\n    }\n\n    vector<int> courseOrder;\n\n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        courseOrder.push_back(node);\n\n        // Remove the course and its outgoing edges\n        for (auto v : adj[node]) {\n            indeg[v]--;\n            if (indeg[v] == 0) {\n                q.push(v);\n            }\n        }\n    }\n\n    // If the size of the course order is equal to the total number of courses, return the order\n    if (courseOrder.size() == numCourses) {\n        return courseOrder;\n    }\n\n    // If not all courses are covered, return an empty array\n    return {};\n}\n",
  " Delete from BST": "/*\nQuestion:\nGiven a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.\n\nBasically, the deletion can be divided into two stages:\n\n1. Search for a node to remove.\n2. If the node is found, delete the node.\n\nApproach:\nTo delete a node with a given key from the BST, we need to search for the node first. If the node is found, there are three possible cases:\n1. The node to be deleted is a leaf node (no children).\n2. The node to be deleted has only one child (left or right child).\n3. The node to be deleted has both left and right children.\n\nFor the first case, we simply remove the node from the tree and return NULL as the new root.\nFor the second case, we return the non-NULL child of the node to be deleted as the new root.\nFor the third case, we find the maximum value node in the left subtree of the node to be deleted (the rightmost node of the left subtree), copy its value to the node to be deleted, and then recursively delete the maximum value node in the left subtree.\n\nExample:\nInput: root = [5,3,6,2,4,null,7], key = 3\nOutput: [5,4,6,2,null,null,7]\n*/\n\n// Time Complexity: O(log n) on average, O(n) in the worst case, where n is the number of nodes in the BST.\n// The time complexity of the delete operation in a BST depends on the height of the tree, which is log n on average for a balanced BST. However, in the worst case, when the BST is skewed (all nodes have only one child), the time complexity becomes O(n).\n\n// Space Complexity: O(log n) on average, O(n) in the worst case.\n// The space complexity is determined by the recursion stack during the delete operation. In the average case, the maximum recursion depth is log n for a balanced BST. In the worst case, when the BST is skewed, the recursion depth becomes n.\n\n// CODE:-\n\nTreeNode* deleteNode(TreeNode* root, int key) {\n    if (!root) return NULL;\n    if (root->val == key) {\n        if (!root->left && !root->right) return NULL; // Case: Node to be deleted is a leaf node\n        if (!root->left || !root->right) return root->left ? root->left : root->right; // Case: Node to be deleted has only one child\n        TreeNode* temp = root->left; // Case: Node to be deleted has both left and right children\n        while (temp->right != NULL) temp = temp->right;\n        root->val = temp->val;\n        root->left = deleteNode(root->left, temp->val); // Delete the node that was copied into the current node\n    } \n    if (root->val < key) root->right = deleteNode(root->right, key);\n    root->left = deleteNode(root->left, key);\n    return root;\n}\n",
  " Detect Cycle in Undirected Graph": "/*\nQUESTION:-\n\nGiven an undirected graph with V vertices and E edges, check whether it contains any cycle or not. Graph is in the form of adjacency list where adj[i] contains all the nodes ith node is having an edge with.\n\nAPPROACH:\n- To check whether the graph contains a cycle or not, we can perform a Depth-First Search (DFS) traversal on the graph and keep track of the visited nodes.\n- During the DFS traversal, if we encounter a node that is already visited and is not the parent of the current node (indicating a back edge), then there is a cycle in the graph. We need to check this condition for every node in the graph.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(V + E), where V is the number of vertices and E is the number of edges in the graph. In the worst case, we may need to visit all the vertices and edges of the graph.\n- Space Complexity: O(V), where V is the number of vertices. We use an additional array to keep track of visited nodes.\n*/\n\nbool dfs(int node, int parent, vector<int> adj[], vector<bool>& vis){\n    vis[node] = true;\n    for(auto v:adj[node]){\n        if(!vis[v]){\n            if(dfs(v,node,adj,vis))\n                return true;\n        }\n        else if(v!=parent){\n            return true;\n        }\n    }\n    return false;\n}\n\nbool isCycle(int V, vector<int> adj[]) {\n    vector<bool> vis(V);\n    for(int i=0; i<V; i++){\n        if(!vis[i]){\n            if(dfs(i,-1,adj,vis))\n                return true;\n        }\n    }\n    return false;\n}\n",
  " DFS": "/*\nQuestion:\nGiven a connected undirected graph, perform Depth First Traversal (DFS) of the graph starting from vertex 0 and visit all the nodes directly or indirectly connected to Node 0.\n\nExplanation:\n- We initialize an empty vector 'ans' to store the DFS traversal.\n- We also initialize a vector 'vis' to keep track of visited nodes, initialized with 'false' for all nodes.\n- We start DFS from vertex 0 by calling the recursive function 'dfs'.\n- In the 'dfs' function, we push the current node into the 'ans' vector and mark it as visited.\n- For each adjacent vertex of the current node, if it has not been visited, we call the 'dfs' function recursively for that vertex.\n- We continue this process until all connected nodes are visited.\n- Finally, we return the 'ans' vector containing the DFS traversal.\n\nTime Complexity:\n- The time complexity is O(V + E), where V is the number of vertices and E is the number of edges in the graph. In the worst case, we visit all the vertices and edges.\n\nSpace Complexity:\n- The space complexity is O(V), where V is the number of vertices, as we use extra space for the 'vis' vector.\n\n*/\n\nvoid dfs(int node, vector<int> adj[], vector<int>& ans, vector<bool>& vis){\n    ans.push_back(node);\n    vis[node] = true;\n    for(auto i : adj[node]){\n        if(!vis[i])\n            dfs(i, adj, ans, vis);\n    }\n}\n\nvector<int> dfsOfGraph(int V, vector<int> adj[]) {\n    vector<int> ans;\n    vector<bool> vis(V, false);\n    dfs(0, adj, ans, vis);\n    return ans;\n}\n",
  " House Robber": "/*\nQUESTION:-\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n\nExample 1:\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n\nApproach:\n1. We can use dynamic programming with memoization to solve this problem.\n2. We define a helper function fmemo(i, nums, dp) that calculates the maximum amount of money that can be robbed from the 0th to the ith house using memoization.\n3. The function checks if the maximum amount for the ith house is already calculated and stored in the dp array. If yes, it returns the value from dp.\n4. Otherwise, it calculates the maximum amount by considering two options:\n   a) Rob the current house and add the money with the maximum amount from the (i-2)th house (since adjacent houses cannot be robbed).\n   b) Skip the current house and take the maximum amount from the (i-1)th house.\n5. The base case is when i is less than 0, in which case the function returns 0 as there are no houses to rob.\n6. In the main function rob(nums), we create a dp array of size n initialized with -1 and call the fmemo function passing n-1 (last house), the nums array, and the dp array as arguments.\n\nComplexity Analysis:\n- The time complexity of the fmemo function is O(n) because we are calculating the maximum amount for each house only once and storing it in the dp array.\n- The space complexity is also O(n) to store the dp array.\n*/\n\n//Memoization\nint fmemo(int i, vector<int>& nums, vector<int>& dp) {\n    if (i < 0)\n        return 0;\n\n    if (i == 0)\n        return dp[i] = nums[i];\n\n    if (dp[i] != -1)\n        return dp[i];\n\n    int take = nums[i] + fmemo(i - 2, nums, dp);\n    int notake = fmemo(i - 1, nums, dp);\n    return dp[i] = max(take, notake);\n}\n\n//Tabulation\nint ftab(int n, vector<int>& nums){\n    vector<int> dp(n);\n    dp[0] = nums[0];\n    for(int i=1; i<n; i++){\n        int take = nums[i];\n        if(i-2 >= 0) take += dp[i-2];\n        int notake = dp[i-1];\n        dp[i] = max(take,notake);\n    }\n    return dp[n-1];\n}\n\n//Space Optimization\nint fopt(int n, vector<int>& nums){\n    int p1 = nums[0], p2 = 0, ans = p1;\n    for(int i=1; i<n; i++){\n        int take = nums[i];\n        if(i-2 >= 0) take += p2;\n        int notake = p1;\n        ans = max(take,notake);\n        p2 = p1; p1 = ans;\n    }\n    return ans;\n}\n\n\nint rob(vector<int>& nums) {\n    int n = nums.size();\n    vector<int> dp(n, -1);\n    return fmemo(n - 1, nums, dp);\n}\n",
  " Implement queue using stacks": "/*\nQuestion:\nImplement a Queue using two stacks s1 and s2.\n\nApproach:\n- We use the class `Queue` to represent the queue.\n- The queue is implemented using two stacks `input` and `output`.\n- The `enqueue(int)` function inserts an element into `input` stack.\n- The `dequeue()` function transfers elements from `input` stack to `output` stack if `output` is empty, and returns the top element from `output` stack as the dequeued element.\n- To transfer elements from `input` to `output`, we pop each element from the top of `input` and push it into `output`.\n- After transferring elements, we pop the top element from `output` as the dequeued element.\n\nCode:\n*/\n\nclass Queue {\nprivate:\n    std::stack<int> input;\n    std::stack<int> output;\n\npublic:\n    void enqueue(int x);\n    int dequeue();\n};\n\nvoid Queue::enqueue(int x) {\n    input.push(x);\n}\n\nint Queue::dequeue() {\n    if (input.empty() && output.empty())\n        return -1;\n\n    if (output.empty()) {\n        while (!input.empty()) {\n            int temp = input.top();\n            input.pop();\n            output.push(temp);\n        }\n    }\n\n    int dequeued = output.top();\n    output.pop();\n\n    return dequeued;\n}\n\n/*\nComplexity Analysis:\n- The `enqueue()` operation has a time complexity of O(1) since we only need to push an element into the `input` stack.\n- The `dequeue()` operation has a time complexity of O(1) by amortized analysis.\n- The space complexity is O(N), where N is the total number of elements stored in the two stacks.\n*/\n\n",
  " Inorder Traversal": "/*\nQuestion:\nGiven the root of a binary tree, return the inorder traversal of its nodes' values.\n\nApproach:\n- inorder traversal visits the left subtree first, followed by the root node, and then the right subtree.\n- We can solve this problem recursively by following the inorder traversal order.\n\nComplexity Analysis:\n- Since we are visiting each node once, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(N) as we are using the call stack for recursion.\n\nCode:\n*/\n\nvector<int> inorderTraversal(TreeNode* root) {\n    vector<int> ans;\n    solve(root, ans);\n    return ans;\n}\n\nvoid solve(TreeNode* root, vector<int>& ans) {\n    if (!root) {\n        return;\n    }\n    solve(root->left, ans);\n    ans.push_back(root->val);\n    solve(root->right, ans);\n}\n",
  " Longest Bitonic Subsequence": "/*\nQUESTION:\nGiven an array of positive integers, find the maximum length of a Bitonic subsequence.\nA subsequence of an array is called Bitonic if it is first strictly increasing and then strictly decreasing.\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- Compute two DP arrays: one from the left and another from the right.\n- The left DP array, `left`, represents the length of the longest increasing subsequence ending at index i.\n- The right DP array, `right`, represents the length of the longest decreasing subsequence starting at index i.\n- Iterate through the array and compute the `left` DP array, considering elements from the left to the right.\n- Iterate through the array again and compute the `right` DP array, considering elements from the right to the left.\n- The maximum length of the Bitonic subsequence is the maximum sum of the corresponding elements from the `left` and `right` DP arrays minus 1 (to avoid double counting the element at the peak).\n- Return the maximum length.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n^2), where n is the length of the input array nums.\n- The space complexity is O(n) due to the left and right DP arrays.\n- Overall, the algorithm runs in O(n^2) time and O(n) space.\n\nCODE:\n*/\n\nvector<int> fromLeft(int n, vector<int>& nums) {\n    vector<int> dp(n, 1);\n    for (int i = 0; i < n; i++) {\n        for (int prev = 0; prev < i; prev++) {\n            if (nums[prev] < nums[i]) {\n                dp[i] = max(dp[prev] + 1, dp[i]);\n            }\n        }\n    }\n    return dp;\n}\n\nvector<int> fromRight(int n, vector<int>& nums) {\n    vector<int> dp(n, 1);\n    for (int i = n - 1; i >= 0; i--) {\n        for (int prev = i + 1; prev < n; prev++) {\n            if (nums[prev] < nums[i]) {\n                dp[i] = max(dp[prev] + 1, dp[i]);\n            }\n        }\n    }\n    return dp;\n}\n\nint LongestBitonicSequence(vector<int> nums) {\n    int n = nums.size();\n    vector<int> left = fromLeft(n, nums);\n    vector<int> right = fromRight(n, nums);\n    \n    int ans = -1;\n    for (int i = 0; i < n; i++) {\n        ans = max(ans, left[i] + right[i] - 1);\n    }\n    \n    return ans;\n}\n",
  " Longest Happy Prefix": "/*\nQUESTION:\nA string is called a happy prefix if it is a non-empty prefix that is also a suffix (excluding itself).\n\nGiven a string s, return the longest happy prefix of s. Return an empty string \"\" if no such prefix exists.\n\nExample 1:\nInput: s = \"level\"\nOutput: \"l\"\nExplanation: s contains 4 prefixes excluding itself (\"l\", \"le\", \"lev\", \"leve\") and suffixes (\"l\", \"el\", \"vel\", \"evel\"). The largest prefix that is also a suffix is \"l\".\n\nApproach:\n- We can solve this problem using the KMP (Knuth-Morris-Pratt) algorithm.\n- First, we calculate the LPS (Longest Prefix Suffix) array for the given string s.\n- The last value in the LPS array, lps[n-1], represents the length of the longest prefix that is also a suffix.\n- We extract the corresponding substring from s and return it as the longest happy prefix.\n\nComplexity Analysis:\n- The time complexity of this solution is O(n), where n is the length of the string s.\n- The space complexity is O(n) to store the LPS array.\n\nCODE:\n*/\n\nvector<int> kmp(string& s){\n    int n = s.size();\n    vector<int> pi(n);\n    for(int i = 1; i < n; i++){\n        int j = pi[i - 1];\n        while(j > 0 && s[i] != s[j]) {\n            j = pi[j - 1];\n        }\n        if(s[i] == s[j]) {\n            j++;\n        }\n        pi[i] = j;\n    }\n    return pi;\n}\n\nstring longestPrefix(string s) {\n    int n = s.size();\n    vector<int> lps = kmp(s);\n    int length = lps[n - 1]; // Length of the longest prefix that is also a suffix\n    return s.substr(0, length);\n}\n",
  " Longest Palindromic Subsequence": "/*\nQUESTION:\nGiven a string s, find the longest palindromic subsequence's length in s.\n\nExample:\nInput: s = \"bbbab\"\nOutput: 4\nExplanation: One possible longest palindromic subsequence is \"bbbb\".\n\nAPPROACH:\n- This problem can be solved using Dynamic Programming (DP).\n- Initialize a 2D DP array 'dp' where dp[i][j] represents the length of \n  the longest palindromic subsequence in the substring s[i..j].\n- For each character at index 'i' and each character at index 'j':\n  - If s[i] == s[j], then dp[i][j] = dp[i+1][j-1] + 2\n  - Else, dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n- The required answer will be dp[0][n-1], where 'n' is the length of 's'.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of the solution is O(n^2), where 'n' is the length of the input string.\n- The space complexity is O(n^2) for the dp array.\n\nCODE:\n*/\n\n// Memoization\nint fmemo(int i, int j, string& s, string& r, vector<vector<int>>& dp){\n    if(i < 0 || j < 0) return 0;\n\n    if(dp[i][j] != -1) return dp[i][j];\n\n    if(s[i] == r[j]) return dp[i][j] = fmemo(i - 1, j - 1, s, r, dp) + 1;\n    else return dp[i][j] = max(fmemo(i - 1, j, s, r, dp), fmemo(i, j - 1, s, r, dp));\n}\n\n// Tabulation\nint ftab(int n, int m, string& s, string& r){\n    vector<vector<int>> dp(n+1,vector<int>(m+1,0));\n    for(int i=1; i<=n; i++){\n        for(int j=1; j<=m; j++){\n            if(s[i-1]==r[j-1]) dp[i][j] = dp[i-1][j-1]+1;\n            else dp[i][j] = max(dp[i-1][j],dp[i][j-1]);\n        }\n    }\n    return dp[n][m];\n}\n\n// Space Optimization\nint fopt(int n, int m, string& s, string& r){\n    vector<int> prev(m+1,0);\n    for(int i=1; i<=n; i++){\n        vector<int> curr(m+1,0);\n        for(int j=1; j<=m; j++){\n            if(s[i-1]==r[j-1]) curr[j] = prev[j-1]+1;\n            else curr[j] = max(prev[j],curr[j-1]);\n        }\n        prev = curr;\n    }\n    return prev[m];\n}\n\nint longestPalindromeSubseq(string s) {\n    int n = s.size();\n    string r = s;\n    reverse(r.begin(),r.end());\n    vector<vector<int>> dp(n, vector<int>(n, -1));\n    return fmemo(n-1,n-1,s,r,dp);\n}\n",
  " Longest Repeating Character": "/*QUESTION:\nYou are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.\n\nExample 1:\nInput: s = \"ABAB\", k = 2\nOutput: 4\nExplanation: Replace the two 'A's with two 'B's or vice versa.\n\nAPPROACH:\n1. Create an unordered_set ltrs to store all unique letters in the given string s.\n2. Initialize a variable ans to keep track of the maximum length of the substring.\n3. Iterate through each letter ltr in the set ltrs:\n   - Initialize variables start and ltrCnt to track the starting index of the current substring and the count of ltr in the substring.\n   - Iterate through each character in the string s:\n     - If the character is equal to ltr, increment ltrCnt.\n     - Enter a while loop to adjust the start index until the number of characters in the substring that are different from ltr is more than k.\n     - During the adjustment, if the character at the start index is equal to ltr, decrement ltrCnt.\n     - Increment the start index.\n     - If the length of the current substring minus ltrCnt is at most k, update ans by taking the maximum of ans and the length of the current substring.\n4. Return the maximum length of the substring (ans).\n\nCODE:*/\nint characterReplacement(string s, int k) {\n    unordered_set<char> ltrs;\n    for(auto it : s)\n        ltrs.insert(it);\n    int ans = 0;\n    for(auto ltr : ltrs) {\n        int start = 0, ltrCnt = 0;\n        for(int i = 0; i < s.size(); i++) {\n            if(s[i] == ltr)\n                ltrCnt++;\n            while((i - start + 1) - ltrCnt > k) {\n                if(s[start] == ltr)\n                    ltrCnt--;\n                start++;\n            }\n            if((i - start + 1) - ltrCnt <= k)\n                ans = max(ans, i - start + 1);\n        }\n    }\n    return ans;\n}\n/*\nCOMPLEXITY ANALYSIS:\n- Time complexity: O(N * L), where N is the length of the string s and L is the number of unique letters in the string. We iterate through the string and perform the sliding window operation for each unique letter.\n    - L can have the max value of 26, so we can say the complexity would be O(N * 26) i.e O(N).\n- Space complexity: O(L), as we store the unique letters in the set ltrs.\n*/\n",
  " LRU Cache": "/*\nQUESTION:\nDesign a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n\n\nExample:\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n\n\nAPPROACH:\nTo implement the LRU cache, we can use a combination of a hash map and a doubly linked list.\n- The hash map will store the key-value pairs, where the key is the cache key and the value is a pointer to the corresponding node in the linked list.\n- The doubly linked list will maintain the order of the recently used keys, where the front of the list represents the most recently used key and the back of the list represents the least recently used key.\n\nIMPLEMENTATION:\n1. Initialize the LRU cache with the given capacity.\n2. Implement the get(key) function:\n   - If the key exists in the cache, move the corresponding node to the front of the list (indicating it is the most recently used).\n   - Return the value of the key if it exists, otherwise return -1.\n3. Implement the put(key, value) function:\n   - If the key already exists in the cache, update its value and move the corresponding node to the front of the list.\n   - If the key does not exist:\n     - If the cache is full, remove the least recently used key (from the back of the list) and remove its entry from the hash map.\n     - Add the new key-value pair to the front of the list and insert its entry into the hash map.\n\nCODE:\n*/\n\nclass LRUCache {\nprivate:\n    int capacity;\n    unordered_map<int, list<pair<int, int>>::iterator> addr;\n    list<pair<int, int>> lru;\n\npublic:\n    LRUCache(int capacity) {\n        this->capacity = capacity;\n    }\n\n    int get(int key) {\n        if (addr.find(key) == addr.end())\n            return -1; // Key not found\n\n        auto keyPos = addr[key];\n        lru.splice(lru.begin(), lru, keyPos);\n        return lru.front().second;\n    }\n\n    void put(int key, int value) {\n        // If the key already exists, update its value and move it to the front\n        if (addr.find(key) != addr.end()) {\n            auto keyPos = addr[key];\n            lru.splice(lru.begin(), lru, keyPos);\n            lru.front().second = value;\n            return;\n        }\n\n        // If the capacity is full, remove the least recently used key\n        if (addr.size() == capacity) {\n            int backKey = lru.back().first;\n            lru.pop_back();\n            addr.erase(backKey);\n        }\n\n        lru.push_front({key, value});\n        addr[key] = lru.begin();\n    }\n};\n\n/*\nCOMPLEXITY ANALYSIS:\n- The time complexity of both the get() and put() operations is O(1) since we use a hash map to achieve constant time access and update.\n- The space complexity is O(capacity) since the cache can store at most 'capacity' key-value pairs.\n*/\n",
  " Maximum K sum combinations": "/*\nQuestion:\nGiven two integer arrays A and B of size N each. A sum combination is made by adding one element from array A and another element from array B. Return the maximum K valid distinct sum combinations from all the possible sum combinations. Output array must be sorted in non-increasing order.\n\nExample:\nInput:\nN = 2\nK = 2\nA[] = {3, 2}\nB[] = {1, 4}\nOutput: {7, 6}\nExplanation: \n7 -> (A: 3) + (B: 4)\n6 -> (A: 2) + (B: 4)\n*/\n\n/*\nApproach:\n1. Sort arrays A and B in non-increasing order.\n2. Initialize a min-heap (priority_queue) to store the sum combinations.\n3. Iterate over each element in array A.\n4. For each element in A, iterate over each element in array B.\n5. Calculate the sum of the current pair (A[i] + B[j]).\n6. If the heap size is less than K, push the sum into the heap.\n7. If the heap size is already K and the current sum is greater than the smallest element in the heap, pop the smallest element and push the current sum into the heap.\n8. After iterating over all elements, the heap will contain the K maximum valid sum combinations in non-increasing order.\n9. Store the elements of the heap in a vector and return it as the result.\n\nCOMPLEXITY ANALYSIS:-\nTIME COMPLEXITY - \nSorting the arrays A and B takes O(N log N) time.\nBuilding the max heap takes O(N) time.\nExtracting the maximum sum K times takes O(K log N) time.\nOverall, the time complexity of the solution is O(N log N + K log N).\nCODE:-\n*/\n\nvector<int> maxCombinations(int N, int K, vector<int> &A, vector<int> &B) {\n    priority_queue<pair<int,pair<int,int>>> pq;\n    sort(A.begin(),A.end());\n    sort(B.begin(),B.end());\n    for(int i=0;i<N;i++){\n        pq.push({A[i]+B[N-1],{i,N-1}});\n    }\n    vector<int> ans;\n    while(!pq.empty() && K--)\n    {\n        auto it=pq.top();\n        pq.pop();\n        int data=it.first;\n        int x=it.second.first;\n        int y=it.second.second;\n        ans.push_back(data);\n        if(y!=0){\n            pq.push({A[x]+B[y-1],{x,y-1}});\n        }\n    }\n    return ans;\n}",
  " Maximum Path Sum": "/*\nQuestion:\nA path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them.\nA node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node's values in the path.\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.\n\nApproach:\n- The maximum path sum can be calculated using a recursive approach.\n- For each node, we calculate the maximum path sum that includes the node as the root.\n- The maximum path sum that includes the current node is the maximum of the following values:\n  - The value of the current node.\n  - The maximum path sum of the left subtree plus the value of the current node.\n  - The maximum path sum of the right subtree plus the value of the current node.\n  - The maximum path sum of the left subtree plus the maximum path sum of the right subtree plus the value of the current node.\n- During the calculation, we keep track of the maximum path sum encountered so far and update it if necessary.\n- We return the maximum path sum encountered overall.\n\nComplexity Analysis:\n- Since we visit each node once and perform constant time operations for each node, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(H), where H is the height of the binary tree. In the worst case, the tree can be skewed and have a height of N, resulting in O(N) space complexity. In the best case, the tree is balanced and has a height of log(N), resulting in O(log(N)) space complexity.\n\nCode:\n*/\n\nint solve(TreeNode* root, int& maxSum) {\n    if (!root) {\n        return 0;\n    }\n    int leftSum = max(0, solve(root->left, maxSum));\n    int rightSum = max(0, solve(root->right, maxSum));\n    int currentSum = root->val + leftSum + rightSum;\n    maxSum = max(maxSum, currentSum);\n    return root->val + max(leftSum, rightSum);\n}\n\nint maxPathSum(TreeNode* root) {\n    int maxSum = INT_MIN;\n    solve(root, maxSum);\n    return maxSum;\n}\n",
  " Merge K sorted Lists": "/*\nQUESTION:\nYou are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.\n\nAPPROACH:\nTo merge K sorted linked lists, we can use a min-heap (priority queue) to store the smallest nodes from each list.\n1. Create a min-heap of size K to store the current smallest nodes from each list.\n2. Initialize the min-heap with the head node from each list.\n3. While the min-heap is not empty, extract the smallest node from the min-heap, add it to the merged linked list, and replace it with the next node from the same list.\n4. Repeat step 3 until all nodes from all lists are processed.\n\nThe mergeKLists function implements this approach. It uses a min-heap (priority queue) to merge K sorted linked lists into one sorted linked list.\n\nTIME COMPLEXITY:\nThe time complexity of the mergeKLists function is O(N log K), where N is the total number of nodes across all lists and K is the number of linked lists. Inserting nodes into the min-heap and extracting the minimum node take O(log K) time, and we do this for N nodes. The overall time complexity is dominated by the heap operations.\n\nSPACE COMPLEXITY:\nThe space complexity is O(K) as we need to store K nodes in the min-heap.\n*/\n\nListNode* mergeKLists(vector<ListNode*>& lists) {\n    priority_queue<pair<int, ListNode*>, vector<pair<int, ListNode*>>, greater<pair<int, ListNode*>>> pq;\n\n    for (int i = 0; i < lists.size(); i++) {\n        if (lists[i]) {\n            pq.push({lists[i]->val, lists[i]});\n        }\n    }\n\n    ListNode* dummy = new ListNode();\n    ListNode* ans = dummy;\n\n    while (!pq.empty()) {\n        auto top = pq.top();\n        pq.pop();\n        dummy->next = new ListNode(top.first);\n        dummy = dummy->next;\n        ListNode* nxt = top.second->next;\n        if (nxt) {\n            pq.push({nxt->val, nxt});\n        }\n    }\n\n    return ans->next;\n}\n",
  " Minimum Path Sum": "/*\nQUESTION:-\nGiven a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n\nNote: You can only move either down or right at any point in time.\n\nExample 1:\nInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.\n\nApproach:\n1. We can solve this problem using dynamic programming with memoization (top-down approach).\n2. We define a helper function fmemo(i, j, grid, dp) that calculates the minimum sum path to reach the cell (i, j) on the grid.\n3. The function checks if the minimum sum path for the cell (i, j) is already calculated and stored in the dp array. If yes, it returns the value from dp.\n4. If i or j is less than 0 (out of bounds), the function returns a large value (e.g., 1e9) to represent an invalid path.\n5. The base case is when i and j are both 0, in which case the function returns the value in the cell (0, 0) as the minimum sum path.\n6. Otherwise, it calculates the minimum sum path for the cell (i, j) by taking the minimum of the minimum sum paths from the cell above (i-1, j) and the cell to the left (i, j-1), and then adding the value in the current cell (grid[i][j]).\n7. The result is stored in the dp array to avoid recomputation when the function is called with the same parameters again.\n\nComplexity Analysis:\n- The time complexity of the fmemo function is O(m x n) because we are calculating the minimum sum path for each cell only once and storing it in the dp array.\n- The space complexity is also O(m x n) to store the dp array.\n\n*/\n\n// Memoization\nint fmemo(int i, int j, vector<vector<int>>& grid, vector<vector<int>>& dp) {\n    if (i < 0 || j < 0)\n        return 1e9;\n\n    if (dp[i][j] != -1)\n        return dp[i][j];\n\n    if (i == 0 && j == 0)\n        return dp[i][j] = grid[i][j];\n\n    int top = fmemo(i - 1, j, grid, dp);\n    int left = fmemo(i, j - 1, grid, dp);\n    return dp[i][j] = min(top, left) + grid[i][j];\n}\n\n// Tabulation\nint ftab(int m, int n, vector<vector<int>>& grid){\n    vector<vector<int>> dp(m,vector<int>(n));\n    for(int i=0; i<m; i++){\n        for(int j=0; j<n; j++){\n            if(i==0 && j==0){\n                dp[i][j] = grid[i][j];\n                continue;\n            }\n            int top = 1e9, left = 1e9;\n            if(i-1>=0) top = dp[i-1][j];\n            if(j-1>=0) left = dp[i][j-1];\n            dp[i][j] = min(top,left)+grid[i][j];\n        }\n    }\n    return dp[m-1][n-1];\n}\n\n// Space Optimization\nint fopt(int m, int n, vector<vector<int>>& grid){\n    vector<int> prev(n);\n    for(int i=0; i<m; i++){\n        vector<int> curr(n);\n        for(int j=0; j<n; j++){\n            if(i==0 && j==0){\n                curr[j] = grid[i][j];\n                continue;\n            }\n            int top = 1e9, left = 1e9;\n            if(i-1>=0) top = prev[j];\n            if(j-1>=0) left = curr[j-1];\n            curr[j] = min(top,left)+grid[i][j];\n        }\n        prev = curr;\n    }\n    return prev[n-1];\n}\n\nint minPathSum(vector<vector<int>>& grid) {\n    int m = grid.size(), n = grid[0].size();\n    vector<vector<int>> dp(m, vector<int>(n, -1));\n    return fmemo(m - 1, n - 1, grid, dp);\n}\n",
  " Minimum Platforms": "/*\nQuestion:\nGiven arrival and departure times of all trains that reach a railway station, find the minimum number of platforms required for the railway station so that no train is kept waiting.\nConsider that all the trains arrive on the same day and leave on the same day. Arrival and departure time can never be the same for a train, but we can have the arrival time of one train equal to the departure time of another. At any given instance of time, the same platform cannot be used for both the departure of a train and the arrival of another train. In such cases, we need different platforms.\n\nExample:\nInput: n = 6\narr[] = {0900, 0940, 0950, 1100, 1500, 1800}\ndep[] = {0910, 1200, 1120, 1130, 1900, 2000}\nOutput: 3\nExplanation:\nMinimum 3 platforms are required to safely arrive and depart all trains.\n\nApproach:\n- We sort the arrival and departure arrays in non-decreasing order.\n- We initialize variables 'i', 'j', 'plat', and 'ans' to 0.\n- We iterate over the arrival array using 'i' and departure array using 'j'.\n- If the arrival time at index 'i' is less than or equal to the departure time at index 'j', it means a train is arriving and we need an additional platform.\n  - So, we increment 'i' and 'plat'.\n  - We update 'ans' with the maximum value of 'ans' and 'plat'.\n- If the arrival time is greater than the departure time, it means a train has departed and we can free up a platform.\n  - So, we increment 'j' and decrement 'plat'.\n- Finally, we return 'ans' as the minimum number of platforms required.\n\nComplexity Analysis:\n- The time complexity of this approach is O(NlogN), where N is the number of trains.\n- We sort the arrival and departure arrays, which takes O(NlogN) time.\n- The space complexity is O(1) as we use only a constant amount of extra space.\n\nCode:\n*/\n\nint findPlatform(int arr[], int dep[], int n)\n{\n    sort(arr, arr + n);\n    sort(dep, dep + n);\n    int i = 0, j = 0, plat = 0, ans = 0;\n    while (i < n) {\n        if (arr[i] <= dep[j]) {\n            i++;\n            plat++;\n            ans = max(ans, plat);\n        }\n        else {\n            j++;\n            plat--;\n        }\n    }\n    return ans;\n}\n",
  " Most stones removed": "/*\nQUESTION:\n\nOn a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.\n\nA stone can be removed if it shares either the same row or the same column as another stone that has not been removed.\n\nGiven an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.\n\nExample 1:\n\nInput: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]\nOutput: 5\nExplanation: One way to remove 5 stones is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,1].\n2. Remove stone [2,1] because it shares the same column as [0,1].\n3. Remove stone [1,2] because it shares the same row as [1,0].\n4. Remove stone [1,0] because it shares the same column as [0,0].\n5. Remove stone [0,1] because it shares the same row as [0,0].\nStone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.\n\nAPPROACH:\n\nTo solve this problem, we can use the Disjoint Set data structure to group stones that share the same row or column.\n- First, we find the minimum and maximum row and column values to calculate the size of the grid.\n- Then, we iterate through the stones and perform the union operation for stones that share the same row or column.\n- Finally, we count the number of disjoint sets and subtract it from the total number of stones to get the maximum number of stones that can be removed.\n\nCOMPLEXITY ANALYSIS:\n\nLet n be the number of stones and m be the size of the grid.\n\n- Building the Disjoint Set: O(n)\n- Finding the number of disjoint sets: O(n)\n- Overall Time Complexity: O(n)\n- Space Complexity: O(n) for the Disjoint Set data structure\n\nCODE:-\n*/\n\n\nclass DisjointSet {\n    vector<int> parent, size;\n\npublic:\n    DisjointSet(int n) {\n        size.resize(n, 1);\n        parent.resize(n);\n        for (int i = 0; i < n; i++)\n            parent[i] = i;\n    }\n\n    int findUPar(int node) {\n        if (parent[node] == node)\n            return node;\n        return parent[node] = findUPar(parent[node]);\n    }\n\n    void unionBySize(int u, int v) {\n        int uP = findUPar(u), vP = findUPar(v);\n        int uSize = size[uP], vSize = size[vP];\n        if (uP == vP)\n            return;\n        if (uSize > vSize) {\n            parent[vP] = uP;\n            size[uP] += vSize;\n        } else {\n            parent[uP] = vP;\n            size[vP] += uSize;\n        }\n    }\n\n    int countComponents(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (parent[i] == i)\n                cnt++;\n        }\n        return cnt;\n    }\n};\n\nint makeConnected(int n, vector<vector<int>>& connections) {\n    if (n - 1 > connections.size())\n        return -1;\n\n    DisjointSet djs(n);\n    for (auto c : connections) {\n        int u = c[0], v = c[1];\n        if (djs.findUPar(u) != djs.findUPar(v))\n            djs.unionBySize(u, v);\n    }\n\n    int components = djs.countComponents(n);\n    return components - 1;\n}",
  " Prefix to postfix": "/*\nQUESTION:\nYou are given a string that represents the prefix form of a valid mathematical expression. Convert it to its postfix form.\n\nExample:\nInput: \n*-A/BC-/AKL\nOutput: \nABC/-AK/L-*\nExplanation: \nThe above output is its valid postfix form.\n\nAPPROACH:\n- We can use a stack to convert the prefix expression to postfix.\n- We iterate through each character of the input string in reverse order.\n- If the character is an alphanumeric character, we push it onto the stack.\n- If the character is an operator, we pop two operands from the stack, concatenate them with the operator, and push the result back onto the stack.\n- After iterating through all characters, the top of the stack will contain the final postfix expression.\n\nCODE:\n*/\n\nbool isAlphaNumeric(char ch) {\n    return ('A' <= ch && ch <= 'Z') || ('a' <= ch && ch <= 'z') || ('0' <= ch && ch <= '9');\n}\n\nstring preToPost(string pre_exp) {\n    stack<string> st;\n    \n    for (int i = pre_exp.size() - 1; i >= 0; i--) {\n        char ch = pre_exp[i];\n        \n        if (isAlphaNumeric(ch)) {\n            string temp = \"\";\n            temp += ch;\n            st.push(temp);\n        } else {\n            string a = st.top();\n            st.pop();\n            string b = st.top();\n            st.pop();\n            \n            string temp = a + b + ch;\n            st.push(temp);\n        }\n    }\n    \n    return st.top();\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- The time complexity of the preToPost function is O(N), where N is the length of the input string.\n- We iterate through each character once, and the operations performed inside the loop are all constant time.\n- The space complexity is O(N) as we use a stack to store operands.\n*/\n",
  " Prime factorization using Sieve": "/*\nQUESTION:\nGiven a positive number N, compute its prime factorization using the concept of Sieve.\n\nExample:\nInput: N = 12246\nOutput: 2 3 13 157\nExplanation: The prime factorization of 12246 is 2 * 3 * 13 * 157.\n\nAPPROACH:\nTo compute the prime factorization of a number N, we can use the concept of Sieve.\n1. Create a boolean vector `prime` of size N+1 and initialize all elements to true. This vector will be used to mark numbers as prime or not.\n2. Create an empty vector `ans` to store the prime factors of N.\n3. Iterate from 2 to sqrt(N):\n   - If prime[i] is true (i.e., i is a prime number):\n     - While N is divisible by i, add i to the `ans` vector and divide N by i.\n     - Mark all multiples of i as false in the `prime` vector, as they are not prime.\n4. If N is greater than 1, it means N is a prime number itself, so add N to the `ans` vector.\n5. Return the `ans` vector, which will contain the prime factors of N.\n\nCODE:*/\nvector<int> findPrimeFactors(int n) {\n    vector<bool> prime(n + 1, true);\n    vector<int> ans;\n\n    for (int i = 2; i * i <= n; i++) {\n        if (prime[i]) {\n            while (n % i == 0) {\n                ans.push_back(i);\n                n /= i;\n            }\n            for (long long j = (long long)i * i; j <= n; j += i) {\n                prime[j] = false;\n            }\n        }\n    }\n    if (n > 1)\n        ans.push_back(n);\n    return ans;\n}\n\n// Time Complexity: O(N log(log N))\n// Space Complexity: O(N)\n\n\n",
  " Shortest Path in binary matrix": "/* QUESTION:\n\nGiven an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.\n\nA clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:\n1. All the visited cells of the path are 0.\n2. All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).\n3. The length of a clear path is the number of visited cells of this path.\n\nExample:\nInput: grid = [[0,1],[1,0]]\nOutput: 2\n\nAPPROACH:\n- We can use Breadth-First Search (BFS) to find the shortest path.\n- Start BFS from the top-left cell (0, 0) and explore its neighboring cells in 8 directions.\n- Mark the visited cells and continue BFS until reaching the bottom-right cell (n - 1, n - 1).\n- The number of levels traversed in BFS will represent the length of the shortest clear path.\n- If the bottom-right cell cannot be reached or there is no clear path, return -1.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of BFS is O(n^2) as it explores all cells in the n x n matrix.\n- The space complexity is also O(n^2) due to the usage of the queue and the visited matrix.\n\nCODE:\n*/\n\nbool isValid(int x, int y, int n, vector<vector<bool>>& vis, vector<vector<int>>& grid) {\n    return (x >= 0 && x < n && y >= 0 && y < n && !vis[x][y] && grid[x][y] == 0);\n}\n\nint shortestPathBinaryMatrix(vector<vector<int>>& grid) {\n    int n = grid.size();\n    if (grid[0][0] != 0 || grid[n - 1][n - 1] != 0) return -1;\n    \n    vector<vector<bool>> vis(n, vector<bool>(n));\n    queue<pair<int, int>> q;\n    q.push({0, 0});\n    vis[0][0] = true;\n    int lvl = 1;\n    \n    while (!q.empty()) {\n        int siz = q.size();\n        while (siz--) {\n            auto p = q.front();\n            q.pop();\n            int x = p.first, y = p.second;\n            if (x == n - 1 && y == n - 1) return lvl;\n            \n            for (int i = -1; i <= 1; i++) {\n                for (int j = -1; j <= 1; j++) {\n                    int nx = x + i, ny = y + j;\n                    if (isValid(nx, ny, n, vis, grid)) {\n                        q.push({nx, ny});\n                        vis[nx][ny] = true;\n                    }\n                }\n            }\n        }\n        lvl++;\n    }\n    return -1;\n}\n",
  " Trapping Rainwater": "/*QUESTION:\nGiven n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n\nAPPROACH:\nTo calculate the trapped water, we can use the two-pointer approach. We initialize two pointers, one at the beginning of the array (`left`) and another at the end of the array (`right`). We also maintain two variables, `leftMax` and `rightMax`, to keep track of the maximum bar height encountered from the left and right side, respectively.\n\n1. Initialize `left` to 0 and `right` to the last index of the array.\n2. Initialize `leftMax` and `rightMax` to the minimum integer value (`INT_MIN`).\n3. Initialize `ans` (trapped water) to 0.\n4. Iterate while `left` is less than or equal to `right`:\n    a. If `height[left]` is less than `height[right]`:\n        - Update `leftMax` if `height[left]` is greater than the current `leftMax`.\n        - Calculate the amount of water trapped at the current `left` index by subtracting `height[left]` from `leftMax` and add it to `ans`.\n        - Increment `left` by 1.\n    b. Else:\n        - Update `rightMax` if `height[right]` is greater than the current `rightMax`.\n        - Calculate the amount of water trapped at the current `right` index by subtracting `height[right]` from `rightMax` and add it to `ans`.\n        - Decrement `right` by 1.\n5. Return the final value of `ans`.\n\nCODE:*/\nint trap(vector<int>& height) {\n    int leftMax = INT_MIN;\n    int rightMax = INT_MIN;\n    int left = 0, right = height.size()-1;\n    int ans = 0;\n\n    while(left <= right) {\n        if(height[left] < height[right]) {\n            if(height[left] > leftMax)\n                leftMax = height[left];\n            else\n                ans += leftMax - height[left];\n            left++;\n        } else {\n            if(height[right] > rightMax)\n                rightMax = height[right];\n            else\n                ans += rightMax - height[right];\n            right--;\n        }\n    }\n\n    return ans;\n}\n/*\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(N), where N is the number of elements in the `height` array. We iterate through the array once.\n- The space complexity is O(1) as we only use a constant amount of extra space to store variables.\n*/\n\n\n",
  " Valid Parenthesis String": "/*\nQuestion:\nGiven a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.\nThe following rules define a valid string:\n- Any left parenthesis '(' must have a corresponding right parenthesis ')'.\n- Any right parenthesis ')' must have a corresponding left parenthesis '('.\n- Left parenthesis '(' must go before the corresponding right parenthesis ')'.\n- '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string \"\".\n\nExample:\nInput: s = \"(*))\"\nOutput: true\n\nApproach:\n- We maintain two counters `cmin` and `cmax` to keep track of the minimum and maximum possible number of open parentheses.\n- We iterate over the characters in the string.\n- For each character:\n  - If it is '(', we increment both `cmin` and `cmax`.\n  - If it is ')', we decrement `cmax` and update `cmin` to the maximum of `cmin - 1` and 0 (to handle cases where '*' is treated as '(').\n  - If it is '*', we increment `cmax` (considering '*' as '(') and update `cmin` to the maximum of `cmin - 1` and 0 (to handle cases where '*' is treated as ')').\n  - If `cmax` becomes negative at any point, it means even after treating all '*' as '(' we can't maintain balance, so we return false.\n- Finally, we check if `cmin` is 0, which means we have balanced parentheses.\n\nComplexity Analysis:\n- The time complexity of this approach is O(N), where N is the length of the string s.\n- We iterate over each character once.\n- The space complexity is O(1) as we are using only a constant amount of extra space.\n\nCode:\n*/\n\n// NOTE- this approach is not intuitive but the most optimal however we can use recursion to solve this problem and optimize it using dp.\n// We can also solve this using recursion where in the case of '*' we will make 3 recursion calls,\n//  1-> where opencnt++,\n//  2-> where opencnt\n//  3-> where opencnt--\n//  The base case would be at end if opencnt == 0 return true else false.\n\nbool checkValidString(string s) {\n    int cmin = 0, cmax = 0;\n    for (auto c : s) {\n        if (c == '(') {\n            cmax++;\n            cmin++;\n        } else if (c == ')') {\n            cmax--;\n            cmin = max(cmin - 1, 0);\n        } else { // this is the case of '*'\n            cmax++; // if we treat '*' as '('\n            cmin = max(cmin - 1, 0); // if we treat '*' as ')'\n        }\n        if (cmax < 0) // this means even after treating all '*' as '(' we can't maintain balance\n            return false;\n    }\n    return (cmin == 0);\n}\n",
  "4_sum": "/*\nQUESTION:\nGiven an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n- 0 <= a, b, c, d < n\n- a, b, c, and d are distinct.\n- nums[a] + nums[b] + nums[c] + nums[d] == target\n\nExample:\nInput: nums = [1,0,-1,0,-2,2], target = 0\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n\nAPPROACH:\nTo find the unique quadruplets that sum up to the target, we can use a similar approach as the threeSum problem. We will fix two elements (nums[a] and nums[b]) and use two pointers to find the remaining two elements (nums[c] and nums[d]) that sum up to the target.\n\n1. Sort the input array nums in ascending order.\n2. Iterate through the array with two pointers: a and b.\n3. For each pair of elements nums[a] and nums[b], use two pointers c and d to find the remaining two elements that sum up to the target.\n   - Initialize c as b + 1 and d as the last index of the array.\n   - Calculate the target sum as trgt = target - (nums[a] + nums[b]).\n   - While c < d, compare the sum of nums[c] and nums[d] with the target sum.\n     - If the sum is equal to the target sum, we found a quadruplet. Add it to the answer and move the pointers c and d.\n       - Important: Skip any duplicate elements while moving c and d.\n     - If the sum is greater than the target sum, decrement d.\n     - If the sum is less than the target sum, increment c.\n4. Skip any duplicate elements for pointers a and b to avoid duplicate quadruplets.\n5. Return the answer array containing unique quadruplets.\n\n\nCODE:\n*/\n\nvector<vector<int>> fourSum(vector<int> &nums, int target)\n{\n    vector<vector<int>> ans;\n    long long trgt = (long long)(target); // to handle overflow\n    sort(nums.begin(), nums.end());\n\n    for (int a = 0; a < nums.size(); a++)\n    {\n        for (int b = a + 1; b < nums.size(); b++)\n        {\n            if (a == b)\n                continue;\n\n            int c = b + 1;\n            int d = nums.size() - 1;\n            long long tar = trgt - (nums[a] + nums[b]);\n\n            while (c < d)\n            {\n                long long sum = nums[c] + nums[d];\n\n                if (sum == tar)\n                {\n                    ans.push_back({nums[a], nums[b], nums[c], nums[d]});\n                    c++;\n                    d--;\n\n                    // Skip duplicate elements\n                    while (c < d && nums[c] == nums[c - 1])\n                        c++;\n                    while (c < d && nums[d] == nums[d + 1])\n                        d--;\n                }\n                else if (sum > tar)\n                {\n                    d--;\n                }\n                else\n                {\n                    c++;\n                }\n            }\n\n            // Skip duplicate elements\n            while (b + 1 < nums.size() && nums[b + 1] == nums[b])\n                b++;\n        }\n\n        // Skip duplicate elements\n        while (a + 1 < nums.size() && nums[a + 1] == nums[a])\n            a++;\n    }\n\n    return ans;\n}\n\n/*\nTIME COMPLEXITY: O(n^3), where n is the size of the input array nums.\nSPACE COMPLEXITY: O(1), as we are using a constant amount of extra space.\n*/\n",
  "Check for the power of 2": "/*\nQUESTION:-\nGiven an integer n, return true if it is a power of two. Otherwise, return false.\n\nExample 1:\nInput: n = 1\nOutput: true\nExplanation: 2^0 = 1\n\nExample 2:\nInput: n = 16\nOutput: true\nExplanation: 2^4 = 16\n*/\n\n/*\nAPPROACH:\nAn integer n is a power of two if it has only one bit set (i.e., it is a power of 2).\nTo check if a number has only one bit set, we can use the bitwise AND operation with (n-1).\nIf the result is 0, then it is a power of two; otherwise, it is not.\n\n1. If n is less than or equal to 0, return false.\n2. Perform the bitwise AND operation between n and (n-1).\n3. If the result is 0, return true; otherwise, return false.\n*/\n\nbool isPowerOfTwo(int n) {\n    if(n <= 0)\n        return false;\n    if(n & (n-1))\n        return false;\n    return true;\n}\n\n// Time Complexity: O(1)\n// Space Complexity: O(1)\n",
  "Count subsets with sum equal to k": "/*QUESTION:\nGiven an array arr[] of non-negative integers and an integer sum, the task is to count all subsets of the given array with a sum equal to the given sum. The answer can be very large, so the output will be the answer modulo 10^9 + 7.\n\nExample:\nInput: N = 6, arr[] = {2, 3, 5, 6, 8, 10}, sum = 10\nOutput: 3\nExplanation: The subsets with a sum equal to 10 are {2, 3, 5}, {2, 8}, and {10}.\n\nApproach:\nTo count the subsets with a given sum, we can use a recursive approach with backtracking.\n1. Create a helper function called 'solve' that takes the current index, the remaining sum, and the array as parameters.\n2. In the 'solve' function:\n   - If the remaining sum is 0, return 1 (found a subset with the given sum).\n   - If the index becomes 0 and the remaining sum is not 0, return 0 (no subset found with the given sum).\n   - Otherwise, do the following:\n     - Count the subsets that include the element at the current index by recursively calling the 'solve' function with the updated index and the remaining sum minus the element value.\n     - Count the subsets that exclude the element at the current index by recursively calling the 'solve' function with the updated index and the remaining sum.\n     - Return the sum of the counts from the include and exclude steps.\n3. Create the main function called 'perfectSum' that calculates the count of subsets with the given sum.\n   - Call the 'solve' function with the last index of the array, the given sum, and the array.\n   - Return the count modulo 10^9 + 7.\n\nTime Complexity: O(N * sum), where N is the size of the array and sum is the given sum.\nSpace Complexity: O(N * sum), where N is the size of the array and sum is the given sum (for recursion stack).\n\nCODE:*/\nint solve(int index, int sum, int arr[]) {\n\tif (sum == 0) {\n\t\treturn 1;\n\t}\n\tif (index == 0) {\n\t\treturn (arr[0] == sum) ? 1 : 0;\n\t}\n\n\tint include = 0;\n\tif (arr[index] <= sum)\n\t\tinclude = solve(index - 1, sum - arr[index], arr); // include\n\n\tint exclude = solve(index - 1, sum, arr); // exclude\n\n\treturn (include + exclude) % (int)(1e9 + 7);\n}\n\nint perfectSum(int arr[], int n, int sum) {\n\tint cnt = solve(n - 1, sum, arr);\n\treturn cnt % (int)(1e9 + 7);\n}\n",
  "Count_the_number_of_nodes_linked_list": "/*\nQUESTION:-\nGiven a singly linked list. The task is to find the length of the linked list, where length is defined as the number of nodes in the linked list.\n\nExample 1:\n\nInput:\nLinkedList: 1->2->3->4->5\nOutput: 5\nExplanation: Count of nodes in the \nlinked list is 5, which is its length.\nExample 2:\n\nInput:\nLinkedList: 2->4->6->7->5->1->0\nOutput: 7\nExplanation: Count of nodes in the\nlinked list is 7. Hence, the output\nis 7.\n\nAPPROACH:-\n\n1. Initialize a variable `cnt` to 0 to keep track of the count.\n2. Start with the `curr` pointer pointing to the head of the linked list.\n3. Iterate through the linked list by moving the `curr` pointer to the next node in each iteration.\n4. Increment the count `cnt` by 1 for each node encountered.\n5. Continue the iteration until the `curr` pointer becomes NULL, indicating the end of the linked list.\n6. Return the final count `cnt` as the result.\n\nTime complexity of this approach is O(N), where N is the number of nodes in the linked list. We need to visit each node once to count them.\nSpace complexity is O(1) as we are not using any extra space that grows with the input size. We only need a constant amount of space to store the count variable and the temporary pointer.\n\nCODE:-\n*/\n\nint getCount(struct Node* head){\n    int cnt = 0;\n    Node* curr = head;\n    while(curr){\n        cnt++;\n        curr = curr->next;\n    }\n    return cnt;\n}",
  "Flatten_LL": "/**QUESTION:**\n\nGiven a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:\n(i) a next pointer to the next node,\n(ii) a bottom pointer to a linked list where this node is the head.\nEach of the sub-linked lists is in sorted order.\nFlatten the Link List such that all the nodes appear in a single level while maintaining the sorted order.\n\nNote: The flattened list will be printed using the bottom pointer instead of the next pointer.\n\n**APPROACH:**\n\nTo flatten the linked list, we can use a recursive approach. The idea is to flatten the list from right to left. Starting from the last node, we recursively flatten the sublist pointed by the bottom pointer and merge it with the current node. We continue this process until we reach the head of the original linked list. Finally, we return the flattened list.\n\n**TIME COMPLEXITY:** The time complexity is O(N), where N is the total number of nodes in the linked list.\n\n**SPACE COMPLEXITY:** The space complexity is O(1) since we are modifying the given linked list in-place without using any extra space.\n\n**CODE:**/\n\nNode* merge(Node* head1, Node* head2)  \n{  \n    if (head1 == NULL)\n        return head2;\n    if (head2 == NULL)\n        return head1;\n    if (head1->data < head2->data) {\n        head1->bottom = merge(head1->bottom, head2);\n        return head1;\n    }\n    else {\n        head2->bottom = merge(head1, head2->bottom);\n        return head2;\n    }\n}\n\nNode* flatten(Node* root)\n{\n    if (root == NULL)\n        return root;\n\n    Node* left = root;\n    Node* right = flatten(root->next);\n    root->next = NULL;\n    left = merge(left, right);\n    return left;\n}",
  "Implement_atoi": "/*\nQUESTION:-\nImplement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\n\nThe algorithm for myAtoi(string s) is as follows:\n\nRead in and ignore any leading whitespace.\nCheck if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\nIf the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\nReturn the integer as the final result.\nNote:\n\nOnly the space character ' ' is considered a whitespace character.\nDo not ignore any characters other than the leading whitespace or the rest of the string after the digits.\n \n\nExample 1:\n\nInput: s = \"42\"\nOutput: 42\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"42\" (\"42\" is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-231, 231 - 1], the final result is 42.\nExample 2:\n\nInput: s = \"   -42\"\nOutput: -42\nExplanation:\nStep 1: \"   -42\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -42\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -42\" (\"42\" is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-231, 231 - 1], the final result is -42.\n\nApproach:\n1. Initialize an index `i` to track the current position in the string.\n2. Skip any leading whitespace by incrementing `i` until a non-whitespace character is encountered.\n3. Check if the next character (if not at the end of the string) is `'-'` or `'+'`. Set a `sign` flag accordingly to determine the final result's sign.\n4. Read the consecutive digits until a non-digit character is encountered or the end of the input is reached. Convert these digits into an integer.\n5. Apply the sign to the integer obtained from the digits.\n6. If the integer is out of the 32-bit signed integer range, clamp it to the range [-231, 231 - 1].\n7. Return the final integer.\n\nCode:*/\nint myAtoi(string s) {\n    int i = 0;\n    while (i < s.size() && s[i] == ' ')\n        i++;\n    if (i == s.size())\n        return 0;\n    bool sign = true; // indicates the number is positive\n\n    if (s[i] == '-') {\n        i++;\n        sign = false;\n    } else if (s[i] == '+')\n        i++;\n\n    long long ans = 0;\n    while (i < s.size() && (0 <= s[i] - '0' && s[i] - '0' <= 9)) {\n        long long digit = s[i] - '0';\n        ans = (ans * 10) + digit;\n        // handle overflow case\n        if (ans > INT_MAX && sign)\n            return INT_MAX;\n        else if (ans > INT_MAX)\n            return INT_MIN;\n        i++;\n    }\n    ans = sign ? ans : -1 * ans;\n    return (int) ans;\n}\n\n/*\n- Time Complexity: The function scans the input string once, resulting in a linear time complexity of O(n), where n is the length of the input string.\n- Space Complexity: The function uses a constant amount of extra space, resulting in constant space complexity, O(1).\n*/",
  "Kadane's_algorithm": "/*\nQUESTION:-\nGiven an integer array nums, find the subarray with the largest sum, and return its sum.\n\nExample 1:\n\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: The subarray [4,-1,2,1] has the largest sum 6.\n\nExample 2:\n\nInput: nums = [1]\nOutput: 1\nExplanation: The subarray [1] has the largest sum 1.\n*/\n\n/*\nAPPROACH:-\n-> Initialize two variables: maxSum and currentSum. Set both variables to the first element of the array.\n-> Iterate through the array starting from the second element:\n    Update currentSum by adding the current element to it.\n    If currentSum becomes negative, reset it to 0. This step ensures that we consider only the subarrays with positive sums.\n    Update maxSum by taking the maximum value between maxSum and currentSum. This keeps track of the maximum subarray sum encountered so far.\n-> After the iteration, the maxSum variable will hold the largest sum of any subarray.\n-> Return the maxSum as the result.\n*/\n\n// CODE:-\nint maxSubArray(vector<int> &nums)\n{\n    int curr_sum = 0;\n    int ans = INT_MIN;\n    for (int i = 0; i < nums.size(); i++)\n    {\n        curr_sum += nums[i];\n        ans = max(ans, curr_sum);\n        if (curr_sum < 0)\n            curr_sum = 0;\n    }\n    return ans;\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(0)",
  "Longest_common_prefix": "/*\nQuestion:\nWrite a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".\n\nApproach:\n1. Sort the array of strings lexicographically.\n2. Take the first and last string from the sorted array.\n3. Compare each character of the first and last string until they don't match or the end of either string is reached.\n4. Return the common prefix.\n\nTime Complexity: O(N*M*log(N)), where N is the number of strings and M is the maximum length of the strings.\n- Sorting the array of strings takes O(N*log(N)) time.\n- Comparing the first and last string takes O(M) time.\n\nSpace Complexity: O(1)\n- We use constant space.\n\nCode:\n*/\n\nusing namespace std;\n\nstring longestCommonPrefix(vector<string>& strs) {\n    if (strs.empty())\n        return \"\";\n\n    sort(strs.begin(), strs.end());\n\n    int first = 0, last = strs.size() - 1;\n    int i = 0, j = 0;\n    int len = 0;\n\n    while (i < strs[first].size() && j < strs[last].size() && strs[first][len] == strs[last][len]) {\n        i++;\n        j++;\n        len++;\n    }\n\n    return strs[first].substr(0, len);\n}\n",
  "M coloring problem": "/*QUESTION:\nGiven an undirected graph and an integer M. The task is to determine if the graph can be colored with at most M colors such that no two adjacent vertices of the graph are colored with the same color. Here coloring of a graph means the assignment of colors to all vertices. Print 1 if it is possible to colour vertices and 0 otherwise.\n\nApproach:\nWe can solve this problem using backtracking.\n1. Create a helper function called 'isPossible' that takes the graph, an array of colors assigned to vertices, the number of vertices, the color to be assigned, and the current vertex.\n   - Iterate through all the adjacent vertices of the current vertex.\n   - If an adjacent vertex is already colored with the same color, return false.\n   - If there is no conflict, continue checking other adjacent vertices.\n   - If all adjacent vertices have different colors or are uncolored, return true.\n2. Create another helper function called 'solve' that takes the graph, the number of colors, the number of vertices, an array of colors assigned to vertices, and the current vertex.\n   - If all vertices have been assigned colors, return true.\n   - Iterate through all possible colors from 1 to M.\n   - If it is possible to assign the current color to the current vertex without any conflict, assign the color and recursively call the 'solve' function for the next vertex.\n   - If the 'solve' function returns true, return true.\n   - If the 'solve' function returns false, try the next color.\n   - If no color can be assigned to the current vertex without any conflict, return false.\n3. Create the main function called 'graphColoring' that initializes an array of colors and calls the 'solve' function to check if it is possible to color the graph.\n   - If the 'solve' function returns true, return true.\n   - Otherwise, return false.\n\nTime Complexity: O(M^N), where M is the number of colors and N is the number of vertices in the graph. In the worst case, we have to try all possible color combinations for all vertices.\nSpace Complexity: O(N), as we are using an array of colors to store the assigned colors for each vertex.\n\nCODE:*/\nbool isPossible(bool graph[101][101], int color[], int N, int col, int node) {\n    for (int k = 0; k < N; k++) {\n        if (k != node && graph[node][k] == 1 && color[k] == col)\n            return false;\n    }\n    return true;\n}\n\nbool solve(bool graph[101][101], int m, int N, int color[], int node) {\n    if (node == N)\n        return true;\n\n    for (int i = 1; i <= m; i++) {\n        if (isPossible(graph, color, N, i, node)) {\n            color[node] = i;\n            if (solve(graph, m, N, color, node + 1))\n                return true;\n            color[node] = 0;\n        }\n    }\n    return false;\n}\n\nbool graphColoring(bool graph[101][101], int m, int N) {\n    int color[N];\n    memset(color, 0, sizeof color);\n    if (solve(graph, m, N, color, 0))\n        return true;\n    return false;\n}\n",
  "Minimum_days_to_make_boquets": "/*\nQuestion:\nYou are given an integer array bloomDay, an integer m, and an integer k. You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.\n\nThe garden consists of n flowers, where the i-th flower will bloom on the bloomDay[i] day and can be used in exactly one bouquet.\n\nReturn the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets, return -1.\n\nExample:\n\nInput:\nbloomDay = [1,10,3,10,2]\nm = 3\nk = 1\n\nOutput:\n3\n\nExplanation:\nLet us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.\nWe need 3 bouquets each should contain 1 flower.\nAfter day 1: [x, _, _, _, _]   // we can only make one bouquet.\nAfter day 2: [x, _, _, _, x]   // we can only make two bouquets.\nAfter day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.\n*/\n\n/*\nApproach:\n- Use binary search to find the minimum number of days required to make m bouquets.\n- The search space will be between the minimum and maximum bloom day.\n- For each mid value, simulate the process of making bouquets.\n- Count the number of bouquets that can be made using k adjacent flowers on or after the current day.\n- If the count is equal to or greater than m, update the answer and search in the lower half of the search space.\n- If the count is less than m, search in the upper half of the search space.\n*/\n\nbool isPossible(int mid, vector<int>& bloomDay, int m, int k) {\n    int bqts = 0, temp = 0;\n    for(auto it:bloomDay){\n        if(it<=mid)\n            temp++;\n        else\n            temp = 0;\n        if(temp==k){\n            bqts++;\n            temp = 0;\n        }\n    }\n    if(bqts>=m)\n        return true;\n    return false;\n}\n\nint minDays(vector<int>& bloomDay, int m, int k) {\n    if((long)m*k > bloomDay.size())\n        return -1;\n\n    int ans = -1;\n    int low = INT_MAX, high = INT_MIN;\n    for(auto it:bloomDay){\n        low = min(low,it);\n        high = max(high,it);\n    }\n\n    while(low<=high){\n        int mid = low+(high-low)/2;\n        if(isPossible(mid,bloomDay,m,k)){\n            ans = mid;\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return ans;\n}\n\n// Time Complexity: The binary search approach takes O(log n), where n is the number of elements in the `bloomDay` array.\n// Space Complexity: The space complexity is O(1) since we are using a constant amount of extra space.",
  "Remove_duplicates_from_sorted_array": "/*\nQUESTION:-\n\nGiven an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.\nConsider the number of unique elements of nums to be k, to get accepted, you need to do the following things:\nChange the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.\nReturn k.\n\nExample 1:\n\nInput: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\nExample 2:\n\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n*/\n\n/*\nAPPROACH:-\n-> The idea, is to use keep a pointer k which signifies that upto here the array is sorted\n-> Now travese the entire array and if arr[k]!=arr[j] that is arr[j] is a unique value hence it should be included\n   so increment the k and swap arr[k] with arr[j]\n-> Return k+1, +1 is because of 0 based indexing\n*/\n\n// CODE:-\nint removeDuplicates(vector<int> &nums)\n{\n    int k = 0; // upto k array contains unique elements\n    for (int j = 1; j < nums.size(); j++)\n    {\n        if (nums[k] != nums[j])\n        {\n            k++;\n            swap(nums[k], nums[j]);\n        }\n    }\n    return k + 1;\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(0)",
  "Reverse_DLL": "/*\nGiven a doubly linked list of n elements. The task is to reverse the doubly linked list.\n\nExample 1:\n\nInput:\nLinkedList: 3 <--> 4 <--> 5\nOutput: 5 4 3\nExample 2:\n\nInput:\nLinkedList: 75 <--> 122 <--> 59 <--> 196\nOutput: 196 59 122 75\n\nAPPROACH:-\n1. The function `reverseDLL` takes in one parameter: `head`, which is a pointer to the head of the doubly linked list.\n2. The variable `curr` is initialized with the `head` pointer, which represents the current node being processed.\n3. The variable `ans` is initialized as `NULL`. It will store the new head of the reversed linked list.\n4. The code enters a `while` loop, which continues until `curr` becomes `NULL`, indicating that all nodes have been processed.\n5. Inside the loop, the variable `nxt` is assigned the value of `curr->next`, which represents the next node in the original list.\n6. The next and previous pointers of the current node (`curr->next` and `curr->prev`) are swapped to reverse the links.\n7. The `if` condition checks if `curr->prev` is `NULL`, indicating that `curr` is the last node in the original list (now the first node in the reversed list). In this case, the `ans` pointer is updated to store the new head of the reversed list.\n8. The `curr` pointer is updated to `curr->prev`, which moves it to the previous node in the original list.\n9. After the loop, the `ans` pointer now holds the new head of the reversed list. It is returned as the result.\n\nCODE:-\n*/\nNode* reverseDLL(Node *head) {\n    Node* curr = head;\n    Node* ans = NULL;\n    while(curr) {\n        Node* nxt = curr->next;\n        curr->next = curr->prev;\n        curr->prev = nxt;\n        if(curr->prev == NULL)\n            ans = curr;\n        curr = curr->prev;\n    }\n    return ans;\n}\n\n/*\nTime Complexity:\n- The code iterates over each node of the doubly linked list exactly once, performing a constant number of operations for each node. Therefore, the time complexity is O(n), where n is the number of nodes in the linked list.\nSpace Complexity:\n- The code uses a constant amount of extra space for variables (`curr`, `nxt`, `ans`). Hence, the space complexity is O(1).\n*/",
  "Search_insert_position": "/*\nQUESTION:\nGiven a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\nYou must write an algorithm with O(log n) runtime complexity.\n\nExample:\n\nInput: nums = [1,3,5,6], target = 5\nOutput: 2\nExample 2:\n\nInput: nums = [1,3,5,6], target = 2\nOutput: 1\n*/\n\n/*\nAPPROACH:\nWe can use the lower_bound function from the C++ standard library to find the index where the target should be inserted. The lower_bound function returns an iterator pointing to the first element that is not less than the target. By subtracting the beginning iterator from the lower_bound iterator, we get the index where the target should be inserted.\n\nCODE:\n*/\n\nint searchInsert(vector<int>& nums, int target) {\n    auto ans = lower_bound(nums.begin(), nums.end(), target) - nums.begin();\n    return ans;\n}\n\n// TIME COMPLEXITY: O(log n) due to the use of lower_bound function\n// SPACE COMPLEXITY: O(1)\n",
  "Sort_stack_using_recursion": "/*QUESTION:\nGiven a stack, the task is to sort it such that the top of the stack has the greatest element.\n\nExample 1:\nInput:\nStack: 3 2 1\nOutput: 3 2 1\n\nExample 2:\nInput:\nStack: 11 2 32 3 41\nOutput: 41 32 11 3 2\n\nApproach:\nTo sort a stack in descending order, we can follow the following steps:\n1. Create a helper function called 'placeAtCorrectPos' that takes an element and a stack as parameters.\n2. The 'placeAtCorrectPos' function places the given element at the correct position in the stack using recursion.\n   - If the stack is empty or the top element of the stack is less than the given element, push the element to the stack and return.\n   - Otherwise, pop the top element from the stack and recursively call 'placeAtCorrectPos' with the element and the modified stack.\n     After the recursive call, push the popped element back to the stack.\n3. Create the main function called 'sortSt' that sorts the stack in descending order using recursion.\n   - Base case: If the stack is empty, return.\n   - Otherwise, pop the top element from the stack and recursively call 'sortSt' on the modified stack.\n     After the recursive call, call the 'placeAtCorrectPos' function with the popped element and the modified stack.\n4. The 'sortSt' function will sort the stack in descending order using recursion and the 'placeAtCorrectPos' function.\n\nTime Complexity: O(N^2) (due to multiple recursive calls)\nSpace Complexity: O(N) (due to the internal stack space used for recursion)\n\nCODE:*/\nvoid placeAtCorrectPos(int ele, stack<int>& st) {\n\tif (st.empty() || st.top() < ele) {\n\t\tst.push(ele);\n\t\treturn;\n\t}\n\n\tint first = st.top();\n\tst.pop();\n\tplaceAtCorrectPos(ele, st);\n\tst.push(first);\n}\n\nvoid sortSt(stack<int>& st) {\n\tif (st.empty())\n\t\treturn;\n\n\tint first = st.top();\n\tst.pop();\n\tsortSt(st);\n\tplaceAtCorrectPos(first, st);\n}\n",
  "Start_of_cycle_in_LL": "/*\nQUESTION:-\nGiven the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\n\nDo not modify the linked list.\n\nExample 1:\nInput: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n\nExample 2:\nInput: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n*/\n\n/*\nAPPROACH:\nTo find the node where the cycle begins in a linked list, we can use the Floyd's cycle-finding algorithm, also known as the \"tortoise and hare\" algorithm.\nInitialize two pointers, slow and fast, to the head of the linked list.\nMove the slow pointer one step at a time and the fast pointer two steps at a time.\nIf the linked list has a cycle, the fast pointer will eventually catch up to the slow pointer.\nIn other words, if there is a cycle, the two pointers will meet at some point.\nOnce the two pointers meet, move one of the pointers back to the head of the linked list.\nThen, move both pointers one step at a time until they meet again.\nThe point at which they meet is the node where the cycle begins.\nReturn this node.\nIf the fast pointer reaches the end of the list (i.e., it becomes NULL or reaches a node with a NULL next pointer), then there is no cycle in the linked list, and we can return NULL.\n*/\n\nListNode* startOfCycle(ListNode* slow, ListNode* fast) {\n    while (slow != fast) {\n        slow = slow->next;\n        fast = fast->next;\n    }\n    return slow;\n}\n\nListNode* detectCycle(ListNode* head) {\n    ListNode* slow = head;\n    ListNode* fast = head;\n    while (fast && fast->next) {\n        slow = slow->next;\n        fast = fast->next->next;\n        if (slow == fast) {\n            fast = head;\n            return startOfCycle(slow, fast);\n        }\n    }\n    return NULL;\n}\n\n// TIME COMPLEXITY: O(N)\n// SPACE COMPLEXITY: O(1)\n",
  " 01 Matrix": "/*\nQUESTION:-\nGiven an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\n\nThe distance between two adjacent cells is 1.\n\nAPPROACH:\n- We can use a Breadth-First Search (BFS) traversal to find the distance of the nearest 0 for each cell.\n- First, we initialize the distance matrix with -1 for all cells.\n- Then, we iterate through the matrix and find all cells with the value 0. For each 0 cell found, we add it to the queue and set its distance to 0 in the distance matrix.\n- Next, we perform a BFS starting from the cells with 0. During the BFS, we update the distance of each cell from the nearest 0 cell and continue the BFS until all cells are visited.\n- Finally, we return the distance matrix.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(m * n), where m is the number of rows and n is the number of columns in the matrix. In the worst case, we may need to visit all the cells of the matrix.\n- Space Complexity: O(m * n), where m is the number of rows and n is the number of columns in the matrix. We use additional space for the distance matrix and the queue during BFS.\n*/\n\nvector<vector<int>> updateMatrix(vector<vector<int>>& mat) {\n    int m = mat.size(); \n    int n = mat[0].size();\n    vector<vector<int>> dis(m, vector<int>(n, -1));\n    queue<pair<int, int>> q;\n\n    for(int i = 0; i < m; i++){\n        for(int j = 0; j < n; j++){\n            if(mat[i][j] == 0){\n                dis[i][j] = 0;\n                q.push({i, j});\n            }\n        }\n    }\n\n    vector<int> dr = {-1, 1, 0, 0};\n    vector<int> dc = {0, 0, -1, 1};\n    int level = 1;\n\n    while(!q.empty()){\n        int size = q.size();\n        while(size--){\n            auto p = q.front();\n            q.pop();\n            int x = p.first, y = p.second;\n            for(int i = 0; i < 4; i++){\n                int nx = x + dr[i], ny = y + dc[i];\n                if(nx >= 0 && nx < m && ny >= 0 && ny < n && dis[nx][ny] == -1){\n                    dis[nx][ny] = level;\n                    q.push({nx, ny});\n                }\n            }\n        }\n        level++;\n    }\n\n    return dis;\n}\n",
  " Account Merge": "/*\nQUESTION:-\nGiven a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.\nNow, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.\nAfter merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.\n\nApproach:\n1. We use a disjoint-set data structure to group accounts that belong to the same person based on their common emails.\n2. Create a disjoint-set and an unordered map to store email to account index mapping.\n3. Iterate through the list of accounts, for each account, iterate through its emails, and add them to the unordered map with the corresponding account index as the value.\n4. Iterate through the unordered map and union accounts that share common emails using the disjoint-set.\n5. Create a set for each group of accounts and add the emails of each account to the corresponding set.\n6. Iterate through the disjoint-set and create the final merged accounts list by grouping emails for each account based on their root in the disjoint-set.\n\nComplexity Analysis:\n- Let n be the number of accounts and m be the average number of emails per account.\n- The time complexity of this approach is O(n*m*α(n)), where α(n) is the inverse Ackermann function, which grows very slowly and is nearly constant.\n- The space complexity is O(n*m) to store the emails and their corresponding account indices in the unordered map, and O(n*m) to store the merged accounts in the final result.\n*/\n\nclass DisjointSet {\npublic:\n    vector<int> parent, size;\n\n    DisjointSet(int n) {\n        size.resize(n, 1);\n        parent.resize(n);\n        for (int i = 0; i < n; i++)\n            parent[i] = i;\n    }\n\n    int findUPar(int node) {\n        if (parent[node] == node)\n            return node;\n        return parent[node] = findUPar(parent[node]);\n    }\n\n    void unionSize(int u, int v) {\n        int uP = findUPar(u), vP = findUPar(v);\n        int uS = size[uP], vS = size[vP];\n        if (uS > vS) {\n            parent[vP] = uP;\n            size[uP] += vS;\n        } else {\n            parent[uP] = vP;\n            size[vP] += uS;\n        }\n    }\n};\n\nvector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {\n    unordered_map<string, vector<int>> emailToAccountIndex;\n    int n = accounts.size();\n    DisjointSet djs(n);\n\n    for (int u = 0; u < n; u++) {\n        for (int i = 1; i < accounts[u].size(); i++) {\n            emailToAccountIndex[accounts[u][i]].push_back(u);\n        }\n    }\n\n    for (auto [email, users] : emailToAccountIndex) {\n        for (int i = 1; i < users.size(); i++) {\n            if (djs.findUPar(users[i - 1]) != djs.findUPar(users[i]))\n                djs.unionSize(users[i - 1], users[i]);\n        }\n    }\n\n    set<string> userMail[n];\n    for (int i = 0; i < n; i++) {\n        for (int m = 1; m < accounts[i].size(); m++) {\n            userMail[djs.findUPar(i)].insert(accounts[i][m]);\n        }\n    }\n\n    vector<vector<string>> ans;\n    for (int i = 0; i < n; i++) {\n        if (userMail[i].empty()) continue;\n        vector<string> temp;\n        temp.push_back(accounts[i][0]);\n        for (auto m : userMail[i])\n            temp.push_back(m);\n        ans.push_back(temp);\n    }\n\n    return ans;\n}\n",
  " All nodes at distance K": "/* QUESTION:\n\nGiven the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.\n\nYou can return the answer in any order.\n\nExample 1:\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2\nOutput: [7,4,1]\nExplanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.\n\n\nAPPROACH:\n\nTo find the nodes that are at a distance k from the target node, we can perform a two-step process:\n1. First, traverse the binary tree to build a map of each node to its parent node using BFS. This map will help us later to backtrack from the target node to its ancestors.\n2. Next, perform a BFS from the target node to find all nodes at a distance k from it. While doing this, we also mark visited nodes to avoid revisiting the same nodes.\n\nCOMPLEXITY ANALYSIS:\n\nLet `n` be the number of nodes in the binary tree.\n- Time Complexity: The time complexity of this approach is O(n) since we need to traverse the entire binary tree to build the parent map and perform BFS from the target node.\n- Space Complexity: The space complexity is O(n) for the parent map and O(k) for the queue used in BFS. In the worst case, when k approaches n, the space complexity becomes O(n).\n\nCODE:\n*/\n\nvector<int> distanceK(TreeNode* root, TreeNode* target, int k) {\n    vector<int> ans;\n    unordered_map<int, TreeNode*> parent;\n    queue<TreeNode*> q;\n    q.push(root);\n\n    while (!q.empty()) {\n        int si = q.size();\n        for (int i = 0; i < si; i++) {\n            auto top = q.front();\n            q.pop();\n\n            if (top->left) {\n                parent[top->left->val] = top;\n                q.push(top->left);\n            }\n\n            if (top->right) {\n                parent[top->right->val] = top;\n                q.push(top->right);\n            }\n        }\n    }\n\n    unordered_map<int, int> visited;\n    q.push(target);\n    while (k-- && !q.empty()) {\n        int size = q.size();\n\n        for (int i = 0; i < size; i++) {\n            auto top = q.front();\n            q.pop();\n\n            visited[top->val] = 1;\n\n            if (top->left && !visited[top->left->val]) {\n                q.push(top->left);\n            }\n\n            if (top->right && !visited[top->right->val]) {\n                q.push(top->right);\n            }\n\n            if (parent[top->val] && !visited[parent[top->val]->val]) {\n                q.push(parent[top->val]);\n            }\n        }\n    }\n\n    while (!q.empty()) {\n        ans.push_back(q.front()->val);\n        q.pop();\n    }\n    return ans;\n}\n",
  " Arrange by rank": "/*\nQUESTION:\nGiven an array of integers arr, replace each element with its rank.\n\nAPPROACH:\nTo assign ranks to the elements in the array, we can use a min-heap (priority queue) to sort the elements in ascending order along with their indices.\n1. Create a min-heap to store pairs of (element, index) in ascending order.\n2. Push each element along with its index into the min-heap.\n3. Initialize the rank as 0 and the previous element as INT_MIN (an arbitrary value that never matches any element).\n4. While the min-heap is not empty, extract the minimum element from the min-heap.\n5. If the current element is different from the previous element, increment the rank.\n6. Assign the rank to the element at its corresponding index in the result array.\n7. Repeat steps 4-6 until all elements are processed.\n\nThe arrayRankTransform function implements this approach. It uses a min-heap to assign ranks to the elements in the array.\n\nTIME COMPLEXITY:\nThe time complexity of the arrayRankTransform function is O(N log N), where N is the size of the array. Inserting elements into the min-heap and extracting the minimum element take O(log N) time, and we do this for N elements. The overall time complexity is dominated by the heap operations.\n\nSPACE COMPLEXITY:\nThe space complexity is O(N) as we need to store N elements in the min-heap and the result array.\n*/\n\nvector<int> arrayRankTransform(vector<int>& arr) {\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    for (int i = 0; i < arr.size(); i++) {\n        pq.push({arr[i], i});\n    }\n    vector<int> ans(arr.size());\n    int rank = 0;\n    int prev = INT_MIN; // an arbitrary value which never matches\n    while (!pq.empty()) {\n        auto top = pq.top();\n        pq.pop();\n        if (top.first != prev) {\n            rank++;\n        }\n        ans[top.second] = rank;\n        prev = top.first;\n    }\n    return ans;\n}\n",
  " Binary Subarrays with Sum": "/*QUESTION:\nGiven a binary array nums and an integer goal, return the number of non-empty subarrays with a sum equal to the goal.\n\nExample 1:\nInput: nums = [1,0,1,0,1], goal = 2\nOutput: 4\nExplanation: The 4 subarrays are bolded and underlined below:\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]\n\nAPPROACH:\n1. Create an unordered_map mp to store the prefix sum and its frequency.\n2. Initialize a variable prefSum to keep track of the prefix sum.\n3. Initialize a variable cnt to keep track of the count of subarrays with a sum equal to the goal.\n4. Iterate through each element nums[i] in the array:\n   - Update prefSum by adding nums[i].\n   - Check if prefSum is equal to the goal, if so, increment cnt.\n   - Check if the difference between prefSum and goal (prefSum - goal) exists in the map.\n     - If it exists, increment cnt by the frequency of (prefSum - goal) in the map, as this would mean we have found subarrays with a sum equal to the goal.\n   - Increment the frequency of prefSum in the map.\n5. Return cnt, which represents the number of non-empty subarrays with a sum equal to the goal.\n\nCODE:*/\n\n\nint numSubarraysWithSum(vector<int>& nums, int goal) {\n    unordered_map<int, int> mp;\n    int prefSum = 0, cnt = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        prefSum += nums[i];\n        if(prefSum == goal)\n            cnt++;\n        if(mp.find(prefSum - goal) != mp.end())\n            cnt += mp[prefSum - goal];\n        mp[prefSum]++;\n    }\n    return cnt;\n}\n/*\nCOMPLEXITY ANALYSIS:\n- Time complexity: O(N), where N is the size of the input array nums. We traverse the array once and perform constant time operations in the loop.\n- Space complexity: O(N), as the worst-case scenario would be that all prefix sums are distinct, so the map mp would store N prefix sums.\n    - we can reduce the space complexity to O(1) if we use this countOfSubarrays with atmost sum = k - atmost sum = k-1 \n    - which will return in countofSubarrays with sum exactly K, but this won't work if array has -ve elements\n*/\n",
  " Buy and sell stocks with cooldown": "/*\nQUESTION:\nYou are given an array prices where prices[i] is the price of a given stock on the ith day.\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\n- After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\nExample:\nInput: prices = [1, 2, 3, 0, 2]\nOutput: 3\nExplanation: transactions = [buy, sell, cooldown, buy, sell]\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- We need to keep track of whether we are holding a stock or not on each day.\n- Define a 2D DP array `dp` where dp[i][hold] represents the maximum profit achievable starting from day i while holding or not holding a stock.\n- The base case is dp[n][0] = dp[n][1] = 0, where n is the number of days.\n- Iterate through each day i in reverse order.\n- If holding a stock, we can either sell the stock or continue holding.\n- If not holding a stock, we can either buy the stock or continue not holding.\n- Return dp[0][0], which represents the maximum profit achievable starting from day 0 while not holding a stock.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n), where n is the number of days.\n- The space complexity is O(n) due to the dp array.\n- Overall, the algorithm runs in O(n) time and O(n) space.\n\nCODE:\n*/\n\nint fmemo(int i, int hold, vector<int>& prices, vector<vector<int>>& dp){\n    if(i >= prices.size()) return 0;\n\n    if(dp[i][hold] != -1) return dp[i][hold];\n\n    if(hold){\n        // sell \n        int a = prices[i] + fmemo(i + 2, 0, prices, dp);\n        // not sell\n        int b = fmemo(i + 1, 1, prices, dp);\n        return dp[i][hold] = max(a, b);\n    }\n    else{\n        // buy\n        int a = -prices[i] + fmemo(i + 1, 1, prices, dp);\n        // not buy\n        int b = fmemo(i + 1, 0, prices, dp);\n        return dp[i][hold] = max(a, b);\n    }\n}\n\nint maxProfit(vector<int>& prices) {\n    int n = prices.size();\n    vector<vector<int>> dp(n, vector<int>(2, -1));\n    return fmemo(0, 0, prices, dp);\n}\n",
  " Fast Power": "/*\nQUESTION:\nImplement pow(x, n), which calculates x raised to the power n (i.e., x^n).\n\nExample:\nInput: x = 2.00000, n = 10\nOutput: 1024.00000\n\nAPPROACH:\nTo calculate x raised to the power n, we can use the concept of binary exponentiation.\n1. If n is 0, return 1, as any number raised to the power 0 is 1.\n2. Initialize a variable res to 1 to store the result.\n3. If n is negative, set isNegative flag to true and make n positive.\n4. Iterate until n becomes 0:\n   - If the least significant bit of n is 1 (i.e., n is odd), multiply res by x.\n   - Update x to x^2 by multiplying it with itself.\n   - Right-shift n by 1 to remove the least significant bit.\n5. If isNegative is true, return 1/res; otherwise, return res.\n\nCODE:*/\ndouble myPow(double x, int n) {\n    if (n == 0)\n        return 1;\n    double res = 1;\n    bool isNegative = (n < 0);\n    n = abs(n);\n    while (n > 0) {\n        if (n & 1) { // Check if n is odd\n            res = res * x;\n        }\n        x = x * x; // Update x to x^2\n        n = n >> 1; // Right-shift n by 1\n    }\n    return (isNegative) ? 1 / res : res;\n}\n\n// Time Complexity: O(log(n))\n// Space Complexity: O(1)\n\n\n",
  " Find Eventual Safe State": "/*\nQUESTION:\nThere is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].\n\nA node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).\n\nAPPROACH:\n- We are given a directed graph, and we need to find all the safe nodes.\n- A node is safe if every possible path starting from that node leads to a terminal node (or another safe node).\n- To solve this, we can use a reverse graph approach along with a topological sorting method.\n- We create a reverse adjacency list, where revadj[i] contains all the nodes from which there is a directed edge to node i (i.e., nodes that have an edge towards node i).\n- We also keep track of the outdegree of each node, which represents the number of outgoing edges from that node.\n- We then start with nodes that have an outdegree of 0 (i.e., terminal nodes) and perform a BFS-like traversal.\n- During the traversal, we keep reducing the outdegree of the nodes from which there is a directed edge to the current node.\n- If a node's outdegree becomes 0 during the traversal, we add it to the queue for further processing.\n- All the nodes that become terminal nodes during the traversal are safe nodes.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(N + E), where N is the number of nodes, and E is the number of edges in the graph. We perform a BFS-like traversal of all nodes and edges.\n- Space Complexity: O(N + E), where N is the number of nodes, and E is the number of edges in the graph. We use additional space to store the reverse adjacency list and outdegree of each node.\n*/\n\nvector<int> eventualSafeNodes(vector<vector<int>>& graph) {\n    int n = graph.size();\n    // Creating reverse adjacency list and outdegree array\n    vector<int> revadj[n];\n    vector<int> outdeg(n);\n    for (int i = 0; i < n; i++) {\n        outdeg[i] += graph[i].size();\n        for (auto j : graph[i]) {\n            revadj[j].push_back(i);\n        }\n    }\n\n    queue<int> q;\n    for (int i = 0; i < n; i++) {\n        if (outdeg[i] == 0) q.push(i);\n    }\n\n    vector<int> ans;\n\n    while (!q.empty()) {\n        int siz = q.size();\n        while (siz--) {\n            int node = q.front();\n            q.pop();\n            ans.push_back(node);\n\n            // Reduce outdegree of the nodes from which there is a directed edge to the current node\n            for (auto v : revadj[node]) {\n                outdeg[v]--;\n                if (outdeg[v] == 0) {\n                    q.push(v);\n                }\n            }\n        }\n    }\n\n    // Sort the safe nodes in ascending order\n    sort(ans.begin(), ans.end());\n    return ans;\n}\n",
  " House Robber 2": "/*\nQUESTION:-\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n\nExample 1:\nInput: nums = [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n\nApproach:\n1. Since the houses are arranged in a circle, the robber cannot rob the first and last house together as they are adjacent.\n2. To solve this problem, we can divide it into two subproblems: one where the robber robs from the first house to the second-last house (excluding the last house), and another where the robber robs from the second house to the last house (excluding the first house).\n3. We can use dynamic programming with memoization to calculate the maximum amount of money that can be robbed in each subproblem.\n4. We define a helper function fmemo(e, i, nums, dp) that calculates the maximum amount of money that can be robbed from the e-th to the i-th house using memoization.\n5. The function checks if the maximum amount for the i-th house is already calculated and stored in the dp array. If yes, it returns the value from dp.\n6. Otherwise, it calculates the maximum amount by considering two options:\n   a) Rob the current house and add the money with the maximum amount from the (i-2)th house (since adjacent houses cannot be robbed).\n   b) Skip the current house and take the maximum amount from the (i-1)th house.\n7. The base case is when i is less than e, in which case the function returns 0 as there are no houses to rob.\n8. In the main function rob(nums), we first check if there is only one house. If yes, the robber can only rob that house, so we return the amount in that case.\n9. Otherwise, we create a dp array of size n initialized with -1 and call the fmemo function twice: one for robbing from the first to the second-last house and the other for robbing from the second to the last house.\n10. Finally, we return the maximum amount from the two subproblems, which gives the maximum amount the robber can rob without alerting the police.\n\nComplexity Analysis:\n- The time complexity of the fmemo function is O(n) because we are calculating the maximum amount for each house only once and storing it in the dp array.\n- The space complexity is also O(n) to store the dp array.\n*/\n\n// Memoization\nint fmemo(int e, int i, vector<int>& nums, vector<int>& dp) {\n    if (i < e)\n        return 0;\n\n    if (i == e)\n        return dp[i] = nums[i];\n\n    if (dp[i] != -1)\n        return dp[i];\n\n    int take = nums[i] + fmemo(e, i - 2, nums, dp);\n    int notake = fmemo(e, i - 1, nums, dp);\n    return dp[i] = max(take, notake);\n}\n\n// Tabulation\nint ftab(int e, int n, vector<int>& nums){\n    vector<int> dp(n);\n    dp[e] = nums[e];\n    for(int i=e+1; i<n-(!e); i++){\n        int take = nums[i];\n        if(i-2>=e)\n            take += dp[i-2];\n        int notake = dp[i-1];\n        dp[i] = max(take,notake);\n    }\n    return dp[n-1-(!e)];\n}\n\n// Space Optimization\nint fopt(int e, int n, vector<int>& nums){\n    int p1 = nums[e], p2 = 0, ans = 0;\n    for(int i=e+1; i<n-(!e); i++){\n        int take = nums[i];\n        if(i-2>=e)\n            take += p2;\n        int notake = p1;\n        ans = max(take,notake);\n        p2 = p1; p1 = ans;\n    }\n    return ans;\n}\n\nint rob(vector<int>& nums) {\n    int n = nums.size();\n    if (n == 1)\n        return nums[0];\n\n    vector<int> dp(n, -1);\n    int s = fmemo(1, n - 1, nums, dp); // Rob from 1st to 2nd-last house\n    dp.assign(n, -1);\n    int e = fmemo(0, n - 2, nums, dp); // Rob from 2nd to last house\n    return max(s, e);\n}\n",
  " Implement stack using linked list": "/*\nQuestion:\nYou have a linked list and you have to implement the functionalities push and pop of stack using this given linked list. Your task is to use the class as shown in the comments in the code editor and complete the functions push() and pop() to implement a stack.\n\nApproach:\n- We use the class `MyStack` to represent the stack implemented using a linked list.\n- The stack is implemented using a singly linked list where each node represents an element in the stack.\n- The `push(int)` function inserts an element at the top of the stack by creating a new node and updating the `next` pointer to point to the current top.\n- The `pop()` function removes the top element from the stack by updating the `top` pointer to the next node and returning the data of the removed node.\n\nCode:\n*/\n\nclass MyStack {\nprivate:\n    struct StackNode {\n        int data;\n        StackNode* next;\n\n        StackNode(int x) : data(x), next(NULL) {}\n    };\n\n    StackNode* top;\n\npublic:\n    MyStack() : top(NULL) {}\n    void push(int x);\n    int pop();\n};\n\nvoid MyStack::push(int x) {\n    StackNode* temp = new StackNode(x);\n    temp->next = top;\n    top = temp;\n}\n\nint MyStack::pop() {\n    if (!top)\n        return -1;\n\n    int popped = top->data;\n    StackNode* temp = top;\n    top = top->next;\n\n    return popped;\n}\n\n/*\nComplexity Analysis:\n- The `push()` operation has a time complexity of O(1) since we only need to create a new node and update the `top` pointer.\n- The `pop()` operation has a time complexity of O(1) since we only need to update the `top` pointer and delete the node.\n- The space complexity is O(N), where N is the total number of elements stored in the stack (linked list).\n*/\n\n",
  " Job Sequencing Problem": "/*\nQuestion:\nGiven a set of N jobs where each job 'i' has a deadline and profit associated with it. Each job takes 1 unit of time to complete, and only one job can be scheduled at a time. We earn the profit associated with a job if and only if the job is completed by its deadline. Find the number of jobs done and the maximum profit.\n\nExample:\nInput:\nN = 4\nJobs = {(1,4,20),(2,1,10),(3,1,40),(4,1,30)}\nOutput:\n2 60\nExplanation:\nJob1 and Job3 can be done with a maximum profit of 60 (20+40).\n\nApproach:\n- We create a vector of pairs 'jobs' to store the profit and deadline of each job.\n- We sort the 'jobs' vector in non-increasing order of profits.\n- We initialize a vector 'deadline' of size 'n+1' and set all elements to -1.\n- We also initialize variables 'ans' and 'cnt' to 0.\n- We iterate over the 'jobs' vector.\n  - For each job, we get the deadline and profit.\n  - We check from the deadline to 1 (in reverse order) if there is any slot available to schedule the job.\n  - If we find an available slot, we mark it as scheduled by setting 'deadline[dead]' to 1, increment 'cnt' and add the profit to 'ans'.\n- Finally, we return a vector containing 'cnt' and 'ans' as the number of jobs done and the maximum profit.\n\nComplexity Analysis:\n- The time complexity of this approach is O(NlogN), where N is the number of jobs.\n- This is due to the sorting operation on the 'jobs' vector based on profits.\n- The space complexity is O(N) as we use additional vectors to store the jobs and deadlines.\n\nCode:\n*/\n\nstatic bool comp(pair<int,int> a, pair<int,int> b) {\n    return a.first > b.first;\n}\n\nvector<int> JobScheduling(Job arr[], int n) {\n    vector<pair<int,int>> jobs;\n    for(int i = 0; i < n; i++) {\n        jobs.push_back({arr[i].profit, arr[i].dead});\n    }\n    sort(jobs.begin(), jobs.end(), comp);\n    vector<int> deadline(n+1, -1);\n    int ans = 0, cnt = 0;\n    for(int i = 0; i < n; i++) {\n        int dead = jobs[i].second;\n        int profit = jobs[i].first;\n        while(dead >= 1 && deadline[dead] != -1) {\n            dead--;\n        }\n        if(dead >= 1) {\n            deadline[dead] = 1;\n            cnt++;\n            ans += profit;\n        }\n    }\n    return {cnt, ans};\n}\n",
  " Kth smallest element in BST": "/*\nQuestion:\nGiven the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.\n\nExample:\nInput: root = [3,1,4,null,2], k = 1\nOutput: 1\n\nApproach:\nTo find the kth smallest value in a binary search tree (BST), we can perform an in-order traversal of the BST and keep track of the count of nodes visited so far. When the count becomes equal to k, we have found the kth smallest value.\n\n1. Perform in-order traversal of the BST.\n2. While traversing, keep track of the count of nodes visited and compare it with k.\n3. When count becomes equal to k, store the value of the current node as the answer.\n\nExample:\nConsider the BST [3, 1, 4, null, 2].\n\n          3\n         / \\\n        1   4\n         \\\n          2\n\nIn-order traversal of this BST gives: 1, 2, 3, 4. The 1st smallest value is 1, 2nd smallest value is 2, 3rd smallest value is 3, and so on.\n\nTime Complexity: O(log n + k)\n- The in-order traversal of a balanced BST takes O(log n) time on average.\n- Finding the kth smallest value takes O(k) time in the worst case when k is close to n (the number of nodes in the BST).\n- In the worst case, the total time complexity becomes O(log n + k).\n\nSpace Complexity: O(log n)\n- The space complexity is determined by the recursion stack during the in-order traversal, which has a maximum depth of log n for a balanced BST.\n\nCODE:-\n\n*/\n\nvoid inorder(TreeNode* root, int k, int& cnt, int& ans) {\n    if (!root) return;\n    inorder(root->left, k, cnt, ans);\n    cnt++;\n    if (cnt == k) {\n        ans = root->val;\n        return;\n    }\n    inorder(root->right, k, cnt, ans);\n}\n\nint kthSmallest(TreeNode* root, int k) {\n    int ans = -1, cnt = 0;\n    inorder(root, k, cnt, ans);\n    return ans;\n}\n",
  " Maximum XOR of two numbers": "/*\nQUESTION:\nGiven an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.\n\nExample:\n\nInput: nums = [3,10,5,25,2,8]\nOutput: 28\nExplanation: The maximum result is 5 XOR 25 = 28.\n\nApproach:\n1. Create a Trie data structure that stores binary representations of the given numbers.\n2. For each number, insert its binary representation into the Trie.\n3. For each number, find the maximum XOR that can be obtained with any other number using the Trie.\n   - Traverse the Trie for each bit of the number and try to find a bit in the other number's binary representation that gives the maximum XOR.\n   - If a complementary bit is found, set the corresponding bit in the result.\n4. Return the maximum XOR found.\n\nComplexity Analysis:\n- The Trie insertion and search operations both take O(32) time since we are dealing with 32 bits (maximum). Therefore, the time complexity of the solution is O(n * 32), which simplifies to O(n).\n- The space complexity is also O(n) since we are storing the Trie.\n\nCODE:\n*/\n\nclass TrieNode {\npublic:\n    TrieNode* child[2];\n    \n    TrieNode() {\n        for(int i = 0; i < 2; i++) {\n            this->child[i] = NULL;\n        }\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(int num) {\n        TrieNode* curr = root;\n        for(int i = 31; i >= 0; i--) {\n            int bit = (num >> i) & 1;\n            if(!curr->child[bit]) {\n                curr->child[bit] = new TrieNode();\n            }\n            curr = curr->child[bit];\n        }\n    }\n    \n    int findMax(int num) {\n        TrieNode* curr = root;\n        int maxNum = 0;\n        for(int i = 31; i >= 0; i--) {\n            int bit = (num >> i) & 1;\n            if(curr->child[1 - bit]) {\n                maxNum = maxNum | (1 << i);\n                curr = curr->child[1 - bit];\n            } else {\n                curr = curr->child[bit];\n            }\n        }\n        return maxNum;\n    }\n};\n\nclass Solution {\npublic:\n    int findMaximumXOR(vector<int>& nums) {\n        Trie* tr = new Trie();\n        for(auto i : nums) {\n            tr->insert(i);\n        }\n        int ans = 0;\n        for(auto i : nums) {\n            int temp = tr->findMax(i);\n            ans = max(ans, temp);\n        }\n        return ans;\n    }\n};\n\n",
  " Median in a stream": "/*\nQuestion:\nThe median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n\nImplement the MedianFinder class:\n\nMedianFinder() initializes the MedianFinder object.\nvoid addNum(int num) adds the integer num from the data stream to the data structure.\ndouble findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.\n*/\n\n/*\nApproach:\n1. Use two priority queues: a max heap to store the smaller half of the numbers and a min heap to store the larger half of the numbers.\n2. When adding a new number:\n   - If the max heap is empty or the number is smaller than the top element of the max heap, push it into the max heap.\n   - Otherwise, push it into the min heap.\n   - Balance the heaps by transferring the top element of the larger heap to the smaller heap if the size difference between the heaps exceeds 1.\n3. When finding the median:\n   - If the sizes of the heaps are equal, calculate the average of the top elements of both heaps.\n   - Otherwise, return the top element of the heap with a larger size.\nComplexity Analysis:\n\nThe time complexity for adding a number to the MedianFinder is O(log N), where N is the total number of elements added so far. This is because we need to maintain the two heaps and balance them if necessary, which takes logarithmic time.\nThe time complexity for finding the median using the findMedian() function is O(1). This is because we directly access the top elements of the heaps, which takes constant time.\nThe space complexity is O(N), where N is the total number of elements added. This is because we need to store the elements in the two priority queues.\n\nCODE:-\n\n*/\n    \npublic:\n    MedianFinder() {}\n    \n    void addNum(int num) {\n        if (maxpq.empty() || num < maxpq.top())\n            maxpq.push(num);\n        else\n            minpq.push(num);\n        \n        // Balancing the heaps\n        int a = maxpq.size();\n        int b = minpq.size();\n        if (abs(a - b) > 1) {\n            if (a > b) {\n                int temp = maxpq.top();\n                maxpq.pop();\n                minpq.push(temp);\n            }\n            else {\n                int temp = minpq.top();\n                minpq.pop();\n                maxpq.push(temp);\n            }\n        }\n    }\n    \n    double findMedian() {\n        int a = maxpq.size();\n        int b = minpq.size();\n        if (a == b)\n            return (static_cast<double>(maxpq.top() + minpq.top()) / 2);\n        if (a > b)\n            return maxpq.top();\n        return minpq.top();\n    }\n};\n\n",
  " Minimum Path in Triangle": "/*\nQUESTION:-\nGiven a triangle array, return the minimum path sum from top to bottom.\n\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\n\nExample:\nInput: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\nOutput: 11\nExplanation: The triangle looks like:\n   2\n  3 4\n 6 5 7\n4 1 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n\nApproach:\n1. We can solve this problem using dynamic programming with memoization (top-down approach).\n2. We define a helper function fmemo(i, j, n, tri, dp) that calculates the minimum path sum from the current cell (i, j) to the bottom of the triangle.\n3. The function checks if the minimum path sum for the current cell is already calculated and stored in the dp array. If yes, it returns the value from dp.\n4. If i is equal to n-1, it means we are at the last row of the triangle, so the minimum path sum is the value in the current cell (tri[i][j]).\n5. Otherwise, the function calculates the minimum path sum for the current cell by taking the minimum of the minimum path sums from the cells directly below (i+1, j) and (i+1, j+1), and then adding the value in the current cell (tri[i][j]).\n6. The result is stored in the dp array to avoid recomputation when the function is called with the same parameters again.\n\nComplexity Analysis:\n- The time complexity of the fmemo function is O(n^2) because we are calculating the minimum path sum for each cell only once and storing it in the dp array.\n- The space complexity is also O(n^2) to store the dp array.\n\n*/\n\n// Memoization\nint fmemo(int i, int j, int n, vector<vector<int>>& tri, vector<vector<int>>& dp) {\n    if (dp[i][j] != -1)\n        return dp[i][j];\n\n    if (i == n - 1)\n        return dp[i][j] = tri[i][j];\n\n    int a = fmemo(i + 1, j, n, tri, dp);\n    int b = fmemo(i + 1, j + 1, n, tri, dp);\n    return dp[i][j] = min(a, b) + tri[i][j];\n}\n\n// Tabulation\nint ftab(int n, vector<vector<int>>& tri){\n    vector<vector<int>> dp(n,vector<int>(n));\n    for(int i=n-1; i>=0; i--){\n        for(int j=i; j>=0; j--){\n            if(i==n-1){\n                dp[i][j] = tri[i][j];\n                continue;\n            }\n            int a = dp[i+1][j];\n            int b = dp[i+1][j+1];\n            dp[i][j] = min(a,b)+tri[i][j];\n        }\n    }\n    return dp[0][0];\n}\n\n// Space Optimization\nint fopt(int n, vector<vector<int>>& tri){\n    vector<int> prev(n);\n    for(int i=n-1; i>=0; i--){\n        vector<int> curr(n);\n        for(int j=i; j>=0; j--){\n            if(i==n-1){\n                curr[j] = tri[i][j];\n                continue;\n            }\n            int a = prev[j];\n            int b = prev[j+1];\n            curr[j] = min(a,b)+tri[i][j];\n        }\n        prev = curr;\n    }\n    return prev[0];\n}\n\nint minimumTotal(vector<vector<int>>& triangle) {\n    int n = triangle.size();\n    vector<vector<int>> dp(n, vector<int>(n, -1));\n    return fmemo(0, 0, n, triangle, dp);\n}\n",
  " Minimum steps to make string palindrome": "/*\nQUESTION:\nGiven a string s. In one step you can insert any character at any index of the string.\nReturn the minimum number of steps to make s palindrome.\n\nAPPROACH:\n- The problem can be reduced to finding the minimum number of insertions needed to make a string a palindrome.\n- We can find the Longest Common Subsequence (LCS) between the given string and its reverse.\n- The length of the LCS gives us the length of the longest palindromic subsequence in the string.\n- The minimum number of insertions required to make the string a palindrome is equal to the difference between the length of the string and the length of the LCS.\n- Return this difference as the answer.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of finding the LCS is O(n^2), where n is the length of the string.\n- The space complexity is O(n^2) due to the dp array.\n- Overall, the algorithm runs in O(n^2) time and O(n^2) space.\n\nCODE:\n*/\n\n\nint fmemo(int i, int j, string &s, string &r, vector<vector<int>> &dp) {\n    if (i < 0 || j < 0)\n        return 0;\n\n    if (dp[i][j] != -1)\n        return dp[i][j];\n\n    if (s[i] == r[j])\n        return dp[i][j] = fmemo(i - 1, j - 1, s, r, dp) + 1;\n    else\n        return dp[i][j] = max(fmemo(i - 1, j, s, r, dp), fmemo(i, j - 1, s, r, dp));\n}\n\nint minInsertions(string s) {\n    int n = s.size();\n    string r = s;\n    reverse(r.begin(), r.end());\n    vector<vector<int>> dp(n, vector<int>(n, -1));\n    int lcs = fmemo(n - 1, n - 1, s, r, dp);\n    return n - lcs;\n}\n",
  " Number of LIS": "/*\nQUESTION:\nGiven an integer array nums, return the number of longest increasing subsequences.\nNotice that the sequence has to be strictly increasing.\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- Compute two DP arrays: one for the length of the longest increasing subsequence ending at index i (`dp`) and another for the count of such subsequences (`cnt`).\n- Iterate through the array and for each index i, iterate through all previous indices (prev) from 0 to i-1.\n- If nums[prev] < nums[i], update the `dp` and `cnt` arrays accordingly.\n- Find the maximum value in the `dp` array to get the length of the longest increasing subsequence (`lis`).\n- Iterate through the `dp` array again and count the number of subsequences that have the length equal to `lis`.\n- Return the total count of such subsequences.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n^2), where n is the length of the input array nums.\n- The space complexity is O(n) due to the dp and cnt arrays.\n- Overall, the algorithm runs in O(n^2) time and O(n) space.\n\nCODE:\n*/\n\nint ftab(int n, vector<int>& nums) {\n    vector<int> dp(n, 1);\n    vector<int> cnt(n, 1);\n    \n    for (int i = 0; i < n; i++) {\n        for (int prev = 0; prev < i; prev++) {\n            if (nums[prev] < nums[i]) {\n                if (dp[i] == dp[prev] + 1) {\n                    cnt[i] += cnt[prev];\n                } else if (dp[prev] + 1 > dp[i]) {\n                    dp[i] = dp[prev] + 1;\n                    cnt[i] = cnt[prev];\n                }\n            }\n        }\n    }\n    \n    int lis = *max_element(dp.begin(), dp.end());\n    int ans = 0;\n    \n    for (int i = 0; i < n; i++) {\n        if (dp[i] == lis) {\n            ans += cnt[i];\n        }\n    }\n    \n    return ans;\n}\n\nint findNumberOfLIS(vector<int>& nums) {\n    int n = nums.size();\n    return ftab(n, nums);\n}\n",
  " Palindorme Partionting 2": "/*\nQUESTION:\nGiven a string s, partition s such that every substring of the partition is a palindrome.\nReturn the minimum cuts needed for a palindrome partitioning of s.\n\nExample:\nInput: s = \"aab\"\nOutput: 1\nExplanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- Define a 1D DP array `dp` where dp[i] represents the minimum cuts needed for a palindrome partitioning of s starting from index i.\n- Iterate through each index i of the string.\n- For each index i, iterate through all possible ending indices j such that j is in the range [i, n).\n- Check if the substring from index i to j is a palindrome. If yes, update the dp[i] value by taking the minimum of its current value and dp[j + 1] + 1.\n- Finally, return dp[0] - 1, which represents the minimum cuts needed for a palindrome partitioning of the entire string.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n^2), where n is the length of the string.\n- The space complexity is O(n) due to the dp array.\n- Overall, the algorithm runs in O(n^2) time and O(n) space.\n\nCODE:\n*/\n\nbool isPalindrome(int i, int j, string& s){\n    while(i < j){\n        if(s[i] != s[j]) return false;\n        i++; j--;\n    }\n    return true;\n}\n\nint fmemo(int i, string& s, vector<int>& dp){\n    if(i == s.size()) return 0;\n\n    if(dp[i] != -1) return dp[i];\n\n    int ans = 1e9;\n    for(int j = i; j < s.size(); j++){\n        if(isPalindrome(i, j, s)){\n            int cost = 1 + fmemo(j + 1, s, dp);\n            ans = min(ans, cost);\n        }\n    }\n    return dp[i] = ans;\n}\n\nint minCut(string s) {\n    int n = s.size();\n    vector<int> dp(n, -1);\n    return fmemo(0, s, dp) - 1;\n}\n",
  " Partition with given difference": "/*\nQUESTION:\nGiven an array arr, partition it into two subsets(possibly empty) \nsuch that their union is the original array. Let the sum of the \nelements of these two subsets be S1 and S2. \n\nGiven a difference d, count the number of partitions in which S1 is \ngreater than or equal to S2 and the difference S1 and S2 is equal to d. \nSince the answer may be large, return it modulo 10^9 + 7.\n\nExample 1:\nInput:\nn = 4, d = 3\narr[] = {5, 2, 6, 4}\nOutput: 1\nExplanation:\nThere is only one possible partition of this array. \nPartition: {6, 4}, {5, 2}. The subset difference between subset sums is: (6 + 4) - (5 + 2) = 3.\n\nAPPROACH:\n- We'll use a similar approach as used in the subset sum count problem.\n- Initialize dp[i][j] as the number of subsets with sum 'j' using the first 'i' elements.\n- Base cases:\n  - dp[0][0] = 1 since an empty subset has a sum of 0.\n  - dp[i][0] = 1 since there's always an empty subset.\n- For each element 'arr[i]' and each possible sum 'j' from 1 to 'sum':\n  - dp[i][j] = dp[i-1][j] (not taking the current element)\n  - if 'arr[i]' is less than or equal to 'j', then dp[i][j] += dp[i-1][j-arr[i]] (taking the current element)\n- Initialize 'ans' as 0.\n- For each possible subset sum 'i':\n  - Check if the difference between (i - (sum - i)) is equal to 'd'.\n  - If it is, add the result of fmemo(n, i, arr, dp) to 'ans'.\n- Return 'ans' % mod which represents the answer.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of the solution is O(n * sum), where 'n' is the number of elements and 'sum' is the required sum.\n- The space complexity is O(n * sum) for the dp array.\n\nCODE:\n*/\n\n\nconst int mod = 1e9 + 7;\n\n// Memoization\nint fmemo(int i, int tar, int arr[], vector<vector<int>>& dp){\n    if(i == 0){\n        if(tar == 0 && arr[i] == 0) return dp[i][tar] = 2;\n        if(tar == 0) return dp[i][tar] = 1;\n        return dp[i][tar] = (arr[i] == tar);\n    }\n\n    if(dp[i][tar] != -1) return dp[i][tar];\n\n    int take = 0;\n    if(arr[i] <= tar) take = fmemo(i - 1, tar - arr[i], arr, dp);\n    int notake = fmemo(i - 1, tar, arr, dp);\n    return dp[i][tar] = (take + notake) % mod;\n}\n\n// Tabulation\nint ftab(int n, int sum, int arr[]){\n    vector<vector<int>> dp(n,vector<int>(sum+1));\n    for(int i=0; i<n; i++){\n        for(int tar=0; tar<=sum; tar++){\n            if(i==0){\n                if(tar==0 && arr[i]==0) dp[i][tar] = 2;\n                else if(tar==0) dp[i][tar] = 1;\n                else dp[i][tar] =  (arr[i]==tar);\n                continue;\n            }\n            int take = 0;\n            if(arr[i] <= tar) take = dp[i-1][tar-arr[i]];\n            int notake = dp[i-1][tar];\n            dp[i][tar] =  (take+notake)%mod;\n        }\n    }\n    return dp[n-1][sum];\n}\n\n// Space Optimization\nint fopt(int n, int sum, int arr[]){\n    vector<int> prev(sum+1);\n    for(int i=0; i<n; i++){\n        vector<int> curr(sum+1);\n        for(int tar=0; tar<=sum; tar++){\n            if(i==0){\n                if(tar==0 && arr[i]==0) curr[tar] = 2;\n                else if(tar==0) curr[tar] = 1;\n                else curr[tar] =  (arr[i]==tar);\n                continue;\n            }\n            int take = 0;\n            if(arr[i] <= tar) take = prev[tar-arr[i]];\n            int notake = prev[tar];\n            curr[tar] =  (take+notake)%mod;\n        }\n        prev = curr;\n    }\n    return prev[sum];\n}\n\nint countPartitions(int n, int d, vector<int>& arr) {\n    int sum = 0, ans = 0;\n    for(auto i:arr) sum += i;\n    vector<vector<int>> dp(n, vector<int>(sum + 1, -1));\n    for(int i = 0; i <= sum; i++){\n        if(i - (sum - i) == d)\n            ans = (ans + fmemo(n - 1, i, arr, dp)) % mod;\n    }\n    return ans;\n}\n",
  " Path with minimum effort": "/*QUESTION:\n\nYou are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.\n\nA route's effort is the maximum absolute difference in heights between two consecutive cells of the route.\n\nReturn the minimum effort required to travel from the top-left cell to the bottom-right cell.\n\nExample:\n\nInput: heights = [[1,2,2],[3,8,2],[5,3,5]]\nOutput: 2\nExplanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.\nThis is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.\n\nAPPROACH:\n- We can use Dijkstra's algorithm to find the minimum effort path from the top-left cell to the bottom-right cell.\n- We will maintain a priority queue to keep track of cells with the minimum effort needed.\n- Start from the top-left cell with effort 0 and explore neighboring cells in all four directions.\n- Calculate the effort required to move to a neighboring cell and update the effort if it is lower than the current value.\n- Continue this process until we reach the bottom-right cell.\n\nCOMPLEXITY ANALYSIS:\n- Since we are using Dijkstra's algorithm, the time complexity is O((N*M) * log(N*M)), where N is the number of rows and M is the number of columns in the 2D array.\n- The space complexity is O(N*M) to store the distance values.\n\nCODE:\n*/\n\ntypedef pair<int, pair<int, int>> tri;\n\nint minimumEffortPath(vector<vector<int>>& heights) {\n    int n = heights.size(), m = heights[0].size();\n    vector<vector<int>> dis(n, vector<int>(m, 1e9));\n\n    priority_queue<tri, vector<tri>, greater<tri>> pq;\n    dis[0][0] = 0;\n    pq.push({0, {0, 0}});\n\n    vector<int> dr = {0, 0, 1, -1};\n    vector<int> dc = {1, -1, 0, 0};\n\n    int ans = INT_MIN;\n    while (!pq.empty()) {\n        tri t = pq.top();\n        pq.pop();\n        int x = t.second.first, y = t.second.second;\n        ans = max(ans, t.first);\n        if (x == n - 1 && y == m - 1) return ans;\n        for (int i = 0; i < 4; i++) {\n            int nx = x + dr[i], ny = y + dc[i];\n            if (nx >= 0 && nx < n && ny >= 0 && ny < m && (dis[nx][ny] > abs(heights[x][y] - heights[nx][ny]))) {\n                dis[nx][ny] = abs(heights[x][y] - heights[nx][ny]);\n                pq.push({dis[nx][ny], {nx, ny}});\n            }\n        }\n    }\n    return -1; // If the bottom-right cell cannot be reached\n}\n",
  " Postfix to infix": "/*\nQUESTION:\nYou are given a string that represents the postfix form of a valid mathematical expression. Convert it to its infix form.\n\nExample:\nInput:\nab*c+ \nOutput: \n((a*b)+c)\nExplanation: \nThe above output is its valid infix form.\n\nAPPROACH:\n- We can use a stack to convert the postfix expression to infix.\n- We iterate through each character of the input string.\n- If the character is an alphanumeric character, we push it onto the stack.\n- If the character is an operator, we pop two operands from the stack, concatenate them with the operator in the proper order (operand1 + operator + operand2), and push the result back onto the stack.\n- After iterating through all characters, the top of the stack will contain the final infix expression.\n\nCODE:\n*/\n\nbool isAlphaNumeric(char ch) {\n    return ('A' <= ch && ch <= 'Z') || ('a' <= ch && ch <= 'z') || ('0' <= ch && ch <= '9');\n}\n\nstring postToInfix(string exp) {\n    stack<string> st;\n    \n    for (int i = 0; i < exp.size(); i++) {\n        char ch = exp[i];\n        \n        if (isAlphaNumeric(ch)) {\n            string temp = \"\";\n            temp += ch;\n            st.push(temp);\n        } else {\n            string a = st.top();\n            st.pop();\n            string b = st.top();\n            st.pop();\n            \n            st.push(\"(\" + b + ch + a + \")\");\n        }\n    }\n    \n    return st.top();\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- The time complexity of the postToInfix function is O(N), where N is the length of the input string.\n- We iterate through each character once, and the operations performed inside the loop are all constant time.\n- The space complexity is O(N) as we use a stack to store operands.\n*/\n",
  " Postorder Traversal": "/*\nQuestion:\nGiven the root of a binary tree, return the postorder traversal of its nodes' values.\n\nApproach:\n- postorder traversal visits the left subtree first, followed by the right subtree, and then the root node.\n- We can solve this problem recursively by following the postorder traversal order.\n\nComplexity Analysis:\n- Since we are visiting each node once, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(N) as we are using the call stack for recursion.\n\nCode:\n*/\n\nvector<int> postorderTraversal(TreeNode* root) {\n    vector<int> ans;\n    solve(root, ans);\n    return ans;\n}\n\nvoid solve(TreeNode* root, vector<int>& ans) {\n    if (!root) {\n        return;\n    }\n    solve(root->left, ans);\n    ans.push_back(root->val);\n    solve(root->right, ans);\n}\n",
  " Same Tree": "/*\nQuestion:\nGiven the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n\nApproach:\n- The trees are considered the same if they have the same structure (i.e., same nodes in the same arrangement) and the corresponding nodes have the same values.\n- We can use a recursive approach to check if the trees are the same.\n- The trees are the same if both trees are empty (reached the end of the tree) or both trees are non-empty and the current nodes have the same value, and the left subtrees and right subtrees are the same.\n- We can check if the trees are the same by comparing the values of the current nodes and recursively checking the left subtrees and right subtrees.\n\nComplexity Analysis:\n- Since we visit each node once and perform constant time operations for each node, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(H), where H is the height of the binary tree. In the worst case, the tree can be skewed and have a height of N, resulting in O(N) space complexity. In the best case, the tree is balanced and has a height of log(N), resulting in O(log(N)) space complexity.\n\nCode:\n*/\n\nbool isSameTree(TreeNode* p, TreeNode* q) {\n    if (!p && !q) {\n        return true; // Both trees are empty, they are the same\n    }\n    if (!p || !q) {\n        return false; // One tree is empty and the other is not, they are different\n    }\n    return (p->val == q->val) && isSameTree(p->left, q->left) && isSameTree(p->right, q->right);\n}\n",
  " Shortest Palindrome": "/*\nQUESTION:\nYou are given a string s. You can convert s to a palindrome by adding characters in front of it.\nReturn the shortest palindrome you can find by performing this transformation.\n\nExample 1:\nInput: s = \"aacecaaa\"\nOutput: \"aaacecaaa\"\n\nApproach:\n1. We can solve this problem using the KMP (Knuth-Morris-Pratt) algorithm.\n2. First, we reverse the string s and store it in the string rev.\n3. We concatenate s and rev with a special character '$' in between, creating the string temp.\n4. We calculate the LPS (Longest Prefix Suffix) array for the string temp using KMP.\n5. The last value in the LPS array, lps.back(), represents the length of the longest prefix of temp that is also a suffix.\n6. We extract the substring of s starting from index lps.back() to the end and reverse it.\n7. Finally, we concatenate the reversed substring with s and return the result as the shortest palindrome.\n\nComplexity Analysis:\n- The time complexity of this solution is O(n), where n is the length of the string s.\n- The space complexity is O(n) to store the LPS array.\n\nCODE:\n*/\n\nvector<int> kmp(string& s) {\n    int n = s.size();\n    vector<int> pi(n);\n    for(int i = 1; i < n; i++) {\n        int j = pi[i - 1];\n        while(j > 0 && s[i] != s[j]) {\n            j = pi[j - 1];\n        }\n        if(s[i] == s[j]) {\n            j++;\n        }\n        pi[i] = j;\n    }\n    return pi;\n}\n\nstring shortestPalindrome(string s) {\n    string rev = s;\n    reverse(rev.begin(), rev.end());\n    string temp = s + \"$\" + rev;\n    vector<int> lps = kmp(temp);\n    string toAdd = s.substr(lps.back());\n    reverse(toAdd.begin(), toAdd.end());\n    return toAdd + s;\n}\n",
  " Sum of subarray minimum": "/*QUESTION:\nGiven an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.\n\nAPPROACH:\nTo find the sum of the minimums of all subarrays, we can use the concept of previous smaller and next smaller elements for each element in the array.\n1. Define two helper functions:\n   - `prevSmaller(arr)`: Returns an array that contains the index of the previous smaller element for each element in `arr`. If no smaller element exists, the index is set to -1.\n   - `nextSmaller(arr)`: Returns an array that contains the index of the next smaller element for each element in `arr`. If no smaller element exists, the index is set to the length of the array.\n2. Initialize a variable `ans` to 0 to store the final sum.\n3. Iterate over each element `arr[i]` in the array:\n   a. Calculate the number of subarrays in which `arr[i]` is the minimum element.\n      - The number of subarrays with `arr[i]` as the minimum element on the left side is `i - prevS[i]`.\n      - The number of subarrays with `arr[i]` as the minimum element on the right side is `nextS[i] - i`.\n   b. Add `(leftElements * rightElements * arr[i]) % mod` to `ans`, where `mod` is `1e9 + 7`.\n4. Return the final value of `ans` as the sum of minimums of all subarrays modulo `1e9 + 7`.\n\nCODE:*/\nvector<int> prevSmaller(vector<int>& arr){\n    stack<int> st;\n    vector<int> ans(arr.size(), -1);\n    for(int i = 0; i < arr.size(); i++){\n        while(!st.empty() && arr[st.top()] > arr[i])\n            st.pop();\n        if(!st.empty())\n            ans[i] = st.top();\n        st.push(i);\n    }\n    return ans;\n}\n\nvector<int> nextSmaller(vector<int>& arr){\n    stack<int> st;\n    vector<int> ans(arr.size(), arr.size());\n    for(int i = arr.size()-1; i >= 0; i--){\n        while(!st.empty() && arr[st.top()] >= arr[i])\n            st.pop();\n        if(!st.empty())\n            ans[i] = st.top();\n        st.push(i);\n    }\n    return ans;\n}\n\nint sumSubarrayMins(vector<int>& arr) {\n    vector<int> prevS = prevSmaller(arr);\n    vector<int> nextS = nextSmaller(arr);\n    long long ans = 0;\n    int mod = 1e9 + 7;\n\n    for(int i = 0; i < arr.size(); i++){\n        long long leftElements = i - prevS[i];\n        long long rightElements = nextS[i] - i;\n        // this formula is arrived by mathematical calculation\n        ans += ((leftElements % mod) * (rightElements % mod) * (arr[i] % mod)) % mod;\n    }\n\n    return (int)ans;\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(N), where N is the number of elements in the array `arr`. We iterate through the array twice to calculate the previous smaller and next smaller elements.\n- The space complexity is O(N) as we use additional space to store the previous smaller and next smaller elements.\n*/\n",
  "Check_If_array_is_sorted": "/*\nQUESTION:\nGiven an array arr[] of size N, check if it is sorted in non-decreasing order or not.\n\nAPPROACH:\n- We can use a recursive approach to check if the array is sorted in non-decreasing order or not.\n- The base case for recursion is when the subarray has only one element or when the subarray is empty, in which case we consider it to be sorted.\n- For a non-empty subarray, we compare the middle element with its next element. If they are in non-decreasing order and both the left and right subarrays are also sorted, then we consider the entire array to be sorted.\n- We recursively check the left and right subarrays using the same approach.\n- If any of the recursive calls returns false, we return false. Otherwise, we return true.\n\nExample:\n\nInput:\nN = 5\narr[] = {10, 20, 30, 40, 50}\nOutput: 1\nExplanation: The given array is sorted.\n\nCODE:\n*/\n\nbool solve(int arr[], int low, int high) {\n    if (low >= high)\n        return true;\n    \n    int mid = low + (high - low) / 2;\n    if (arr[mid] <= arr[mid + 1] && solve(arr, low, mid) && solve(arr, mid + 1, high))\n        return true;\n    \n    return false;\n}\n\nbool arraySortedOrNot(int arr[], int n) {\n    return solve(arr, 0, n - 1);\n}\n\n// TIME COMPLEXITY: O(log N)\n// SPACE COMPLEXITY: O(log N) (for recursion stack)\n",
  "Count_nodes_in_loop": "/*\nQUESTION:-\nGiven a linked list of size N. The task is to complete the function countNodesinLoop() that checks whether a given Linked List contains a loop or not and if the loop is present then return the count of nodes in a loop or else return 0. C is the position of the node to which the last node is connected. If it is 0 then no loop.\n\nExample 1:\nInput: N = 10\nvalue[]={25,14,19,33,10,21,39,90,58,45}\nC = 4\nOutput: 7\nExplanation: The loop is 45->33. So\nlength of loop is 33->10->21->39->\n90->58->45 = 7. The number 33 is\nconnected to the last node to form the\nloop because according to the input the\n4th node from the beginning(1 based\nindex) will be connected to the last\nnode for the loop.\n\nExample 2:\nInput: N = 2\nvalue[] = {1,0}\nC = 1\nOutput: 2\nExplanation: The length of the loop\nis 2.\n*/\n\n/*\nAPPROACH:\nTo detect a loop in a linked list, we can use the Floyd's cycle-finding algorithm, also known as the \"tortoise and hare\" algorithm.\nInitialize two pointers, slow and fast, to the head of the linked list.\nMove the slow pointer one step at a time and the fast pointer two steps at a time.\nIf the linked list has a loop, the fast pointer will eventually catch up to the slow pointer.\nIn other words, if there is a loop, the two pointers will meet at some point.\nOnce the two pointers meet, move one of the pointers back to the meeting point and start counting the number of nodes in the loop.\nContinue moving the pointer until it reaches the meeting point again, counting the nodes along the way.\nReturn the count of nodes in the loop.\nIf the fast pointer reaches the end of the list (i.e., it becomes NULL or reaches a node with a NULL next pointer), then there is no loop in the linked list, and we can return 0.\n*/\n\nint countNode(struct Node* slow, struct Node* fast) {\n    int cnt = 1;\n    slow = slow->next;\n    while (fast != slow) {\n        slow = slow->next;\n        cnt++;\n    }\n    return cnt;\n}\n\nint countNodesinLoop(struct Node* head) {\n    struct Node* slow = head;\n    struct Node* fast = head;\n    while (fast && fast->next) {\n        slow = slow->next;\n        fast = fast->next->next;\n        if (fast == slow)\n            return countNode(slow, fast);\n    }\n    return 0;\n}\n\n// TIME COMPLEXITY: O(N)\n// SPACE COMPLEXITY: O(1)\n\n\n",
  "Count_the_number_of_substrings_with_k_unique_characters": "/*Given a string of lowercase alphabets, count all possible substrings (not necessarily distinct) that have exactly k distinct characters. \n\nExample 1:\n\nInput:\nS = \"aba\", K = 2\nOutput:\n3\nExplanation:\nThe substrings are:\n\"ab\", \"ba\" and \"aba\".\n\nExample 2:\n\nInput: \nS = \"abaaca\", K = 1\nOutput:\n7\nExplanation:\nThe substrings are:\n\"a\", \"b\", \"a\", \"aa\", \"a\", \"c\", \"a\". \n\nApproach:\n1. We can solve this problem using the sliding window technique.\n2. Initialize a variable ans to keep track of the count of substrings with exactly k distinct characters.\n3. Create an unordered_map mp to store the count of characters in the current window.\n4. Initialize two pointers i and j to mark the start and end of the window, both initially pointing to the start of the string.\n5. Iterate j from the start to the end of the string:\n   - Increment the count of the current character s[j] in mp.\n   - If the number of distinct characters in mp exceeds k, move the start pointer i towards the right until the number of distinct characters becomes k again.\n   - Update the ans by adding the length of the current window (j - i + 1) to it.\n6. Return the value of ans.\n\nCode:*/\n\nlong long int substrAtmostK(string s, int k) {\n    long long int ans = 0;\n    unordered_map<char, int> mp;\n    int i = 0;\n    for (int j = 0; j < s.size(); j++) {\n        mp[s[j]]++;\n        \n        while (mp.size() > k) {\n            mp[s[i]]--;\n            if (mp[s[i]] == 0)\n                mp.erase(s[i]);\n            i++;\n        }\n        \n        ans += j - i + 1;\n    }\n    return ans;\n}\n\nlong long int substrCount(string s, int k) {\n    long long int atmostk = substrAtmostK(s, k);\n    long long int atmostk_1 = substrAtmostK(s, k - 1);\n    return atmostk - atmostk_1;\n}\n\n/*Time Complexity: O(N), where N is the length of the input string.\nSpace Complexity: O(K), where K is the number of distinct characters.*/\n\n",
  "Find_smallest_integer": "/*\nQuestion:\nYou are given an array of integers nums and an integer threshold. We need to find the smallest divisor\nsuch that the result of dividing each element of the array by the divisor and summing up the results\nis less than or equal to the threshold.\n\nExample:\nInput: nums = [1,2,5,9], threshold = 6\nOutput: 5\nExplanation: We can get a sum of 17 (1+2+5+9) if the divisor is 1.\nIf the divisor is 4, we can get a sum of 7 (1+1+2+3).\nIf the divisor is 5, the sum will be 5 (1+1+1+2).\nThe smallest divisor that gives a sum less than or equal to the threshold is 5.\n\nApproach:\n- Start with a range of possible divisors from 1 to the maximum value in the array.\n- Use binary search to find the smallest divisor that satisfies the given condition.\n- Check the midpoint of the range and calculate the sum of divisions using the current divisor.\n- If the sum is less than or equal to the threshold, update the answer and continue searching in the lower half of the range.\n- If the sum is greater than the threshold, search in the upper half of the range.\n- Repeat this process until the range is narrowed down to a single value, which will be the smallest divisor.\n\nCode:\n*/\n\nint smallestDivisor(vector<int>& nums, int threshold) {\n    int ans = -1;\n    int low = 1, high = INT_MIN;\n\n    // Finding the maximum value in the array\n    for (auto it : nums)\n        high = max(high, it);\n\n    // Binary search for the smallest divisor\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        int sum = 0;\n        for (auto num : nums) {\n            sum += (num + mid - 1) / mid;\n        }\n        if (sum <= threshold) {\n            ans = mid;\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\n\n// Time Complexity: O(n log(max(nums)))\n// Space Complexity: O(1)\n",
  "Isomorphic_string": "/*\nQuestion:\nGiven two strings s and t, determine if they are isomorphic.\nTwo strings s and t are isomorphic if the characters in s can be replaced to get t.\nAll occurrences of a character must be replaced with another character while preserving the order of characters.\nNo two characters may map to the same character, but a character may map to itself.\n\nApproach:\n1. Initialize two maps to store the mapping of characters from s to t and from t to s.\n2. Iterate through each character in s and t simultaneously.\n3. If the current characters in s and t are already mapped differently, return false.\n4. If the current characters in s and t are not mapped yet, add them to the maps.\n5. If the current characters in s and t are already mapped to each other, continue to the next characters.\n6. If all characters have been iterated and no inconsistencies are found, return true.\n\nCode:\n*/\n\nbool isIsomorphic(string s, string t) {\n    unordered_map<char, char> mps;\n    unordered_map<char, char> mpt;\n\n    for (int i = 0; i < s.size(); i++) {\n        if (mps.find(s[i]) == mps.end() && mpt.find(t[i]) == mpt.end()) {\n            mps[s[i]] = t[i];\n            mpt[t[i]] = s[i];\n        } else if (mps[s[i]] != t[i] || mpt[t[i]] != s[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/*\nTime Complexity: O(n), where n is the length of the input strings s and t.\n- We iterate through each character of s and t once.\n\nSpace Complexity: O(m), where m is the number of unique characters in the input strings s and t.\n- In the worst case, all characters in s and t are unique, and we need to store mappings for all of them.\n- The space complexity can also be considered as O(1) since the maximum number of unique characters is limited (26 English alphabets).\n*/\n\n",
  "Largest_subarray_with_0sum": "/*\nQUESTION:\nGiven an array with both positive and negative integers, we need to compute the length of the largest subarray with a sum of 0.\n\nExample:\nInput:\nN = 8\nA[] = {15, -2, 2, -8, 1, 7, 10, 23}\nOutput: 5\nExplanation: The largest subarray with a sum of 0 will be -2, 2, -8, 1, 7.\n\nAPPROACH:\nTo find the length of the largest subarray with a sum of 0, we can use a technique called prefix sum.\n1. Create a prefix sum array of the same size as the input array.\n2. Initialize a map to store the prefix sum and its corresponding index. Initialize it with an entry for prefix sum 0 and index -1.\n3. Iterate through the input array and calculate the prefix sum by adding each element.\n4. For each prefix sum encountered, check if it exists in the map. If it does, update the answer by taking the maximum of the current answer and the difference between the current index and the index stored in the map for that prefix sum.\n5. If the prefix sum is not found in the map, add it to the map with its corresponding index.\n6. Finally, return the answer as the length of the largest subarray with a sum of 0.\n\nCODE:\n*/\n\nint maxLen(vector<int> &A, int n)\n{\n    unordered_map<int, int> mp;\n    mp[0] = -1;\n    int pref_sum = 0;\n    int ans = 0;\n\n    for (int i = 0; i < n; i++)\n    {\n        pref_sum += A[i];\n        if (mp.find(pref_sum) != mp.end())\n        {\n            ans = max(ans, i - mp[pref_sum]);\n        }\n        else\n        {\n            mp[pref_sum] = i;\n        }\n    }\n\n    return ans;\n}\n\n/*\nTIME COMPLEXITY: O(n), where n is the size of the input array A.\nSPACE COMPLEXITY: O(n), as we are using a map to store the prefix sums and their corresponding indices.\n*/\n",
  "N queens": "/**\n * Question: The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n * Given an integer n, return all distinct solutions to the n-queens puzzle.\n *\nExample 1:\n\n\nInput: n = 4\nOutput: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n\n * Approach:\n * 1. Use backtracking to solve the n-queens puzzle.\n * 2. Start with an empty chessboard and try placing queens in each row, ensuring that no two queens threaten each other.\n * 3. Use row, column, and diagonal constraints to validate the queen placements.\n * 4. If a valid configuration is found, add it to the list of solutions.\n *\n * Time Complexity: O(N!), where N is the input parameter representing the size of the chessboard.\n *   - In the worst case, there can be N! possible configurations to check.\n *   - However, with the pruning technique used in backtracking, the actual runtime is much less than N! in most cases.\n *\n * Space Complexity: O(N^2), where N is the input parameter representing the size of the chessboard.\n *   - The space is used to store the chessboard configuration and the auxiliary arrays for tracking the used columns and diagonals.\n */\n\nunordered_map<int,bool>rowMap ;\nunordered_map<int,bool>left_downMap;\nunordered_map<int,bool>left_upMap;\n\nvector<vector<string>> solveNQueens(int n) {\n    vector<vector<string>> ans;\n    vector<string> board (n,string(n,'.'));\n    solve(0,n,board,ans);\n    return ans;\n}\n\nvoid solve(int col, int n, vector<string>& board, vector<vector<string>>& ans){\n\n    if(col==n){\n        ans.push_back(board);\n        return;\n    }\n\n    for(int row = 0; row < n; row++){\n        if(isValid(row,col,n)){\n            // setting in maps\n            rowMap[row] = true;\n            left_downMap[row+col+n] = true;\n            left_upMap[row-col+n] = true;\n\n            // making recursive calls\n            board[row][col] = 'Q';\n            solve(col+1,n,board,ans);\n            board[row][col] = '.';\n\n            // unsetting in maps\n            rowMap[row] = false;\n            left_downMap[row+col+n] = false;\n            left_upMap[row-col+n] = false;\n        }\n    }\n}\n\nbool isValid(int row, int col, int n){\n    \n    bool cnd1 = rowMap[row];\n    bool cnd2 = left_upMap[row-col+n];\n    bool cnd3 = left_downMap[row+col+n];\n\n    return (cnd1 || cnd2 || cnd3)? false:true;\n}\n",
  "Number_of_subarray_sum_equal_k": "/*\nQUESTION:\nGiven an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.\n\nExample:\nInput: nums = [1,1,1], k = 2\nOutput: 2\n\nAPPROACH:\nTo find the total number of subarrays with sum equal to k, we can use the technique of prefix sum along with a hashmap.\n1. Initialize a variable `count` to keep track of the count of subarrays with sum equal to k.\n2. Initialize a variable `prefixSum` to keep track of the prefix sum while iterating through the array.\n3. Initialize a hashmap `sumCount` to store the frequency of prefix sums encountered so far.\n4. Set the initial prefix sum to 0 and set its count to 1 in the `sumCount` hashmap.\n5. Iterate through the array and update the prefix sum by adding each element.\n6. Check if the current prefix sum minus k exists in the `sumCount` hashmap. If it does, add the count of that prefix sum to the `count` variable.\n7. Increment the count of the current prefix sum in the `sumCount` hashmap.\n8. Finally, return the `count` variable as the total number of subarrays with sum equal to k.\n\nCODE:\n*/\n\nint subarraySum(vector<int> &nums, int k)\n{\n    int pref_sum = 0;\n    unordered_map<int, int> mp;\n    int ans = 0;\n\n    for (int i = 0; i < nums.size(); i++)\n    {\n        pref_sum += nums[i];\n\n        if (pref_sum == k)\n            ans++;\n\n        if (mp.find(pref_sum - k) != mp.end())\n        {\n            ans += mp[pref_sum - k];\n        }\n\n        mp[pref_sum]++;\n    }\n\n    return ans;\n}\n\n/*\nTIME COMPLEXITY: O(n), where n is the size of the input array nums.\nSPACE COMPLEXITY: O(n), as we are using a hashmap to store the prefix sums and their corresponding counts.\n*/\n",
  "Rotate_array_left_by_1place": "/*\nQUESTION:-\nGiven an array \"ARR' containing 'N' elements, rotate this array Left by once means to shift all elements by one place to the left and move the first element to the last position in the array.\n\nExample:\nInput: 'N' 5, 'ARR' = [1, 2, 3, 4, 5]\nOutput: [2, 3, 4, 5, 1]\n\nExplanation:\nWe moved the 2nd element to the 1st position and 3rd element to the 2nd position and 4th element to the 3rd position and 5th element to the 4th position and move oth element to the 5th position.\n*/\n\n/*\nAPPROACH:-\n-> By observing we can the ans is the arr where arr[i] = arr[i+1] and at last place we will have arr[0]\n-> Before traversing store the arr[0] in temp and then traverse the array and make arr[i] = arr[i+1]\n-> Make arr[n-1] = arr[0], where n is the size of the array\n*/\n\n// CODE:-\nvector<int> rotateArray(vector<int> &arr, int n)\n{\n    int temp = arr[0];\n    for (int i = 0; i < n - 1; i++)\n    {\n        arr[i] = arr[i + 1];\n    }\n    arr[n - 1] = temp;\n\n    return arr;\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(0)",
  "Search_element_in_linked_list": "/*\nQUESTION:-\nGiven a linked list of n nodes and a key , the task is to check if the key is present in the linked list or not.\n\nExample:\n\nInput:\nn = 4\n1->2->3->4\nKey = 3\nOutput:\nTrue\nExplanation:\n3 is present in Linked List, so the function returns true.\n\nAPPROCACH:-\nJust traverse the entire Linked List and if node's data matches with the target return true else return false.\n\nTIME COMPLEXITY:- O(N)\nSPACE COMPLEXITY:- O(1)\n\nCODE:-\n*/\nbool searchKey(int n, struct Node* head, int key) {\n    struct Node* curr = head;\n    while(curr){\n        if(curr->data == key)\n            return true;\n        curr = curr->next;\n    }\n    return false;\n}",
  "Set the righmost unset bit": "/*\nQUESTION:\nGiven a non-negative number N, set the rightmost unset bit in its binary representation. If there are no unset bits, leave the number as it is.\n\nExample:\nInput: N = 6\nOutput: 7\nExplanation:\nThe binary representation of 6 is 110.\nAfter setting the rightmost unset bit, it becomes 111 which is 7.\n\nInput: N = 15\nOutput: 15\nExplanation:\nThe binary representation of 15 is 1111.\nSince there are no unset bits, it remains the same.\n\nAPPROACH:\nTo set the rightmost unset bit in the binary representation of N, we can follow these steps:\n1. Check if N+1 is a power of 2. If it is, then N already has all bits set, so return N.\n2. Otherwise, perform the bitwise OR operation between N and (N+1). This will set the rightmost unset bit.\n3. Return the result.\n\n1. Check if N+1 is a power of 2 by using the isPowerOfTwo function.\n2. If it is, return N as it already has all bits set.\n3. Otherwise, perform the bitwise OR operation between N and (N+1) and return the result.\n\nCODE:*/\nbool isPowerOfTwo(int n) {\n    if(n <= 0)\n        return false;\n    if(n & (n-1))\n        return false;\n    return true;\n}\n\nint setBit(int N)\n{\n    if(isPowerOfTwo(N+1))\n        return N;\n\n    int ans = (N | (N+1));\n    return ans;\n}\n\n// Time Complexity: O(1)\n// Space Complexity: O(1)\n",
  "Subset 1": "/*QUESTION:\nGiven a list arr of N integers, print the sums of all subsets in it.\n\nExample:\nInput:\nN = 2\narr[] = {2, 3}\nOutput:\n0 2 3 5\nExplanation:\nWhen no element is taken, the sum is 0.\nWhen only 2 is taken, the sum is 2.\nWhen only 3 is taken, the sum is 3.\nWhen elements 2 and 3 are taken, the sum is 2 + 3 = 5.\n\nApproach:\nTo print the sums of all subsets, we can use a recursive approach with backtracking.\n1. Create a helper function called 'solve' that takes the current index, the current sum, the array, and a vector to store the sums as parameters.\n2. In the 'solve' function:\n   - If the current index is equal to the size of the array, add the current sum to the vector of sums and return.\n   - Otherwise, do the following:\n     - Include the element at the current index in the sum by recursively calling the 'solve' function with the updated index and the current sum plus the element value.\n     - Exclude the element at the current index from the sum by recursively calling the 'solve' function with the updated index and the current sum.\n3. Create the main function called 'subsetSums' that calculates and returns the vector of subset sums.\n   - Initialize an empty vector to store the subset sums.\n   - Call the 'solve' function with the initial index as 0, the initial sum as 0, the array, and the vector of subset sums.\n   - Sort the vector of subset sums in ascending order.\n   - Return the vector of subset sums.\n\nTime Complexity: O(2^N), where N is the size of the array.\nSpace Complexity: O(N), where N is the size of the array (for recursion stack and storing subset sums).\n\nCODE:*/\nvoid solve(int index, int sum, vector<int>& arr, vector<int>& ans) {\n\tif (index == arr.size()) {\n\t\tans.push_back(sum);\n\t\treturn;\n\t}\n\n\tsolve(index + 1, sum + arr[index], arr, ans);\n\tsolve(index + 1, sum, arr, ans);\n}\n\nvector<int> subsetSums(vector<int> arr, int N) {\n\tvector<int> ans;\n\tint sum = 0;\n\tsolve(0, sum, arr, ans);\n\tsort(ans.begin(), ans.end());\n\treturn ans;\n}\n",
  " 01 Knapsack": "/*\nQUESTION:\nGiven weights and values of 'N' items, the task is to put these \nitems in a knapsack of capacity 'W' to get the maximum total value \nin the knapsack. The constraint is that each item can either be \npicked completely or not at all (0-1 property).\n\nExample:\nInput: \nN = 3\nW = 4\nvalues[] = {1, 2, 3}\nweight[] = {4, 5, 1}\nOutput: 3\n\nAPPROACH:\n- This problem can be solved using Dynamic Programming (DP).\n- Initialize a 2D DP array 'dp' where dp[i][j] represents the \n  maximum value that can be obtained using the first 'i' items \n  and having a knapsack capacity of 'j'.\n- Base cases:\n  - dp[0][j] = 0 for all j (no items available)\n  - dp[i][0] = 0 for all i (no capacity)\n- For each item 'i' and each possible capacity 'j':\n  - If the weight of the current item is less than or equal to 'j':\n    - dp[i][j] = max(dp[i-1][j], val[i] + dp[i-1][j-wt[i]])\n  - Otherwise, dp[i][j] = dp[i-1][j] (item cannot be included)\n- The required answer will be dp[N][W] where 'N' is the number of items \n  and 'W' is the knapsack capacity.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of the solution is O(N * W), where 'N' is the \n  number of items and 'W' is the knapsack capacity.\n- The space complexity is O(N * W) for the dp array.\n\nCODE:\n*/\n\n// Memoization\nint fmemo(int i, int val[], int wt[], int W, vector<vector<int>>& dp){\n    if(i == 0){\n        if(W >= wt[i]) return dp[i][W] = val[i];\n        else return dp[i][W] = 0;\n    }\n    \n    if(dp[i][W] != -1) return dp[i][W];\n    \n    int take = INT_MIN;\n    if(W >= wt[i]) take = val[i] + fmemo(i-1, val, wt, W - wt[i], dp);\n    int notake = fmemo(i-1, val, wt, W, dp);\n    \n    return dp[i][W] = max(take, notake);\n}\n\n// Tabulation\nint ftab(int n, int val[], int wt[], int weight){\n    vector<vector<int>> dp(n,vector<int>(weight+1));\n    for(int i=0; i<n; i++){\n        for(int W=0; W<=weight; W++){\n            if(i==0){\n                if(W >= wt[i]) dp[i][W] = val[i];\n                else dp[i][W] = 0;\n                continue;\n            }\n            int take = INT_MIN;\n            if(W >= wt[i]) take = val[i]+dp[i-1][W-wt[i]];\n            int notake = dp[i-1][W];\n            dp[i][W] = max(take,notake);\n        }\n    }\n    return dp[n-1][weight];\n}\n\n// Space Optimization\nint fopt(int n, int val[], int wt[], int weight){\n    vector<int> prev(weight+1);\n    for(int i=0; i<n; i++){\n        vector<int> curr(weight+1);\n        for(int W=0; W<=weight; W++){\n            if(i==0){\n                if(W >= wt[i]) curr[W] = val[i];\n                else curr[W] = 0;\n                continue;\n            }\n            int take = INT_MIN;\n            if(W >= wt[i]) take = val[i]+prev[W-wt[i]];\n            int notake = prev[W];\n            curr[W] = max(take,notake);\n        }\n        prev = curr;\n    }\n    return dp[n-1][weight];\n}\n\nint knapSack(int W, int wt[], int val[], int n) {\n    vector<vector<int>> dp(n, vector<int>(W + 1, -1));\n    return fmemo(n - 1, val, wt, W, dp);\n}\n",
  " Alien Dictonary": "/*\nQUESTION:\nGiven a sorted dictionary of an alien language having N words and k starting alphabets of the standard dictionary. Find the order of characters in the alien language.\n\nAPPROACH:\n- We are given a sorted dictionary of an alien language.\n- To find the order of characters in the alien language, we can use a directed graph approach along with topological sorting.\n- We create a directed graph where each node represents a character, and there is a directed edge from node 'a' to node 'b' if character 'a' comes before character 'b' in the alien language.\n- We also keep track of the indegree of each node, which represents the number of characters that come before it in the alien language.\n- We iterate through the dictionary and set the directed edges and indegrees accordingly.\n- We then start with the nodes having an indegree of 0 (i.e., the characters that come first in the alien language) and perform a BFS-like traversal.\n- During the traversal, we keep reducing the indegree of the nodes that come after the current node.\n- The characters that become terminal nodes (i.e., their indegree becomes 0) during the traversal are the characters that come last in the alien language.\n- We construct the order of characters based on the BFS traversal, and that will be the correct order of characters in the alien language.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(N), where N is the number of words in the dictionary. We iterate through the dictionary once to set the directed edges and indegrees.\n- Space Complexity: O(K), where K is the number of starting alphabets in the standard dictionary. We use additional space to store the directed graph and indegrees.\n*/\n\nvoid setAdj(string a, string b, vector<int> adj[], vector<int>& indeg){\n    int as = a.size(), bs = b.size();\n    int n = min(as,bs);\n    for(int i=0; i<n; i++){\n        if(a[i]!=b[i]){\n            adj[a[i]-'a'].push_back(b[i]-'a');\n            indeg[b[i]-'a']++;\n            break;\n        }\n    }\n}\n\nstring findOrder(string dict[], int N, int K) {\n    vector<int> adj[K];\n    vector<int> indeg(K);\n\n    // Set the directed edges and indegrees\n    for(int i=1; i<N; i++){\n        setAdj(dict[i-1],dict[i],adj,indeg);\n    }\n\n    queue<int> q;\n    for(int i=0; i<K; i++){\n        if(indeg[i]==0){\n            q.push(i);\n        } \n    }\n\n    string ans = \"\";\n    while(!q.empty()){\n        int siz = q.size();\n        while(siz--){\n            int node = q.front();\n            q.pop();\n            ans += node+'a';\n            for(auto v:adj[node]){\n                indeg[v]--;\n                if(indeg[v]==0) q.push(v);\n            }\n        }\n    }\n\n    return ans; \n}\n",
  " Buy and sell stocks with transaction fee": "/*\nQUESTION:\nYou are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.\nFind the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\nNote:\n- You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n- The transaction fee is only charged once for each stock purchase and sale.\n\nExample:\nInput: prices = [1, 3, 2, 8, 4, 9], fee = 2\nOutput: 8\nExplanation: The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- We need to keep track of whether we are holding a stock or not on each day.\n- Define a 2D DP array `dp` where dp[i][hold] represents the maximum profit achievable starting from day i while holding or not holding a stock.\n- The base case is dp[n][0] = dp[n][1] = 0, where n is the number of days.\n- Iterate through each day i.\n- If holding a stock, we can either sell the stock or continue holding.\n- If not holding a stock, we can either buy the stock or continue not holding.\n- Return dp[0][0], which represents the maximum profit achievable starting from day 0 while not holding a stock.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n), where n is the number of days.\n- The space complexity is O(n) due to the dp array.\n- Overall, the algorithm runs in O(n) time and O(n) space.\n\nCODE:\n*/\n\nint f;\nint fmemo(int i, int hold, vector<int>& prices, vector<vector<int>>& dp){\n    if(i == prices.size()) return 0;\n\n    if(dp[i][hold] != -1) return dp[i][hold];\n\n    if(hold){\n        // sell \n        int a = prices[i] - f + fmemo(i + 1, 0, prices, dp);\n        // not sell\n        int b = fmemo(i + 1, 1, prices, dp);\n        return dp[i][hold] = max(a, b);\n    }\n    else{\n        // buy\n        int a = -prices[i] + fmemo(i + 1, 1, prices, dp);\n        // not buy\n        int b = fmemo(i + 1, 0, prices, dp);\n        return dp[i][hold] = max(a, b);\n    }\n}\n\nint maxProfit(vector<int>& prices, int fee) {\n    int n = prices.size();\n    f = fee;\n    vector<vector<int>> dp(n, vector<int>(2, -1));\n    return fmemo(0, 0, prices, dp);\n}\n",
  " Candy": "/*\nQuestion:\nThere are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\nYou are giving candies to these children subjected to the following requirements:\n- Each child must have at least one candy.\n- Children with a higher rating get more candies than their neighbors.\nReturn the minimum number of candies you need to have to distribute the candies to the children.\n\nExample:\nInput: ratings = [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second, and third child with 2, 1, 2 candies respectively.\n\nApproach:\n- We start by assigning 1 candy to each child as the minimum requirement.\n- Then, we iterate from left to right and check if the current child has a higher rating than the previous child.\n- If yes, we increment the number of candies for the current child by 1 compared to the previous child.\n- Next, we iterate from right to left and check if the current child has a higher rating than the next child.\n- If yes, we take the maximum of the current child's candies and the next child's candies plus 1.\n- Finally, we sum up all the candies assigned to get the minimum number of candies required.\n\nComplexity Analysis:\n- The time complexity of this approach is O(N), where N is the number of children.\n- We iterate over the ratings twice to assign the candies.\n- The space complexity is O(N) as we use an additional vector to store the number of candies assigned to each child.\n\nCode:\n*/\n\nint candy(vector<int>& ratings) {\n    int n = ratings.size();\n    if(n == 1) return 1;\n    vector<int> num(n, 1);\n    for(int i = 1; i < n; i++) {\n        if(ratings[i] > ratings[i-1]) {\n            num[i] = num[i-1] + 1;\n        }\n    }\n    for(int i = n-2; i >= 0; i--) {\n        if(ratings[i] > ratings[i+1]) {\n            num[i] = max(num[i], num[i+1] + 1);\n        }\n    }\n    int sum = 0;\n    for(auto it : num) {\n        sum += it;\n    }\n    return sum;\n}\n",
  " Cheapest Flights with K stops": "/* QUESTION:\n\nThere are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.\n\nYou are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.\n\nExample:\n\nInput: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1\nOutput: 700\nExplanation:\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\nNote that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.\n\nAPPROACH:\n- We can use Breadth-First Search (BFS) to find the cheapest price from the source to the destination with at most k stops.\n- We will create an adjacency list to represent the graph, where each node will have a list of neighboring nodes with their corresponding prices.\n- We will use a queue to perform BFS starting from the source node.\n- During BFS, we will keep track of the distance to each node and the number of stops made so far.\n- If we reach the destination node and the number of stops is less than or equal to k, we will update the minimum cost to reach the destination.\n- Continue BFS until we have explored all possible paths with at most k stops.\n- Return the minimum cost to reach the destination if it is reachable, otherwise return -1.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity is O(n*k) since we can have at most k stops and for each stop, we will explore all n nodes.\n- The space complexity is O(n) to store the distance values.\n\nCODE:\n*/\n\n\nint findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {\n    vector<vector<pair<int, int>>> adj(n);\n    for (auto flight : flights) {\n        adj[flight[0]].push_back({flight[1], flight[2]});\n    }\n\n    queue<pair<int, int>> q;\n    q.push({src, 0});\n\n    vector<int> dis(n, 1e9);\n\n    int stops = 0;\n    while (!q.empty() && stops <= k) {\n        int size = q.size();\n        while (size--) {\n            auto [u, uwt] = q.front();\n            q.pop();\n            for (auto& [v, vwt] : adj[u]) {\n                if (vwt + uwt < dis[v]) {\n                    dis[v] = uwt + vwt;\n                    q.push({v, dis[v]});\n                }\n            }\n        }\n        stops++;\n    }\n    if (dis[dst] == 1e9)\n        return -1;\n    return dis[dst];\n}\n",
  " Count the number of nice subarrays": "QUESTION:\n/*Given an array of integers nums and an integer k, a continuous subarray is called nice if there are k odd numbers in it. Return the number of nice subarrays.\n\nExample 1:\nInput: nums = [1,1,2,1,1], k = 3\nOutput: 2\nExplanation: The only subarrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].\n\nAPPROACH:\n1. Define a helper function called atMostK, which calculates the number of subarrays with at most k odd numbers.\n2. Initialize variables start to 0, oddCnt to 0, and ans to 0.\n3. Iterate through each element nums[i] in the array:\n   - If nums[i] is odd, increment oddCnt by 1.\n   - While oddCnt is greater than k, move the start pointer and decrement oddCnt if the element at nums[start] is odd. This ensures that we maintain at most k odd numbers in the subarray.\n   - Add the count of subarrays from start to i (i - start + 1) to ans.\n4. Return ans, which represents the number of subarrays with at most k odd numbers.\n5. In the numberOfSubarrays function, return the difference between atMostK(nums, k) and atMostK(nums, k - 1) to get the number of nice subarrays.\n\nCODE:*/\nint atMostK(vector<int>& nums, int k) {\n    int start = 0, oddCnt = 0, ans = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] % 2 != 0)\n            oddCnt++;\n        while(oddCnt > k) {\n            if(nums[start] % 2 != 0)\n                oddCnt--;\n            start++;\n        }\n        ans += i - start + 1;\n    }\n    return ans;\n}\n\nint numberOfSubarrays(vector<int>& nums, int k) {\n    return atMostK(nums, k) - atMostK(nums, k - 1);\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- Time complexity: O(N), where N is the size of the input array nums. We traverse the array once in both the atMostK function and the numberOfSubarrays function.\n- Space complexity: O(1), as we use constant extra space throughout the algorithm.\n*/\n",
  " Level Order Traversal": "/*\nQuestion:\nGiven the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n\nApproach:\n- We can perform a level order traversal using a queue.\n- We start by pushing the root node into the queue.\n- Then, while the queue is not empty, we process each level by taking the size of the queue and iterating over the nodes at that level.\n- For each node, we add its value to the current level's vector and push its left and right child nodes into the queue if they exist.\n- After processing each level, we add the level's vector to the result vector.\n\nComplexity Analysis:\n- Since we visit each node once and perform constant time operations for each node, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(N) as we store the node values in the result vector.\n\nCode:\n*/\n\nvector<vector<int>> levelOrder(TreeNode* root) {\n    vector<vector<int>> ans;\n    if (!root) {\n        return ans;\n    }\n    queue<TreeNode*> q;\n    q.push(root);\n\n    while (!q.empty()) {\n        vector<int> level;\n        int n = q.size();\n        for (int i = 0; i < n; i++) {\n            TreeNode* curr = q.front();\n            q.pop();\n            level.push_back(curr->val);\n            if (curr->left) {\n                q.push(curr->left);\n            }\n            if (curr->right) {\n                q.push(curr->right);\n            }\n        }\n        ans.push_back(level);\n    }\n\n    return ans;\n}\n",
  " Min time to burn binary tree": "/* QUESTION:\n\nGiven a binary tree and a node data called target. Find the minimum time required to burn the complete binary tree if the target is set on fire. It is known that in 1 second, all nodes connected to a given node get burned. That is its left child, right child, and parent.\nNote: The tree contains unique values.\n\nExample 1:\nInput:\n          1\n        /   \\\n      2      3\n    /  \\      \\\n   4    5      6\n       / \\      \\\n      7   8      9\n                   \\\n                   10\n\nTarget Node = 8\nOutput: 7\nExplanation: If the leaf with the value 8 is set on fire:\nAfter 1 sec: 5 is set on fire.\nAfter 2 sec: 2, 7 are set to fire.\nAfter 3 sec: 4, 1 are set to fire.\nAfter 4 sec: 3 is set to fire.\nAfter 5 sec: 6 is set to fire.\nAfter 6 sec: 9 is set to fire.\nAfter 7 sec: 10 is set to fire.\nIt takes 7s to burn the complete tree.\n\n\nAPPROACH:\n\nTo find the minimum time required to burn the complete binary tree, we need to perform a BFS (level-order traversal) starting from the target node. While doing BFS, we will also keep track of the parent node for each node using a hash map. The parent node will be used to traverse upward from the target node in the BFS process.\n\nWe will burn the target node and its adjacent nodes (left child, right child, and parent) one by one in each second. By the time we burn all nodes in the last level, all other nodes in the binary tree would have been burned as well.\n\nFinally, we will count the number of seconds it took to burn the complete binary tree.\n\nCOMPLEXITY ANALYSIS:\n\nLet `n` be the number of nodes in the binary tree.\n- Time Complexity: The time complexity of this approach is O(n) since we perform a BFS starting from the target node, visiting all nodes in the binary tree once.\n- Space Complexity: The space complexity is O(n) for the queue and the hash map.\n\nCODE:\n*/\n\nvoid setParent(BinaryTreeNode<int>* root, unordered_map<BinaryTreeNode<int>*, BinaryTreeNode<int>*>& parent) {\n    if (!root) return;\n    if (root->data == start->data) s = root;\n\n    if (root->left) parent[root->left] = root;\n    if (root->right) parent[root->right] = root;\n\n    setParent(root->left, parent);\n    setParent(root->right, parent);\n}\n\nint timeToBurnTree(BinaryTreeNode<int>* root, BinaryTreeNode<int>* start) {\n    unordered_map<BinaryTreeNode<int>*, BinaryTreeNode<int>*> parent;\n    setParent(root, parent);\n\n    queue<BinaryTreeNode<int>*> q;\n    q.push(start);\n    int time = 0;\n    unordered_map<BinaryTreeNode<int>*, bool> vis;\n\n    while (!q.empty()) {\n        int n = q.size();\n        for (int i = 0; i < n; i++) {\n            auto curr = q.front();\n            q.pop();\n\n            if (curr->left && !vis[curr->left]) q.push(curr->left);\n            if (curr->right && !vis[curr->right]) q.push(curr->right);\n            if (parent[curr] && !vis[parent[curr]]) q.push(parent[curr]);\n            \n            vis[curr] = true;\n        }\n        time++;\n    }\n    return time - 1;\n}\n",
  " Minimum Falling Path Sum": "/*\nQUESTION:-\nGiven an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\n\nA falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).\n\nExample:\nInput: matrix = [[2,1,3],[6,5,4],[7,8,9]]\nOutput: 13\nExplanation: There are two falling paths with a minimum sum as shown.\n\nApproach:\n1. We can solve this problem using dynamic programming with memoization (top-down approach).\n2. We define a helper function fmemo(i, j, mat, dp) that calculates the minimum sum of any falling path starting from cell (i, j).\n3. The function checks if the minimum sum for the current cell (i, j) is already calculated and stored in the dp array. If yes, it returns the value from dp.\n4. If i is 0, it means we are at the first row, so the minimum sum starting from this cell is the value in the current cell (mat[i][j]).\n5. Otherwise, the function calculates the minimum sum for the current cell by taking the minimum of the minimum sums of the cells above it (i-1, j-1), (i-1, j), and (i-1, j+1), and then adding the value in the current cell (mat[i][j]).\n6. The result is stored in the dp array to avoid recomputation when the function is called with the same parameters again.\n7. Finally, we find the minimum falling path sum for all cells in the first row and return the smallest value.\n\nComplexity Analysis:\n- The time complexity of the fmemo function is O(n^2) since we are calculating the minimum sum for each cell only once and storing it in the dp array.\n- The space complexity is also O(n^2) to store the dp array.\n\n*/\n\n// Memoization\nint fmemo(int i, int j, vector<vector<int>>& mat, vector<vector<int>>& dp) {\n    if (j < 0 || j >= mat[0].size())\n        return 1e9;\n\n    if (dp[i][j] != -1)\n        return dp[i][j];\n\n    if (i == 0)\n        return dp[i][j] = mat[i][j];\n\n    int a = fmemo(i - 1, j - 1, mat, dp);\n    int b = fmemo(i - 1, j, mat, dp);\n    int c = fmemo(i - 1, j + 1, mat, dp);\n\n    return dp[i][j] = min(a, min(b, c)) + mat[i][j];\n}\n\n// Tabulation\nint ftab(int n, vector<vector<int>>& mat){\n    vector<vector<int>> dp(n,vector<int>(n));\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            if(i==0){\n                dp[i][j] = mat[i][j];\n                continue;\n            }\n            int a = 1e9, c = 1e9;\n            if(j-1>=0) a = dp[i-1][j-1];\n            int b = dp[i-1][j];\n            if(j+1<n) c = dp[i-1][j+1];\n            dp[i][j] = min(a,min(b,c))+mat[i][j];\n        }\n    }\n    int ans = INT_MAX;\n    for(auto i:dp[n-1]) ans = min(ans,i);\n    return ans;\n}\n\n// Space Optmization\nint fopt(int n, vector<vector<int>>& mat){\n    vector<int> prev(n);\n    for(int i=0; i<n; i++){\n        vector<int> curr(n);\n        for(int j=0; j<n; j++){\n            if(i==0){\n                curr[j] = mat[i][j];\n                continue;\n            }\n            int a = 1e9, c = 1e9;\n            if(j-1>=0) a = prev[j-1];\n            int b = prev[j];\n            if(j+1<n) c = prev[j+1];\n            curr[j] = min(a,min(b,c))+mat[i][j];\n        }\n        prev = curr;\n    }\n    int ans = INT_MAX;\n    for(auto i:prev) ans = min(ans,i);\n    return ans;\n}\n\nint minFallingPathSum(vector<vector<int>>& matrix) {\n    int n = matrix.size();\n    vector<vector<int>> dp(n, vector<int>(n, -1));\n\n    int ans = 1e9;\n    for (int i = 0; i < n; i++) {\n        ans = min(ans, fmemo(n - 1, i, matrix, dp));\n    }\n\n    return ans;\n}\n",
  " Minimum steps to make other string": "/*\nQUESTION:\nGiven two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.\nIn one step, you can delete exactly one character in either string.\n\nAPPROACH:\n- The problem can be reduced to finding the length of the Longest Common Subsequence (LCS) between the two strings.\n- The idea is to find the length of the LCS and then subtracting it from the sum of the lengths of the two strings.\n- The reason is that the characters not present in the LCS need to be deleted from both strings to make them the same.\n- Therefore, the minimum number of steps required is equal to the sum of the lengths of the strings minus twice the length of the LCS.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of finding the LCS is O(n*m), where n and m are the lengths of the two strings.\n- The space complexity is O(n*m) due to the dp array.\n- Overall, the algorithm runs in O(n*m) time and O(n*m) space.\n\nCODE:\n*/\n\n\nint fmemo(int i, int j, string &s, string &r, vector<vector<int>> &dp) {\n    if (i < 0 || j < 0)\n        return 0;\n\n    if (dp[i][j] != -1)\n        return dp[i][j];\n\n    if (s[i] == r[j])\n        return dp[i][j] = fmemo(i - 1, j - 1, s, r, dp) + 1;\n    else\n        return dp[i][j] = max(fmemo(i - 1, j, s, r, dp), fmemo(i, j - 1, s, r, dp));\n}\n\nint minDistance(string word1, string word2) {\n    int n = word1.size(), m = word2.size();\n    vector<vector<int>> dp(n, vector<int>(m, -1));\n    int lcs = fmemo(n - 1, m - 1, word1, word2, dp);\n    return (n + m) - 2 * lcs;\n}\n",
  " Number of islands 2": "/*\nQUESTION:-\nYou are given an n x m 2D matrix, and an array of size k denoting the number of operations. The matrix elements are 0 if there is water or 1 if there is land. Originally, the 2D matrix is all 0, which means there is no land in the matrix. The array has k operator(s) and each operator has two integers A[i][0], A[i][1], which means that you can change the cell matrix[A[i][0]][A[i][1]] from sea to an island. Return how many islands are there in the matrix after each operation. You need to return an array of size k.\nNote: An island means a group of 1s such that they share a common side.\n\nExample 1:\nInput: n = 4, m = 5, k = 4, A = {{1,1},{0,1},{3,3},{3,4}}\nOutput: 1 1 2 2\nExplanation:\n0.  00000\n    00000\n    00000\n    00000\n1.  00000\n    01000\n    00000\n    00000\n2.  01000\n    01000\n    00000\n    00000\n3.  01000\n    01000\n    00000\n    00010\n4.  01000\n    01000\n    00000\n    00011\n*/\n\n\n/* \nApproach:\n1. Create a disjoint set to represent islands.\n2. Initialize an empty grid to track the islands.\n3. For each operation (i.e., changing sea to land), do the following:\n   a. If the cell is not already land, mark it as land and increment the island count.\n   b. For the neighboring cells that are land, check if they belong to the same island or not.\n      - If they don't belong to the same island, union the sets and decrement the island count.\n4. Return the island count after each operation as the result.\n\nComplexity Analysis:\n- The time complexity of each operation is O(4 * alpha(n*m)) due to the union operation, where alpha(n*m) is the inverse Ackermann function.\n- Since there are k operations, the overall time complexity is O(k * alpha(n*m)).\n- The space complexity is O(n*m) for storing the grid and the disjoint set.\n\nCODE:-\n*/\n\nclass DisjointSet {\n    vector<int> parent, size;\n\npublic:\n    DisjointSet(int n) {\n        size.resize(n, 1);\n        parent.resize(n);\n        for (int i = 0; i < n; i++) parent[i] = i;\n    }\n\n    int findUPar(int node) {\n        if (parent[node] == node) return node;\n        return parent[node] = findUPar(parent[node]);\n    }\n\n    void unionSize(int u, int v) {\n        int up = findUPar(u), vp = findUPar(v);\n        int us = size[up], vs = size[vp];\n        if (us > vs) {\n            parent[vp] = up;\n            size[up] += vs;\n        } else {\n            parent[up] = vp;\n            size[vp] += us;\n        }\n    }\n};\n\nbool isLand(int x, int y, vector<vector<int>>& grid) {\n    return (x >= 0 && x < grid.size() && y >= 0 && y < grid[0].size() && grid[x][y] == 1);\n}\n\nvector<int> numOfIslands(int n, int m, vector<vector<int>>& operators) {\n    vector<int> ans;\n    int islands = 0;\n    DisjointSet djs(n * m);\n    vector<vector<int>> grid(n, vector<int>(m, 0));\n\n    vector<int> dr = { -1, 1, 0, 0 };\n    vector<int> dc = { 0, 0, -1, 1 };\n\n    for (auto op : operators) {\n        int x = op[0], y = op[1];\n        if (grid[x][y] != 1) {\n            grid[x][y] = 1;\n            islands++;\n            int id = x * m + y;\n            for (int i = 0; i < 4; i++) {\n                int nx = x + dr[i], ny = y + dc[i];\n                if (isLand(nx, ny, grid)) {\n                    int nid = nx * m + ny;\n                    if (djs.findUPar(id) != djs.findUPar(nid)) {\n                        djs.unionSize(id, nid);\n                        islands--;\n                    }\n                }\n            }\n        }\n        ans.push_back(islands);\n    }\n    return ans;\n}\n",
  " Partition array for maximum sum": "/*\nQUESTION:\nGiven an integer array arr, partition the array into (contiguous) subarrays of length at most k.\nAfter partitioning, each subarray has their values changed to become the maximum value of that subarray.\nReturn the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.\n\nExample:\nInput: arr = [1, 15, 7, 9, 2, 5, 10], k = 3\nOutput: 84\nExplanation: arr becomes [15, 15, 15, 9, 10, 10, 10]\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- Define a 1D DP array `dp` where dp[i] represents the largest sum of the array after partitioning from index i to the end.\n- Iterate through each index i of the array in reverse order.\n- For each index i, iterate through all possible partition lengths from 1 to k.\n- Calculate the maximum sum for the current partition, which is the maximum element within the partition multiplied by the length of the partition.\n- Update dp[i] with the maximum value among all possible partition scenarios.\n- Finally, return dp[0], which represents the largest sum of the array after partitioning.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n * k), where n is the length of the array.\n- The space complexity is O(n) due to the dp array.\n- Overall, the algorithm runs in O(n * k) time and O(n) space.\n\nCODE:\n*/\n\nint fmemo(int i, int k, vector<int>& arr, vector<int>& dp){\n    if(i == arr.size()) return 0;\n\n    if(dp[i] != -1) return dp[i];\n\n    int n = arr.size();\n    int maxi = 0, ans = 0;\n    for(int j = i; j < min(i + k, n); j++){\n        maxi = max(maxi, arr[j]);\n        int maxSum = maxi * (j - i + 1) + fmemo(j + 1, k, arr, dp);\n        ans = max(ans, maxSum);\n    }\n    return dp[i] = ans;\n}\n\nint maxSumAfterPartitioning(vector<int>& arr, int k) {\n    int n = arr.size();\n    vector<int> dp(n, -1);\n    return fmemo(0, k, arr, dp);\n}\n",
  " Postfix to prefix": "/*\nQUESTION:\nYou are given a string that represents the postfix form of a valid mathematical expression. Convert it to its prefix form.\n\nExample:\nInput: \nABC/-AK/L-*\nOutput: \n*-A/BC-/AKL\nExplanation: \nThe above output is its valid prefix form.\n\nAPPROACH:\n- We can use a stack to convert the postfix expression to prefix.\n- We iterate through each character of the input string.\n- If the character is an alphanumeric character, we push it onto the stack.\n- If the character is an operator, we pop two operands from the stack, concatenate them with the operator in the proper order (operator + operand2 + operand1), and push the result back onto the stack.\n- After iterating through all characters, the top of the stack will contain the final prefix expression.\n\nCODE:\n*/\n\nbool isAlphaNumeric(char ch) {\n    return ('A' <= ch && ch <= 'Z') || ('a' <= ch && ch <= 'z') || ('0' <= ch && ch <= '9');\n}\n\nstring postToPre(string post_exp) {\n    stack<string> st;\n    \n    for (int i = 0; i < post_exp.size(); i++) {\n        char ch = post_exp[i];\n        \n        if (isAlphaNumeric(ch)) {\n            string temp = \"\";\n            temp += ch;\n            st.push(temp);\n        } else {\n            string a = st.top();\n            st.pop();\n            string b = st.top();\n            st.pop();\n            \n            string temp = ch + b + a;\n            st.push(temp);\n        }\n    }\n    \n    return st.top();\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- The time complexity of the postToPre function is O(N), where N is the length of the input string.\n- We iterate through each character once, and the operations performed inside the loop are all constant time.\n- The space complexity is O(N) as we use a stack to store operands.\n*/\n",
  " Sum of range of all subarray": "/*QUESTION:\nYou are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray. Return the sum of all subarray ranges of nums.\n\nAPPROACH:\nTo find the sum of all subarray ranges, we can use the concept of previous smaller, next smaller, previous greater, and next greater elements for each element in the array.\n1. Define four helper functions:\n   - `prevSmaller(arr)`: Returns an array that contains the index of the previous smaller element for each element in `arr`. If no smaller element exists, the index is set to -1.\n   - `nextSmaller(arr)`: Returns an array that contains the index of the next smaller element for each element in `arr`. If no smaller element exists, the index is set to the length of the array.\n   - `prevGreater(arr)`: Returns an array that contains the index of the previous greater element for each element in `arr`. If no greater element exists, the index is set to -1.\n   - `nextGreater(arr)`: Returns an array that contains the index of the next greater element for each element in `arr`. If no greater element exists, the index is set to the length of the array.\n2. Initialize a variable `ans` to 0 to store the final sum.\n3. Iterate over each element `arr[i]` in the array:\n   a. Calculate the number of subarrays where `arr[i]` is the minimum element:\n      - The number of subarrays with `arr[i]` as the minimum element on the left side is `i - prevS[i]`.\n      - The number of subarrays with `arr[i]` as the minimum element on the right side is `nextS[i] - i`.\n   b. Calculate the number of subarrays where `arr[i]` is the maximum element:\n      - The number of subarrays with `arr[i]` as the maximum element on the left side is `i - prevG[i]`.\n      - The number of subarrays with `arr[i]` as the maximum element on the right side is `nextG[i] - i`.\n   c. Update `ans` by adding `(maxleftElements * maxrightElements * arr[i]) - (minleftElements * minrightElements * arr[i])`.\n4. Return the final value of `ans` as the sum of all subarray ranges.\n\nCODE:*/\n\n// NOTE:- The code could be more concise if done in double traversal but I find this more intuitive\nvector<int> prevSmaller(vector<int>& arr){\n    stack<int> st;\n    vector<int> ans(arr.size(), -1);\n    for(int i = 0; i < arr.size(); i++){\n        while(!st.empty() && arr[st.top()] > arr[i])\n            st.pop();\n        if(!st.empty())\n            ans[i] = st.top();\n        st.push(i);\n    }\n    return ans;\n}\n\nvector<int> nextSmaller(vector<int>& arr){\n    stack<int> st;\n    vector<int> ans(arr.size(), arr.size());\n    for(int i = arr.size()-1; i >= 0; i--){\n        while(!st.empty() && arr[st.top()] >= arr[i])\n            st.pop();\n        if(!st.empty())\n            ans[i] = st.top();\n        st.push(i);\n    }\n    return ans;\n}\n\nvector<int> prevGreater(vector<int>& arr){\n    stack<int> st;\n    vector<int> ans(arr.size(), -1);\n    for(int i = 0; i < arr.size(); i++){\n        while(!st.empty() && arr[st.top()] < arr[i])\n            st.pop();\n        if(!st.empty())\n            ans[i] = st.top();\n        st.push(i);\n    }\n    return ans;\n}\n\nvector<int> nextGreater(vector<int>& arr){\n    stack<int> st;\n    vector<int> ans(arr.size(), arr.size());\n    for(int i = arr.size()-1; i >= 0; i--){\n        while(!st.empty() && arr[st.top()] <= arr[i])\n            st.pop();\n        if(!st.empty())\n            ans[i] = st.top();\n        st.push(i);\n    }\n    return ans;\n}\n\nlong long subArrayRanges(vector<int>& arr) {\n    vector<int> prevS = prevSmaller(arr);\n    vector<int> nextS = nextSmaller(arr);\n    vector<int> prevG = prevGreater(arr);\n    vector<int> nextG = nextGreater(arr);\n    long long ans = 0;\n\n    for(int i = 0; i < arr.size(); i++){\n        long long minleftElements = i - prevS[i];\n        long long minrightElements = nextS[i] - i;\n        long long maxleftElements = i - prevG[i];\n        long long maxrightElements = nextG[i] - i;\n        ans += (maxleftElements * maxrightElements * arr[i]) - (minleftElements * minrightElements * arr[i]);\n    }\n    return ans;\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(N), where N is the number of elements in the array `arr`. We iterate through the array multiple times to calculate the previous smaller, next smaller, previous greater, and next greater elements.\n- The space complexity is O(N) as we use additional space to store the previous smaller, next smaller, previous greater, and next greater elements.\n*/\n\n",
  " Surrounded Regions": "/*\nQUESTION:-\nGiven an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.\n\nA region is captured by flipping all 'O's into 'X's in that surrounded region.\n\nAPPROACH:\n- We can use Depth-First Search (DFS) to find all regions that are surrounded by 'X'.\n- First, we initialize a copy of the board called 'vis' to store the visited status of each cell.\n- Then, we perform a DFS starting from all border cells that have 'O's. During the DFS, we mark all connected 'O's as visited by changing them to a special character, such as '#', in the 'vis' matrix.\n- After performing DFS from border cells, all remaining '#'s in the 'vis' matrix represent regions that are not surrounded by 'X'.\n- Finally, we update the original board by flipping all remaining 'O's to 'X'.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(m * n), where m is the number of rows and n is the number of columns in the matrix. In the worst case, we may need to visit all the cells of the matrix during DFS.\n- Space Complexity: O(m * n), where m is the number of rows and n is the number of columns in the matrix. We use additional space for the 'vis' matrix.\n*/\n\nvoid dfs(int i, int j, vector<vector<char>>& vis){\n    if(i >= 0 && i < vis.size() && j >= 0 && j < vis[0].size() && vis[i][j] == 'O'){\n        vis[i][j] = '#';\n        dfs(i + 1, j, vis);\n        dfs(i - 1, j, vis);\n        dfs(i, j + 1, vis);\n        dfs(i, j - 1, vis);\n    }\n}\n\nvoid solve(vector<vector<char>>& board) {\n    int m = board.size(), n = board[0].size();\n    vector<vector<char>> vis(board.begin(), board.end());\n    \n    // Perform DFS from border cells\n    for(int i = 0; i < n; i++){\n        if(vis[0][i] == 'O')\n            dfs(0, i, vis);\n        if(vis[m - 1][i] == 'O')\n            dfs(m - 1, i, vis);\n    }\n    for(int i = 0; i < m; i++){\n        if(vis[i][0] == 'O')\n            dfs(i, 0, vis);\n        if(vis[i][n - 1] == 'O')\n            dfs(i, n - 1, vis);\n    }\n    \n    // Update the original board\n    for(int i = 0; i < m; i++){\n        for(int j = 0; j < n; j++){\n            if(vis[i][j] == 'O')\n                board[i][j] = 'X';\n        }\n    }\n}\n",
  " Task Scheduler": "/*\nQUESTION:\nGiven a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.\n\nAPPROACH:\nTo minimize the total time, we need to consider the task with the maximum frequency. Let's assume the maximum frequency is maxfreq. The CPU will need at least (maxfreq - 1) intervals of cooldown time between the executions of the tasks with the maximum frequency.\n\n1. Create a frequency map to count the occurrences of each task.\n2. Find the maximum frequency maxfreq.\n3. Calculate the total number of intervals required by multiplying (maxfreq - 1) with the cooldown period n.\n4. Iterate through the frequency map and count the number of tasks with the maximum frequency. Add this count to the total number of intervals.\n5. Return the maximum of the total number of intervals and the total number of tasks.\n\nThe leastInterval function implements this approach.\n\nTIME COMPLEXITY:\nThe time complexity of the leastInterval function is O(N), where N is the number of tasks. We iterate through the tasks twice: once to calculate the frequencies and find the maximum frequency, and once to count the number of tasks with the maximum frequency. Both iterations take O(N) time.\n\nSPACE COMPLEXITY:\nThe space complexity is O(1) because the frequency map has a fixed number of unique tasks (26 lowercase letters).\n*/\n\nint leastInterval(vector<char>& tasks, int n) {\n    int siz = tasks.size();\n    unordered_map<char, int> mp;\n    for (auto it : tasks)\n        mp[it]++;\n    int maxfreq = INT_MIN;\n    for (auto it : mp)\n        maxfreq = max(maxfreq, it.second);\n    int ans = (maxfreq - 1) * (n + 1);\n    // number of elements having maxfreq\n    for (auto it : mp) {\n        if (it.second == maxfreq)\n            ans++;\n    }\n    return max(ans, siz);\n}\n",
  " Top K frequent elements": "/*\nQuestion:\nGiven an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\n*/\n\n/*\nApproach:\n1. Create a frequency map to count the occurrences of each element in the array.\n2. Use a min heap to store the k most frequent elements based on their frequencies.\n3. Iterate through the frequency map and push elements into the min heap.\n4. If the size of the min heap exceeds k, remove the element with the lowest frequency.\n5. Finally, extract the elements from the min heap and return them in reverse order to get the k most frequent elements.\n*/\n\n/*\nComplexity Analysis:\n- The time complexity is O(N log K), where N is the size of the input array nums. Building the frequency map takes O(N) time, and inserting and removing elements from the min heap take O(log K) time, which is done for each element in nums.\n- The space complexity is O(N) to store the frequency map and O(K) for the min heap, resulting in a total of O(N + K) space.\n\nCODE:-\n*/\n\nvector<int> topKFrequent(vector<int>& nums, int k) {\n    unordered_map<int, int> mp;\n    for (auto it : nums)\n        mp[it]++;\n    \n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    for (auto it : mp) {\n        pq.push({ it.second, it.first });\n        if (pq.size() > k)\n            pq.pop();\n    }\n    \n    vector<int> ans;\n    while (!pq.empty()) {\n        ans.push_back(pq.top().second);\n        pq.pop();\n    }\n    \n    reverse(ans.begin(), ans.end());\n    return ans;\n}\n\n",
  " Valid Parenthesis": "/*\nQUESTION:\nGiven a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n- Open brackets must be closed by the same type of brackets.\n- Open brackets must be closed in the correct order.\n- Every close bracket has a corresponding open bracket of the same type.\n\nExample:\nInput: s = \"()\"\nOutput: true\n\nAPPROACH:\n- We can use a stack to keep track of the opening brackets.\n- Whenever we encounter an opening bracket, we push it onto the stack.\n- If we encounter a closing bracket, we check if it matches the top of the stack.\n- If the closing bracket matches the top of the stack, we pop the top element from the stack.\n- If at any point the closing bracket does not match the top of the stack or the stack is empty, the string is not valid.\n- Finally, if the stack is empty after processing all characters, the string is valid.\n\nCODE:\n*/\n\nbool isValid(string& s) {\n    stack<char> st;\n    \n    for (char c : s) {\n        if (c == '(' || c == '[' || c == '{') {\n            st.push(c);\n        } \n        else {\n            if (st.empty())\n                return false;\n            \n            char open = st.top();\n            if ((open == '(' && c == ')') || (open == '[' && c == ']') || (open == '{' && c == '}')) {\n                st.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    \n    return st.empty();\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- The code iterates through the input string once, so the time complexity is O(n), where n is the length of the input string.\n- The space complexity is O(n) as we use a stack to store the opening brackets.\n*/\n\n",
  " Validate BST": "/*\nQuestion:\nGiven the root of a binary tree, determine if it is a valid binary search tree (BST).\n\nA valid BST is defined as follows:\n- The left subtree of a node contains only nodes with keys less than the node's key.\n- The right subtree of a node contains only nodes with keys greater than the node's key.\n- Both the left and right subtrees must also be binary search trees.\n\nExample:\nInput: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4.\n\nApproach:\n- Initialize the range with LONG_MIN and LONG_MAX values.\n- Now, if a node->val is out of the range then it's not a BST\n- And, then check for the left and right subtrees with modified range \n\nTime Complexity: O(n)\n- The in-order traversal visits each node exactly once, where n is the number of nodes in the binary tree.\n\nSpace Complexity: O(h)\n- The space complexity is determined by the recursion stack during the in-order traversal, where h is the height of the binary tree.\n- In the worst case, the height of the binary tree can be n for a skewed tree, so the space complexity becomes O(n).\n- However, for a balanced BST, the height is log n, so the space complexity becomes O(log n).\n\n*/\n\nbool solve(TreeNode* root, long low, long high){\n    if(!root) return true;\n    if(root->val >= high || root->val <= low) return false;\n    return solve(root->left,low,(long)root->val) && solve(root->right,(long)root->val,high); \n}\n\nbool isValidBST(TreeNode* root) {\n    if(!root) return true;\n    return solve(root,LONG_MIN,LONG_MAX);\n}\n",
  " Zig-Zag Traversal": "/*\nQuestion:\nGiven the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n\nApproach:\n- We can use a queue to perform a level order traversal of the binary tree.\n- To achieve the zigzag order, we can use a flag variable to keep track of the current direction (left to right or right to left) for each level.\n- Initialize a boolean variable `ltor` to true, where true represents the left to right direction.\n- While traversing each level, we store the values of the nodes in a temporary vector.\n- If `ltor` is true, we push the left child first and then the right child into the queue for the next level.\n- If `ltor` is false, we push the right child first and then the left child into the queue for the next level.\n- After processing all the nodes in the current level, if `ltor` is false, we reverse the temporary vector to achieve the right to left direction for the next level.\n- We alternate the value of `ltor` after processing each level to switch between left to right and right to left directions.\n- Finally, we return the vector containing the zigzag level order traversal.\n\nComplexity Analysis:\n- Since we visit each node once and perform constant time operations for each node, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(M), where M is the maximum number of nodes at any level in the binary tree. In the worst case, the maximum number of nodes at any level can be N/2 (in a complete binary tree), resulting in O(N) space complexity.\n\nCode:\n*/\n\nvector<vector<int>> zigzagLevelOrder(TreeNode* root) {\n    if (!root) return {}; // Empty tree, return an empty vector\n\n    vector<vector<int>> ans; // Vector to store the zigzag level order traversal\n    queue<TreeNode*> q; // Queue for level order traversal\n    q.push(root);\n    bool ltor = true; // Flag variable to track the current direction (left to right or right to left)\n\n    while (!q.empty()) {\n        int n = q.size(); // Number of nodes at the current level\n        vector<int> levelValues; // Temporary vector to store the values of nodes at the current level\n\n        for (int i = 0; i < n; i++) {\n            TreeNode* curr = q.front();\n            q.pop();\n\n            levelValues.push_back(curr->val);\n\n            if (curr->left) q.push(curr->left);\n            if (curr->right) q.push(curr->right);\n        }\n\n        if (!ltor) {\n            reverse(levelValues.begin(), levelValues.end()); // Reverse the values to achieve right to left direction\n        }\n\n        ans.push_back(levelValues);\n\n        ltor = !ltor; // Alternate the direction for the next level\n    }\n\n    return ans;\n}\n",
  "Capacity_to_ship_packages": "/*\nQuestion:\nA conveyor belt has packages that must be shipped from one port to another within days days.\n\nThe ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.\n\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.\n\nExample:\n\nInput: weights = [1,2,3,4,5,6,7,8,9,10], days = 5\nOutput: 15\nExplanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nApproach:\nTo find the least weight capacity of the ship, we can use binary search. We set the low and high as the minimum and maximum weight from the weights array, respectively. Then, we iterate through the weights and check if it can be accommodated within the current capacity. If it can, we subtract the weight from the capacity. If it cannot, we increment the required number of days and update the capacity with the current weight. We continue this process until we find the minimum capacity that satisfies the given number of days.\n\nCode:\n*/\n\nbool isPossible(int mid, vector<int>& weights, int days){\n    int req_day = 1, temp = mid;\n    for(auto it:weights){\n        if(it <= temp){\n            temp -= it;\n        }\n        else{\n            req_day++;\n            if(it > mid)\n                return false;\n            temp = mid - it;\n        }\n    }\n    if(req_day <= days)\n        return true;\n    return false;\n}\n\nint shipWithinDays(vector<int>& weights, int days) {\n    int ans = -1;\n    int low = INT_MAX, high = 0;\n    for(auto it:weights){\n        low = min(low, it);\n        high += it;\n    }\n    while(low <= high){\n        int mid = low + (high - low) / 2;\n        if(isPossible(mid, weights, days)){\n            ans = mid;\n            high = mid - 1;\n        }\n        else\n            low = mid + 1;\n    }\n    return ans;\n}\n\n/*\n- Time Complexity: O(N log M), where N is the size of the weights array and M is the sum of all the weights.\n- Space Complexity: O(1) as we are using a constant amount of extra space.\n*/\n\n",
  "Check_for_palindrome_LL": "/*\nQUESTION:-\nGiven the head of a singly linked list, return true if it is a palindrome or false otherwise.\n\nExample 1:\nInput: head = [1,2,2,1]\nOutput: true\n\nExample 2:\nInput: head = [1,2]\nOutput: false\n*/\n\n/*\nAPPROACH:\nTo determine if a linked list is a palindrome, we can follow these steps:\n1. Find the middle node of the linked list using the slow and fast pointer technique.\n2. Reverse the second half of the linked list.\n3. Compare the first half of the original linked list with the reversed second half.\n4. If all nodes match, the linked list is a palindrome.\n5. If any node does not match, the linked list is not a palindrome.\n*/\n\nListNode* reverseLL(ListNode* start) {\n    ListNode* prev = NULL;\n    ListNode* curr = start;\n    while (curr) {\n        ListNode* frwd = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = frwd;\n    }\n    return prev;\n}\n\nbool isPalindrome(ListNode* head) {\n    ListNode* slow = head;\n    ListNode* fast = head;\n    \n    // Find the middle node using the slow and fast pointer technique\n    while (fast && fast->next) {\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n    \n    // Reverse the second half of the linked list\n    ListNode* reversedHalf = reverseLL(slow);\n    \n    // Compare the first half with the reversed second half\n    while (reversedHalf) {\n        if (head->val != reversedHalf->val)\n            return false;\n        head = head->next;\n        reversedHalf = reversedHalf->next;\n    }\n    \n    return true;\n}\n\n// TIME COMPLEXITY: O(N)\n// SPACE COMPLEXITY: O(1)\n\n\n",
  "Check_for_rotated_string": "/*\nQUESTION: Rotate String\nGiven two strings s and goal, return true if and only if s can become goal after some number of shifts on s.\n\nA shift on s consists of moving the leftmost character of s to the rightmost position.\n\nExample:\nInput: s = \"abcde\", goal = \"cdeab\"\nOutput: true\n\nInput: s = \"abcde\", goal = \"abced\"\nOutput: false\n\nApproach:\n- First, we check if the lengths of the two strings `s` and `goal` are equal. If not, they cannot be rotated versions of each other, so we return `false`.\n- Then, we concatenate `s` with itself to create a new string `concat`.\n- We check if `goal` is a substring of `concat`. If it is, that means `s` can be transformed into `goal` by performing some number of left shifts, so we return `true`. Otherwise, we return `false`.\n\nCODE:-\n*/\n\nbool rotateString(string s, string goal) {\n    if (s.size() != goal.size())\n        return false;\n    if ((s + s).find(goal) == string::npos)\n        return false;\n    return true;\n}\n\n/*\nTime Complexity: The time complexity of this approach is O(N^2), where N is the length of the input strings `s` and `goal`. This is because the `find` function is used to search for the substring `goal` within the concatenated string, which has a time complexity of O(N^2).\nSpace Complexity: The space complexity is O(N), where N is the length of the input string `s`. This is because we create a new string `concat` by concatenating `s` with itself.\n*/\n",
  "First_and_last_position": "/*\nQUESTION:\nGiven an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\n\nIf target is not found in the array, return [-1, -1].\n\nYou must write an algorithm with O(log n) runtime complexity.\n\nExample:\n\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\n\nAPPROACH:\n1. Use lower_bound to find the index of the first occurrence of the target in the array.\n2. If the target is not found, return [-1, -1].\n3. Use upper_bound to find the index of the last occurrence of the target in the array.\n4. Return the range [first, last-1] as the starting and ending positions.\n\nCODE:\n*/\n\nvector<int> searchRange(vector<int>& nums, int target) {\n    int first = lower_bound(nums.begin(), nums.end(), target) - nums.begin();\n    // if the target is not found, return [-1, -1]\n    if (first == nums.size() || nums[first] != target)\n        return {-1, -1};\n    int last = upper_bound(nums.begin(), nums.end(), target) - nums.begin();\n    return {first, last-1};\n}\n\n// TIME COMPLEXITY: O(log n)\n// SPACE COMPLEXITY: O(1)\n",
  "Longest_palindromic_substring": "/*\nQuestion:-\nGiven a string `s`, the task is to find the longest palindromic substring in `s`.\n\nExample 1:\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n\nExample 2:\nInput: s = \"cbbd\"\nOutput: \"bb\"\n\nApproach:\n1. We define a helper function `expandFromCenter` that takes a string `s`, and two indices `start` and `end` as input.\n2. The function expands from the center and checks if the substring from `start` to `end` is a palindrome.\n3. If the length of the current palindrome is greater than the maximum length seen so far (`maxLen`), we update the maximum length and the corresponding start and end indices (`ans_start` and `ans_end`).\n4. We iterate over each character of the string `s` and consider it as a potential center for the palindrome.\n5. We call `expandFromCenter` twice for each character - once for considering odd-length palindromes and once for even-length palindromes.\n6. Finally, we return the substring of `s` that corresponds to the longest palindromic substring.\n\nCode:*/\n\nvoid expandFromCenter(string s, int start, int end, int& ans_start, int& ans_end, int& maxLen) {\n    while (start >= 0 && end < s.size() && s[start] == s[end]) {\n        if (end - start + 1 > maxLen) {\n            ans_start = start;\n            ans_end = end;\n            maxLen = end - start + 1;\n        }\n        start--;\n        end++;\n    }\n}\n\nstring longestPalindrome(string s) {\n    string ans = \"\";\n    int maxLen = 0, ans_start = -1, ans_end = -1;\n    for (int i = 0; i < s.size(); i++) {\n        // For odd length palindromes\n        expandFromCenter(s, i, i, ans_start, ans_end, maxLen);\n        // For even length palindromes\n        expandFromCenter(s, i - 1, i, ans_start, ans_end, maxLen);\n    }\n    return (maxLen == 0) ? \"\" : s.substr(ans_start, ans_end - ans_start + 1);\n}\n\n/*\nTime Complexity: O(n^2), where n is the length of the input string `s`. The nested loops iterate over all possible pairs of indices.\nSpace Complexity: O(1), as we are using a constant amount of extra space.\n*/\n",
  "Rotate_array_left&right_by_k_places": "/*\nQUESTION:-\n\nGiven an integer array nums, rotate the array to the right by k steps, where k is non-negative.\n\nExample 1:\n\nInput: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\nExample 2:\n\nInput: nums = [-1,-100,3,99], k = 2\nOutput: [3,99,-1,-100]\nExplanation:\nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\n*/\n\n/*\nAPPROACH:-\nTo rotate the array k places to right follow below steps\n-> Reverse first n-k elements\n-> Reverse last k elements\n-> Reverse the entire array\n\nTo rotate the array k places to left follow below steps\n-> Reverse first k elements\n-> Reverse last n-k elements\n-> Reverse the entire array\n*/\n\n// CODE:-\n\n// RIGHT ROATATE:-\nvoid rightRotate(int arr[], int n, int k)\n{\n    k = k % n; // to keep k within the range\n    reverse(arr, arr + (n - k));\n    reverse(arr + (n - k), arr + n);\n    reverse(arr, arr + n);\n}\n\n// LEFT ROATATE:-\nvoid leftRotate(int arr[], int n, int k)\n{\n    k = k % n; // to keep k within the range\n    reverse(arr, arr + k);\n    reverse(arr + k, arr + n);\n    reverse(arr, arr + n);\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(0)",
  "Stock_buy_sell": "/*\nQUESTION:-\nYou are given an array prices where prices[i] is the price of a given stock on the ith day.\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n\nExample 1:\n\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\nExample 2:\n\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n*/\n\n/*\nAPPROACH:-\nInitialize two variables: min_price and max_profit.\n\n-> min_price = minimum price in the array.\n-> max_profit = 0.\n\nIterate through the array, and for each price:\n\n-> Update min_price to the minimum price seen so far.\n-> Update max_profit to the maximum profit seen so far, or the current price minus min_price, whichever is greater.\n\nReturn max_profit.\n*/\n\n// CODE:-\nint maxProfit(vector<int> &prices)\n{\n    int minprice = prices[0];\n    int ans = 0;\n    for (int i = 1; i < prices.size(); i++)\n    {\n        ans = max(ans, prices[i] - minprice);\n        minprice = min(minprice, prices[i]);\n    }\n    return ans;\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(0)",
  "Subarrays_with_xor_k": "/*QUESTION:\nGiven an array 'A' consisting of 'N' integers and an integer 'B', find the number of subarrays of array 'A' whose bitwise XOR of all elements is equal to 'B'.\n\nExample:\nInput: 'N' = 4, 'B' = 2\n'A' = [1, 2, 3, 2]\nOutput: 3\nExplanation: Subarrays have bitwise xor equal to '2' are: [1, 2, 3, 2], [2], [2].\n\nAPPROACH:\nTo find the number of subarrays with bitwise XOR equal to B, we can use the technique of prefix XOR along with a hashmap.\n1. Initialize a variable `prefixXOR` to keep track of the prefix XOR while iterating through the array.\n2. Initialize a variable `count` to keep track of the count of subarrays with XOR equal to B.\n3. Initialize a hashmap `xorCount` to store the frequency of prefix XOR values encountered so far.\n4. Set the initial prefix XOR to 0 and set its count to 1 in the `xorCount` hashmap.\n5. Iterate through the array and update the prefix XOR by XOR-ing each element.\n6. Check if the current prefix XOR is equal to B. If it is, increment the `count` variable.\n7. Check if the XOR of the current prefix XOR with B exists in the `xorCount` hashmap. If it does, add the count of that XOR value to the `count` variable.\n8. Increment the count of the current prefix XOR in the `xorCount` hashmap.\n9. Finally, return the `count` variable as the number of subarrays with XOR equal to B.\n\nCODE:\n*/\n\nint subarraysWithSumK(vector<int> a, int b) {\n    int pref_xr = 0;\n    int ans = 0;\n    unordered_map<int, int> mp;\n    \n    for(int i = 0; i < a.size(); i++){\n        pref_xr = pref_xr ^ a[i];\n        \n        if(pref_xr == b)\n            ans++;\n        \n        if(mp.find(pref_xr ^ b) != mp.end()){\n            ans += mp[pref_xr ^ b];\n        }\n        \n        mp[pref_xr]++;\n    }\n    \n    return ans;\n}\n\n/*\nTIME COMPLEXITY: O(n), where n is the size of the input array a.\nSPACE COMPLEXITY: O(n), as we are using a hashmap to store the prefix XOR values and their corresponding counts.\n*/\n\n",
  "Subset 2": "/*QUESTION:\nGiven an integer array nums that may contain duplicates, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.\n\nExample:\nInput: nums = [1,2,2]\nOutput: [[],[1],[1,2],[1,2,2],[2],[2,2]]\nExample:\nInput: nums = [0]\nOutput: [[],[0]]\n\nApproach:\nTo find all possible subsets without duplicates, we can use a recursive backtracking approach.\n1. Sort the input array nums in non-decreasing order to handle duplicates.\n2. Create a helper function called 'solve' that takes the current index, the array nums, a temporary vector to store the current subset, and a vector of vector to store all subsets as parameters.\n3. In the 'solve' function:\n   - Add the current subset to the vector of subsets.\n   - Iterate from the current index to the end of the array:\n     - If the current index is greater than the starting index and the current element is the same as the previous element, skip the iteration to avoid duplicates.\n     - Add the current element to the current subset.\n     - Recursively call the 'solve' function with the updated index, the array nums, the current subset, and the vector of subsets.\n     - Remove the last added element from the current subset (backtracking).\n4. Create the main function called 'subsetsWithDup' that calculates and returns the vector of subsets without duplicates.\n   - Sort the input array nums.\n   - Initialize an empty vector to store the subsets.\n   - Call the 'solve' function with the initial index as 0, the array nums, an empty temporary vector, and the vector of subsets.\n   - Return the vector of subsets.\n\nTime Complexity: O(2^N), where N is the size of the input array nums. This is because there are 2^N possible subsets.\nSpace Complexity: O(N), where N is the size of the input array nums. This is the space required to store the subsets.\n\nCODE:*/\n\nvoid solve(int index, vector<int>& nums, vector<int>& temp, vector<vector<int>>& ans){\n    if(index==nums.size()){\n        ans.push_back(temp);\n        return;\n    }\n    // to include\n    temp.push_back(nums[index]);\n    solve(index+1,nums,temp,ans);\n    temp.pop_back();\n\n    // to remove duplicates\n    while(index+1<nums.size() && nums[index]==nums[index+1])\n        index++;\n\n    // to exclude\n    solve(index+1,nums,temp,ans);\n}\n\nvector<vector<int>> subsetsWithDup(vector<int>& nums) {\n\tsort(nums.begin(), nums.end());\n\tvector<vector<int>> ans;\n\tvector<int> temp;\n\tsolve(0, nums, temp, ans);\n\treturn ans;\n}\n",
  "Swap two numbers without temporary variable": "/*\nQUESTION:\nGiven two numbers a and b, swap their values without using a temporary variable and return them.\n\nExample:\nInput: a = 13, b = 9\nOutput: 9 13\nExplanation: After swapping, the values become 9 and 13.\n\nAPPROACH:\nTo swap two numbers a and b without using a temporary variable, we can use the XOR (^) operation.\n1. Set a = a XOR b, which XORs the binary representations of a and b and stores the result in a.\n2. Set b = a XOR b, which XORs the new value of a (after step 1) with the original value of b, and stores the result in b.\n3. Set a = a XOR b, which XORs the new value of a (after step 1) with the new value of b (after step 2), and stores the result in a.\n4. The values of a and b are swapped.\n\nCODE:*/\npair<int, int> get(int a, int b){\n    a = a^b;\n    b = a^b; \n    a = a^b;\n    return {a, b};\n}\n\n// Time Complexity: O(1)\n// Space Complexity: O(1)\n\n",
  "Word Break": "/**\n * QUESTION: Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\n * \n * Example:\n * Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\n * Output: true\n * Explanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n *\n * Approach:\n * We can solve this problem using a recursive approach with backtracking.\n * 1. Start from the beginning of the string and try to find a word from the dictionary that matches a substring starting at the current index.\n * 2. If we find a match, recursively call the function on the remaining substring.\n * 3. Repeat this process until we reach the end of the string.\n * 4. If we can successfully break the string into words, we return true. Otherwise, we return false.\n *\n * Time Complexity: O(2^N), where N is the length of the string. In the worst case, we can have 2^N recursive calls.\n * Space Complexity: O(N), where N is the length of the string. The recursion stack can go up to N in the worst case.\n */\n\nbool solve(int index, string& s, unordered_set<string>& dict) {\n    if (index >= s.size()) {\n        return true;\n    }\n\n    for (int i = index; i < s.size(); i++) {\n        string temp = s.substr(index, i - index + 1);\n\n        if (dict.find(temp) != dict.end() && solve(i + 1, s, dict)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nbool wordBreak(string s, vector<string>& wordDict) {\n    unordered_set<string> dict;\n    for (int i = 0; i < wordDict.size(); i++) {\n        dict.insert(wordDict[i]);\n    }\n    return solve(0, s, dict);\n}\n",
  " Boundary Traversal": "/*\nQuestion:\nGiven a Binary Tree, find its Boundary Traversal. The traversal should be in the following order:\n\nLeft boundary nodes: defined as the path from the root to the left-most node, i.e., the leaf node you could reach when you always travel preferring the left subtree over the right subtree.\nLeaf nodes: All the leaf nodes except for the ones that are part of the left or right boundary.\nReverse right boundary nodes: defined as the path from the right-most node to the root. The right-most node is the leaf node you could reach when you always travel preferring the right subtree over the left subtree. Exclude the root from this as it was already included in the traversal of left boundary nodes.\nNote: If the root doesn't have a left subtree or right subtree, then the root itself is the left or right boundary.\n\nApproach:\n- We can divide the boundary traversal into three parts: left boundary nodes, leaf nodes, and reverse right boundary nodes.\n- To find the left boundary nodes, we can traverse the left subtree from the root to the leftmost leaf node. We add the values of the nodes to the answer vector during this traversal.\n- To find the leaf nodes, we can perform a separate recursive traversal of the binary tree and add the values of the leaf nodes (excluding the ones already included in the left boundary or right boundary) to the answer vector.\n- To find the reverse right boundary nodes, we can traverse the right subtree from the root to the rightmost leaf node (excluding the root). We add the values of the nodes to the answer vector during this traversal.\n- Finally, we return the answer vector containing the boundary traversal.\n\nComplexity Analysis:\n- Since we visit each node once and perform constant time operations for each node, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(H), where H is the height of the binary tree. In the worst case, the height of the binary tree can be N, resulting in O(N) space complexity.\n\nCode:\n*/\n\nvoid leftTraversal(TreeNode<int>* root, vector<int>& ans) {\n    if (!root) return;\n    if (!root->left && !root->right) return;\n\n    ans.push_back(root->val);\n\n    if (root->left)\n        leftTraversal(root->left, ans);\n    else\n        leftTraversal(root->right, ans);\n}\n\nvoid leafTraversal(TreeNode<int>* root, vector<int>& ans) {\n    if (!root) return;\n    if (!root->left && !root->right) {\n        ans.push_back(root->val);\n    }\n    leafTraversal(root->left, ans);\n    leafTraversal(root->right, ans);\n}\n\nvoid rightTraversal(TreeNode<int>* root, vector<int>& ans) {\n    if (!root) return;\n    if (!root->left && !root->right) return;\n\n    int temp = root->val;\n\n    if (root->right)\n        rightTraversal(root->right, ans);\n    else\n        rightTraversal(root->left, ans);\n\n    ans.push_back(temp);\n}\n\nvector<int> boundaryTraversal(TreeNode<int>* root) {\n    if (!root) return {};\n    vector<int> ans;\n\n    ans.push_back(root->val);\n    leftTraversal(root->left, ans);\n    leafTraversal(root->left, ans);\n    leafTraversal(root->right, ans);\n    rightTraversal(root->right, ans);\n\n    return ans;\n}\n",
  " Coin Change": "/*\nQUESTION:\nGiven an integer array 'coins' representing coins of different \ndenominations and an integer 'amount' representing a total amount \nof money, the task is to return the fewest number of coins that \nyou need to make up that amount. If that amount of money cannot \nbe made up by any combination of the coins, return -1.\n\nExample:\nInput: coins = [1, 2, 5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1\n\nAPPROACH:\n- This problem can be solved using Dynamic Programming (DP).\n- Initialize a 2D DP array 'dp' where dp[i][j] represents the minimum \n  number of coins needed to make up amount 'j' using the first 'i' coins.\n- Base case:\n  - dp[i][0] = 0 for all 'i' (no coins needed to make 0 amount)\n  - dp[0][j] = 1e9 (no way to make up any amount using 0 coins)\n- For each coin 'i' and each possible amount 'j':\n  - dp[i][j] = min(dp[i-1][j], dp[i][j - coins[i]] + 1)\n- The required answer will be dp[n][amount] where 'n' is the number \n  of coins and 'amount' is the given total amount.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of the solution is O(N * amount), where 'N' is \n  the number of coins and 'amount' is the given total amount.\n- The space complexity is O(N * amount) for the dp array.\n\nCODE:\n*/\n\n// Memoization\nint fmemo(int i, int amt, vector<int>& coins, vector<vector<int>>& dp){\n    if(amt == 0) return 0;\n    if(i == 0){\n        if(amt % coins[i] == 0) return amt / coins[i];\n        else return 1e9;\n    }\n\n    if(dp[i][amt] != -1) return dp[i][amt];\n\n    int take = 1e9;\n    if(coins[i] <= amt) take = 1 + fmemo(i, amt - coins[i], coins, dp);\n    int notake = fmemo(i - 1, amt, coins, dp);\n    \n    return dp[i][amt] = min(take, notake);\n}\n\n// Tabulation\nint ftab(int n, int amount, vector<int>& coins){\n    vector<vector<int>> dp(n,vector<int>(amount+1));\n    for(int i=0; i<n; i++){\n        for(int amt=0; amt<=amount; amt++){\n            if(amt==0) {\n                dp[i][amt] = 0;\n                continue;\n            }\n            if(i==0){\n                if(amt%coins[i]==0) dp[i][amt] =  amt/coins[i];\n                else dp[i][amt] = 1e9;\n                continue;\n            }\n            int take = 1e9;\n            if(coins[i]<=amt) take = 1+dp[i][amt-coins[i]];\n            int notake = dp[i-1][amt];\n            dp[i][amt] = min(take,notake);\n        }\n    }\n    return dp[n-1][amount];\n}\n\n// Space Optimization\nint fopt(int n, int amount, vector<int>& coins){\n    vector<int> prev(amount+1);\n    for(int i=0; i<n; i++){\n        vector<int> curr(amount+1);\n        for(int amt=0; amt<=amount; amt++){\n            if(amt==0) {\n                curr[amt] = 0;\n                continue;\n            }\n            if(i==0){\n                if(amt%coins[i]==0) curr[amt] =  amt/coins[i];\n                else curr[amt] = 1e9;\n                continue;\n            }\n            int take = 1e9;\n            if(coins[i]<=amt) take = 1+curr[amt-coins[i]];\n            int notake = prev[amt];\n            curr[amt] = min(take,notake);\n        }\n        prev = curr;\n    }\n    return prev[amount];\n}\n\nint coinChange(vector<int>& coins, int amount) {\n    int n = coins.size();\n    vector<vector<int>> dp(n, vector<int>(amount + 1, -1));\n    int ans = fmemo(n - 1, amount, coins, dp);\n    return (ans == 1e9) ? -1 : ans;\n}\n",
  " Count nodes in complete binary tree": "/* QUESTION:\n\nGiven the root of a complete binary tree, return the number of nodes in the tree.\n\nAccording to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\n\nDesign an algorithm that runs in less than O(n) time complexity.\n\n\nAPPROACH:\n\nTo count the number of nodes in the complete binary tree efficiently, we can make use of the property of complete binary trees. Since all levels of the tree, except possibly the last level, are completely filled, we can perform binary search on the last level to find the number of nodes.\n\n1. First, we calculate the height of the left and right subtrees starting from the root.\n2. If the height of the left subtree is equal to the height of the right subtree, it means that the last level is completely filled, and the number of nodes in the tree is 2^h - 1, where h is the height of the tree.\n3. If the heights are not equal, it means that the last level is not completely filled. In this case, we recursively calculate the number of nodes in the left and right subtrees and add 1 (for the root node) to get the total number of nodes in the tree.\n\nCOMPLEXITY ANALYSIS:\n\nLet n be the number of nodes in the complete binary tree.\n- Time Complexity: The time complexity of this approach is O(log^2 n), as we perform binary search on the last level, and at each step, we calculate the height of the left and right subtrees, which takes O(log n) time. We do this operation recursively, so the overall time complexity is O(log^2 n).\n- Space Complexity: The space complexity is O(log n) due to the recursion stack, where n is the height of the complete binary tree.\n\nCODE:\n*/\n\nint leftHeight(TreeNode* root) {\n    int h = 1;\n    while (root) {\n        h++;\n        root = root->left;\n    }\n    return h;\n}\n\nint rightHeight(TreeNode* root) {\n    int h = 1;\n    while (root) {\n        h++;\n        root = root->right;\n    }\n    return h;\n}\n\nint countNodes(TreeNode* root) {\n    if (!root) return 0;\n    int lh = leftHeight(root->left);\n    int rh = rightHeight(root->right);\n    if (lh == rh)\n        return pow(2, lh) - 1;\n    return 1 + countNodes(root->left) + countNodes(root->right);\n}\n",
  " Divide array into sets of K consecutive number": "/*\nQUESTION:\nGiven an array of integers nums and a positive integer k, check whether it is possible to divide this array into sets of k consecutive numbers.\n\nReturn true if it is possible. Otherwise, return false.\n\nExample:\n\nInput: nums = [1,2,3,3,4,4,5,6], k = 4\nOutput: true\nExplanation: Array can be divided into [1,2,3,4] and [3,4,5,6].\n*/\n\n/*\nAPPROACH:\n1. First, we check if the array size is divisible by k. If not, it is not possible to divide the array into sets of k consecutive numbers.\n2. We use a frequency map mp to count the occurrences of each element in the array.\n3. We sort the array nums in ascending order.\n4. For each number num in nums, we check if it is still available (mp[num] > 0).\n5. If num is available, we iterate from num + 1 to num + k - 1 and check if each number is available in mp as well. If any number is not available, we return false.\n6. If all numbers are available, we decrement the counts in mp accordingly.\n7. If we reach the end of the loop, it means it is possible to divide the array into sets of k consecutive numbers, and we return true.\n*/\n\n/*\nCOMPLEXITY ANALYSIS:\n- Time complexity: O(n log n), where n is the size of the input array nums. The complexity is dominated by the sorting step.\n- Space complexity: O(n), to store the frequency map mp.\n*/\n\nbool isPossibleDivide(vector<int>& nums, int k) {\n    if (nums.size() % k != 0) {\n        return false;\n    }\n    unordered_map<int, int> mp;\n    for (auto it : nums)\n        mp[it]++;\n    sort(nums.begin(), nums.end());\n\n    for (auto num : nums) {\n        if (mp[num] > 0) {\n            for (int i = num + 1; i < num + k; i++) {\n                if (mp[i] == 0)\n                    return false;\n                mp[i]--;\n            }\n            mp[num]--;\n        }\n    }\n    return true;\n}\n\n",
  " Implement min stack": "/*\nQUESTION:\nDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.\nImplement the MinStack class.\nMinStack() initializes the stack object.\nvoid push(int val) pushes the element val onto the stack.\nvoid pop() removes the element on the top of the stack.\nint top() gets the top element of the stack.\nint getMin() retrieves the minimum element in the stack.\nYou must implement a solution with O(1) time complexity for each function.\n\nExample:\nInput:\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\nOutput:\n[null,null,null,null,-3,null,0,-2]\nExplanation:\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n\nAPPROACH:\n- We can use an auxiliary stack to keep track of the difference of an element from the minimum element at each step.\n- When pushing an element, we push the difference of an element from the minimum element at that time.\n- When popping an element, we check stack top if it's -ve it means that this element is the minimum so we update the mini as we popping the current minimum.\n- To get the top element, we add the current minimum to the top element of the main stack.\n- To get the minimum element, we simply return the current minimum.\n\nCODE:\n*/\n\nclass MinStack {\nprivate:\n    stack<long long> st;\n    int mini;\npublic:\n    MinStack() {\n        mini = -1;\n    }\n    \n    void push(int val) {\n        if (st.empty()) {\n            st.push(0);\n            mini = val;\n        } else {\n            st.push((long long)val - mini);// to handle overflow case\n            mini = min(val, mini);\n        }\n    }\n    \n    void pop() {\n        if (st.top() < 0)\n            mini = mini - st.top();\n        st.pop();\n    }\n    \n    int top() {\n        int ans = -1;\n        if (st.top() < 0)\n            ans = mini;\n        else\n            ans = mini + st.top();\n        return ans;\n    }\n    \n    int getMin() {\n        return mini;\n    }\n};\n\n/*\nCOMPLEXITY ANALYSIS:\n- All the operations (push, pop, top, getMin) have O(1) time complexity as we are performing constant-time operations on the stack.\n- The space complexity is O(n) as we use an auxiliary stack to store the minimum elements.\n*/\n",
  " Insert Interval": "/*\nQuestion:\nYou are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\n\nInsert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n\nReturn intervals after the insertion.\n\nExample:\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n\nApproach:\n- We iterate through the intervals and compare them with the newInterval.\n- There are three possible cases:\n  1. The newInterval is before the current interval: We add the newInterval and update the newInterval to the current interval.\n  2. The newInterval is after the current interval: We add the current interval to the result.\n  3. The newInterval overlaps with the current interval: We update the newInterval to cover the merged interval.\n\nComplexity Analysis:\n- The time complexity of this approach is O(N), where N is the number of intervals.\n- We iterate through the intervals once.\n- The space complexity is O(1) as we are using a constant amount of additional space.\n\nCode:\n*/\n\nvector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {\n    vector<vector<int>> ans;\n    int n = intervals.size();\n\n    for(int i = 0; i < n; i++) {\n        // newInterval is after the current interval\n        if(intervals[i][1] < newInterval[0]) {\n            ans.push_back(intervals[i]);\n        }\n        // newInterval is before the current interval\n        else if(newInterval[1] < intervals[i][0]) {\n            ans.push_back(newInterval);\n            newInterval = intervals[i];\n        }\n        // newInterval overlaps with the current interval\n        else {\n            newInterval[0] = min(intervals[i][0], newInterval[0]);\n            newInterval[1] = max(intervals[i][1], newInterval[1]);\n        }\n    }\n    ans.push_back(newInterval);\n    return ans;\n}\n",
  " Iterative Preorder Traversal": "/*\nQuestion:\nGiven the root of a binary tree, return the preorder traversal of its nodes' values.\n\nApproach:\n- We can perform a preorder traversal iteratively using a stack.\n- We start by pushing the root node into the stack.\n- Then, while the stack is not empty, we pop a node from the stack, add its value to the result vector, and push its right child (if it exists) followed by its left child (if it exists) into the stack.\n- By pushing the right child before the left child, we ensure that the left child is processed first during the traversal.\n\nComplexity Analysis:\n- Since we visit each node once and perform constant time operations for each node, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(N) as we store the node values in the result vector.\n\nCode:\n*/\n\nvector<int> preorderTraversal(TreeNode* root) {\n    if (!root) {\n        return {};\n    }\n    stack<TreeNode*> st;\n    st.push(root);\n    vector<int> ans;\n    while (!st.empty()) {\n        TreeNode* curr = st.top();\n        st.pop();\n        ans.push_back(curr->val);\n        if (curr->right) {\n            st.push(curr->right);\n        }\n        if (curr->left) {\n            st.push(curr->left);\n        }\n    }\n    return ans;\n}\n",
  " LCA in BST": "/*\nQuestion:\nGiven a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\n\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\n\nExample:\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\nExplanation: The LCA of nodes 2 and 8 is 6.\n\nApproach:\n- Traverse the BST from the root.\n- If both the nodes p and q are smaller than the current node's value, then the LCA must be in the left subtree. So, recursively call the function on the left subtree.\n- If both the nodes p and q are greater than the current node's value, then the LCA must be in the right subtree. So, recursively call the function on the right subtree.\n- If the current node's value is between the values of nodes p and q, then the current node is the LCA.\n\nTime Complexity: O(h)\n- h is the height of the BST.\n- In the worst case, the height of the BST can be n for a skewed tree, so the time complexity becomes O(n).\n- However, for a balanced BST, the height is log n, so the time complexity becomes O(log n).\n\nSpace Complexity: O(h)\n- The space complexity is determined by the recursion stack during the function call.\n- In the worst case, the height of the BST can be n for a skewed tree, so the space complexity becomes O(n).\n- However, for a balanced BST, the height is log n, so the space complexity becomes O(log n).\n*/\n\nTreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n    if ((p->val < root->val) && (q->val < root->val)) {\n        return lowestCommonAncestor(root->left, p, q);\n    }\n    if ((p->val > root->val) && (q->val > root->val)) {\n        return lowestCommonAncestor(root->right, p, q);\n    }\n    return root;\n}\n",
  " Making Large Island": "/*\nQUESTION:-\nYou are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.\nReturn the size of the largest island in grid after applying this operation.\nAn island is a 4-directionally connected group of 1s.\n\nApproach:\n1. Create a disjoint set to represent islands and initialize it with all cells.\n2. For each 1 cell, union it with its 4-directionally connected 1 cells in the disjoint set.\n3. Then, traverse the grid to find each 0 cell and count the size of connected islands that can be formed by changing this 0 to 1.\n4. Update the answer with the maximum island size found so far.\n5. Return the maximum island size.\n\nComplexity Analysis:\n- The time complexity of creating the disjoint set is O(n^2) as we need to initialize it with all cells.\n- The time complexity of the first pass (connecting 1 cells) is also O(n^2) as we traverse the entire grid once.\n- The time complexity of the second pass (counting island size for 0 cells) is O(n^2) as we again traverse the entire grid.\n- The time complexity of finding the maximum island size using the disjoint set is O(n^2) as we iterate through all cells.\n- Overall, the time complexity of the solution is O(n^2).\n- The space complexity is O(n^2) due to the disjoint set data structure.\n\nCODE:-\n*/\n\nclass DisjointSet {\npublic:\n    vector<int> parent, size;\n\n    DisjointSet(int n) {\n        size.resize(n, 1);\n        parent.resize(n);\n        for (int i = 0; i < n; i++)\n            parent[i] = i;\n    }\n\n    int findUPar(int node) {\n        if (parent[node] == node)\n            return node;\n        return parent[node] = findUPar(parent[node]);\n    }\n\n    void unionBySize(int u, int v) {\n        int uP = findUPar(u), vP = findUPar(v);\n        int uSize = size[uP], vSize = size[vP];\n        if (uSize > vSize) {\n            parent[vP] = uP;\n            size[uP] += vSize;\n        } else {\n            parent[uP] = vP;\n            size[vP] += uSize;\n        }\n    }\n};\n\nbool isLand(int i, int j, vector<vector<int>>& grid){\n    return (i >= 0 && i < grid.size() && j >= 0 && j < grid.size() && grid[i][j] == 1);\n}\n\nint largestIsland(vector<vector<int>>& grid) {\n    int n = grid.size();\n\n    vector<int> dr = {1, -1, 0, 0};\n    vector<int> dc = {0, 0, 1, -1};\n\n    DisjointSet djs(n * n);\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                int id = i * n + j;\n                for (int d = 0; d < 4; d++) {\n                    int ni = i + dr[d], nj = j + dc[d];\n                    if (isLand(ni, nj, grid)) {\n                        int nid = ni * n + nj;\n                        if (djs.findUPar(id) != djs.findUPar(nid))\n                            djs.unionBySize(id, nid);\n                    }\n                }\n            }\n        }\n    }\n    int ans = INT_MIN;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 0) {\n                unordered_set<int> st;\n                for (int d = 0; d < 4; d++) {\n                    int ni = i + dr[d], nj = j + dc[d];\n                    if (isLand(ni, nj, grid)) {\n                        int nid = ni * n + nj;\n                        st.insert(djs.findUPar(nid));\n                    }\n                }\n                int siz = 0;\n                for (auto u : st)\n                    siz += djs.size[u];\n                ans = max(ans, siz + 1);\n            }\n        }\n    }\n    for (int cellNo = 0; cellNo < n * n; cellNo++) {\n        ans = max(ans, djs.size[djs.findUPar(cellNo)]);\n    }\n    return ans;\n}",
  " Network Delay Time": "/* QUESTION:\n\nYou are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.\n\nWe will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.\n\nExample:\n\nInput: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2\nOutput: 2\n\nAPPROACH:\n- We can use Dijkstra's algorithm to find the minimum time it takes for all the nodes to receive the signal.\n- We will create an adjacency list to represent the graph, where each node will have a list of neighboring nodes with their corresponding signal travel time.\n- We will use a priority queue to perform Dijkstra's algorithm starting from the given node k.\n- During Dijkstra's algorithm, we will keep track of the minimum time to reach each node from the given node k.\n- Continue the algorithm until we have explored all nodes in the graph.\n- Return the maximum time among all the nodes' signal travel times, as this represents the minimum time it takes for all the nodes to receive the signal.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of Dijkstra's algorithm is O(E*log(V)), where E is the number of edges and V is the number of vertices.\n- The space complexity is O(V) to store the distance values.\n\nCODE:\n*/\n\nint networkDelayTime(vector<vector<int>>& times, int n, int k) {\n    vector<pair<int, int>> adj[n + 1];\n    for (auto time : times) {\n        adj[time[0]].push_back({time[1], time[2]});\n    }\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    vector<int> dis(n + 1, 1e9);\n    dis[k] = 0;\n    pq.push({0, k});\n    while (!pq.empty()) {\n        auto [uwt, u] = pq.top();\n        pq.pop();\n        for (auto [v, vwt] : adj[u]) {\n            if (dis[v] > uwt + vwt) {\n                dis[v] = uwt + vwt;\n                pq.push({dis[v], v});\n            }\n        }\n    }\n    int ans = INT_MIN;\n    for (int i = 1; i <= n; i++) {\n        if (dis[i] == 1e9)\n            return -1;\n        ans = max(ans, dis[i]);\n    }\n    return ans;\n}\n",
  " Number of Enclaves": "/*\nQUESTION:-\nYou are given an m x n binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.\n\nA move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.\n\nReturn the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.\n\nAPPROACH:\n- We can use Depth-First Search (DFS) to mark all land cells connected to the boundary of the grid as uncountable (i.e., cells that we can walk off the boundary).\n- First, we initialize a copy of the grid called 'vis' to store the visited status of each cell.\n- Then, we perform DFS from all land cells located at the boundary of the grid. During the DFS, we mark all connected land cells as visited by changing their value to -1 in the 'vis' matrix.\n- After performing DFS from boundary cells, all remaining land cells in the 'vis' matrix represent cells that we cannot walk off the boundary of the grid.\n- Finally, we count the number of land cells in the 'vis' matrix and return the count as the result.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(m * n), where m is the number of rows and n is the number of columns in the matrix. In the worst case, we may need to visit all the cells of the matrix during DFS.\n- Space Complexity: O(m * n), where m is the number of rows and n is the number of columns in the matrix. We use additional space for the 'vis' matrix.\n*/\n\nvoid dfs(int i, int j, vector<vector<int>>& vis){\n    if(i >= 0 && i < vis.size() && j >= 0 && j < vis[0].size() && vis[i][j] == 1){\n        vis[i][j] = -1;\n        dfs(i + 1, j, vis);\n        dfs(i - 1, j, vis);\n        dfs(i, j + 1, vis);\n        dfs(i, j - 1, vis);\n    }\n}\n\nint numEnclaves(vector<vector<int>>& grid) {\n    int m = grid.size(), n = grid[0].size();\n    vector<vector<int>> vis(grid.begin(), grid.end());\n    \n    // Perform DFS from boundary cells\n    for(int i = 0; i < n; i++){\n        if(vis[0][i] == 1)\n            dfs(0, i, vis);\n        if(vis[m - 1][i] == 1)\n            dfs(m - 1, i, vis);\n    }\n    for(int i = 0; i < m; i++){\n        if(vis[i][0] == 1)\n            dfs(i, 0, vis);\n        if(vis[i][n - 1] == 1)\n            dfs(i, n - 1, vis);\n    }\n    \n    // Count the number of land cells that are not on the boundary\n    int ans = 0;\n    for(auto row : vis){\n        for(auto col : row){\n            if(col == 1)\n                ans++;\n        }\n    }\n    return ans;\n}\n",
  " Number of Substrings Containing all 3 characters": "/*\nQUESTION:\nGiven a string s consisting only of characters 'a', 'b', and 'c', you need to count the number of substrings that contain at least one occurrence of all these characters.\n\nAPPROACH:\nTo count the number of substrings with at least one occurrence of 'a', 'b', and 'c', we can use a sliding window approach.\n\n1. Create a helper function, countOfUnvalidSubstrings, which counts the number of substrings that do not contain all three characters.\n   - Initialize an unordered_map, mp, to keep track of the counts of characters in the current window.\n   - Initialize start to 0 and ans to 0.\n   - Iterate over the string from left to right:\n     - Increment the count of the current character in mp.\n     - If the number of unique characters in mp exceeds 2, it means we have found an invalid substring.\n       - Decrement the count of the character at the start of the window in mp.\n       - If the count becomes zero, remove the character from mp.\n       - Move the start of the window to the next position.\n     - Add the length of the current window to ans.\n   - Return ans.\n\n2. In the main function, numberOfSubstrings:\n   - Calculate the total number of substrings, cntOfTotalSubstrings, using the formula (n * (n + 1)) / 2, where n is the length of the string.\n   - Subtract the count of invalid substrings obtained from countOfUnvalidSubstrings from cntOfTotalSubstrings.\n   - Return the resulting count.\n*/\n\nint countOfUnvalidSubstrings(string& s) {\n    unordered_map<char, int> mp;\n    int start = 0, ans = 0;\n    \n    for (int i = 0; i < s.size(); i++) {\n        mp[s[i]]++;\n        \n        while (mp.size() > 2) {\n            mp[s[start]]--;\n            \n            if (mp[s[start]] == 0)\n                mp.erase(s[start]);\n            \n            start++;\n        }\n        \n        ans += i - start + 1;\n    }\n    \n    return ans;\n}\n\nint numberOfSubstrings(string s) {\n    long long n = s.size();\n    int cntOfTotalSubstrings = (n * (n + 1)) / 2;\n    return cntOfTotalSubstrings - countOfUnvalidSubstrings(s);\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- Time complexity: O(n), where n is the length of the string s. We iterate over the string once.\n- Space complexity: O(1), as the extra space used is constant throughout the algorithm.\n*/\n",
  " Remove K elements": "/*\nQUESTION:\nGiven string num representing a non-negative integer num, and an integer k,\nreturn the smallest possible integer after removing k digits from num.\n\nExample:\nInput: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n*/\n\n/*\nAPPROACH:\nThe idea is to use a stack to build the smallest number by removing larger digits.\nWe iterate through each digit in num and compare it with the digits in the stack.\nIf the current digit is smaller than the top of the stack, we pop elements from the stack\nuntil either the stack is empty or the top of the stack is smaller than or equal to the current digit.\nAfter processing all the digits, we remove any remaining digits from the stack to satisfy the required k digits to remove.\nFinally, we construct the result by popping elements from the stack and reverse it to get the correct order.\n*/\n\nstring removeKdigits(string num, int k) {\n    stack<char> st;\n    \n    for (char c : num) {\n        while (!st.empty() && k > 0 && st.top() > c) {\n            st.pop();\n            k--;\n        }\n        st.push(c);\n    }\n    \n    // Remove remaining digits from the back if k is still greater than 0\n    while (!st.empty() && k > 0) {\n        st.pop();\n        k--;\n    }\n    \n    // Construct the result by popping elements from the stack\n    string ans;\n    while (!st.empty()) {\n        ans.push_back(st.top());\n        st.pop();\n    }\n    \n    // Remove leading zeros\n    reverse(ans.begin(), ans.end());\n    while (!ans.empty() && ans.back() == '0') {\n        ans.pop_back();\n    }\n    \n    return ans.empty() ? \"0\" : ans;\n}\n\n/*\nComplexity Analysis:\n- The code iterates through each digit in the input string, so the time complexity is O(n),\n  where n is the length of the input string.\n- The space complexity is O(n) as well since the stack can potentially store all the digits in the input string.\n*/\n",
  " Shortest Common Supersequence": "/*\nQUESTION:\nGiven two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. \nIf there are multiple valid strings, return any of them.\n\nAPPROACH:\n- This problem can be solved using dynamic programming to find the length of the shortest common supersequence (SCS).\n- The SCS is the shortest string that contains both str1 and str2 as subsequences.\n- The idea is to first find the length of the SCS using a dynamic programming approach.\n- Once the length is found, we can construct the SCS using the dp array and backtracking.\n- We start from the last cell of the dp array and move either diagonally (when characters match) or towards the direction with the greater value.\n- During backtracking, we append the characters from str1 or str2 to the SCS string based on the movement direction.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of finding the length of the SCS is O(n*m), where n and m are the lengths of the two strings.\n- The space complexity is O(n*m) due to the dp array.\n- The backtracking process takes O(n + m) time.\n- Overall, the algorithm runs in O(n*m) time and O(n*m) space.\n\nCODE:\n*/\n\nstring shortestCommonSupersequence(string str1, string str2) {\n    int n = str1.size(), m = str2.size();\n    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));\n\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            if (str1[i - 1] == str2[j - 1])\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            else\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n\n    int i = n, j = m;\n    string scs = \"\";\n    while (i > 0 && j > 0) {\n        if (str1[i - 1] == str2[j - 1]) {\n            scs = str1[i - 1] + scs;\n            i--;\n            j--;\n        } else {\n            if (dp[i - 1][j] > dp[i][j - 1]) {\n                scs = str1[i - 1] + scs;\n                i--;\n            } else {\n                scs = str2[j - 1] + scs;\n                j--;\n            }\n        }\n    }\n    while (i > 0) {\n        scs = str1[i - 1] + scs;\n        i--;\n    }\n    while (j > 0) {\n        scs = str2[j - 1] + scs;\n        j--;\n    }\n    return scs;\n}\n",
  "Combination Sum 1": "/*QUESTION:\nGiven an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n\nExample:\nInput: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation: 2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times. 7 is a candidate, and 7 = 7. These are the only two combinations.\n\nApproach:\nTo find all unique combinations that sum up to the target, we can use a recursive backtracking approach.\n1. Create a helper function called 'solve' that takes the current index, the array of candidates, the target sum, a temporary vector to store the current combination, and a vector of vector to store all combinations as parameters.\n2. In the 'solve' function:\n   - If the target sum is equal to 0, add the current combination to the vector of combinations.\n   - If the current index is equal to the size of the array, return.\n   - If the current candidate value is less than or equal to the target sum:\n     - Add the current candidate to the current combination.\n     - Recursively call the 'solve' function with the updated index, the same array of candidates, the reduced target sum by subtracting the current candidate value, the current combination, and the vector of combinations.\n     - Remove the last added candidate from the current combination (backtracking).\n   - Recursively call the 'solve' function with the updated index by incrementing it, the same array of candidates, the same target sum, the current combination, and the vector of combinations.\n3. Create the main function called 'combinationSum' that calculates and returns the vector of combinations.\n   - Initialize an empty vector to store the combinations.\n   - Sort the array of candidates in non-decreasing order to handle duplicates.\n   - Call the 'solve' function with the initial index as 0, the array of candidates, the target sum, an empty temporary vector, and the vector of combinations.\n   - Return the vector of combinations.\n\nTime Complexity: O(N^target), where N is the size of the array of candidates and target is the target sum. In the worst case, we may have to explore all possible combinations, which is exponential.\nSpace Complexity: O(target), as the maximum depth of the recursion tree is determined by the target sum.\n\nCODE:*/\nvoid solve(int index, vector<int>& candidates, int target, vector<int>& temp, vector<vector<int>>& ans) {\n    if (target == 0) {\n        ans.push_back(temp);\n        return;\n    }\n\n    if (index == candidates.size() || target < 0)\n        return;\n\n    if (candidates[index] <= target) {\n        temp.push_back(candidates[index]);\n        solve(index, candidates, target - candidates[index], temp, ans);\n        temp.pop_back();\n    }\n\n    solve(index + 1, candidates, target, temp, ans);\n}\n\nvector<vector<int>> combinationSum(vector<int>& candidates, int target) {\n    vector<vector<int>> ans;\n    sort(candidates.begin(), candidates.end());\n    vector<int> temp;\n    solve(0, candidates, target, temp, ans);\n    return ans;\n}\n",
  "Divide two numbers using bit maipulation": "/*\nQUESTION:\nGiven two integers dividend and divisor, find the quotient after dividing dividend by divisor without using multiplication, division, and mod operator.\n\nExample:\nInput: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 gives a quotient of 3 and remainder of 1.\n\nAPPROACH:\nTo divide two integers without using multiplication, division, and mod operator, we can use a bitwise shifting approach.\n1. Initialize a variable ans as 0 to store the quotient.\n2. Check if the dividend and divisor have different signs to determine the sign of the quotient.\n3. Take the absolute values of the dividend and divisor to work with positive numbers.\n4. Iterate while the absolute value of the dividend is greater than or equal to the absolute value of the divisor:\n    a. Initialize a variable q as 1 to represent the current quotient digit.\n    b. Iterate while the absolute value of the dividend is greater than the absolute value of the divisor left-shifted by q:\n        i. Increment q.\n    c. Add (1 << (q - 1)) to the quotient ans.\n    d. Subtract the absolute value of the divisor left-shifted by (q - 1) from the absolute value of the dividend.\n5. Return the quotient ans, considering the sign based on the step 2.\n\nCODE:*/\n\nint divideTwoInteger(int dividend, int divisor) {\n    if (dividend == divisor)\n        return 1;\n\n    bool isNegative = ((dividend < 0 && divisor >= 0) || (dividend >= 0 && divisor < 0));\n\n    int ans = 0;\n    int a = abs(dividend);\n    int b = abs(divisor);\n\n    while (a >= b) {\n        // at each stage we will find the greatest power of 2 which is smaller than the dividend\n        int q = 1;\n        while (a > (b << q))\n            q++;\n        ans += (1 << (q - 1));\n        a -= (b << (q - 1));\n    }\n\n    return (isNegative) ? -ans : ans;\n}\n\n// Time Complexity: O(log n), where n is the absolute value of the dividend\n// Space Complexity: O(1)\n\n\n",
  "Merge_overlapping_subinterval": "/*\nQUESTION:\nGiven an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals and return an array of non-overlapping intervals that cover all the intervals in the input.\n\nExample 1:\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n\nAPPROACH:\nTo merge overlapping intervals, we can follow these steps:\n1. Sort the intervals based on the start time.\n2. Initialize a vector `ans` to store the merged intervals.\n3. Add the first interval from the sorted intervals to the `ans` vector.\n4. Iterate through the remaining intervals:\n   - If the start time of the current interval is less than or equal to the end time of the last interval in the `ans` vector, it means they overlap. Update the end time of the last interval in the `ans` vector if necessary.\n   - If the start time of the current interval is greater than the end time of the last interval in the `ans` vector, it means they don't overlap. Add the current interval to the `ans` vector.\n5. Return the `ans` vector as the merged non-overlapping intervals.\n\nCODE:\n*/\n\nvector<vector<int>> merge(vector<vector<int>>& intervals) {\n    sort(intervals.begin(), intervals.end());\n    vector<vector<int>> ans;\n    ans.push_back(intervals[0]);\n    \n    for(int i = 1; i < intervals.size(); i++){\n        if(ans.back()[1] >= intervals[i][0]){\n            ans.back()[1] = max(ans.back()[1], intervals[i][1]);\n        }\n        else{\n            ans.push_back(intervals[i]);\n        }\n    }\n    \n    return ans;\n}\n\n/*\nTIME COMPLEXITY: O(nlogn), where n is the number of intervals in the input.\nThe sorting step takes O(nlogn) time, and the merging step takes O(n) time.\nOverall, the time complexity is dominated by the sorting step.\nSPACE COMPLEXITY: O(n), where n is the number of intervals in the input.\nWe are using additional space to store the merged intervals in the `ans` vector.\n*/\n\n",
  "Move_0's_to_end": "/*\nQUESTION:-\nGiven an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\n\nNote that you must do this in-place without making a copy of the array.\n\nExample 1:\n\nInput: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]\nExample 2:\n\nInput: nums = [0]\nOutput: [0]\n*/\n\n/*\nAPPROACH:-\n-> The idea is while traversing the array if we found any zero then we have to swap it with next non-zero\n*/\n\n// CODE:-\n// function to find the next non-zero element\nint next_nonzero(vector<int> &a, int &j)\n{\n    while (j < a.size())\n    {\n        if (a[j] != 0)\n            return j;\n        j++;\n    }\n    return -1;\n}\nvoid moveZeroes(vector<int> &nums)\n{\n    int j = -1; // is to find the next non zero element\n    // i signifies that upto here all elements are non-zero\n    for (int i = 0; i < nums.size(); i++)\n    {\n        if (nums[i] != 0)\n            continue;\n        if (j == -1)\n            j = i + 1;\n        int nxt_non0 = next_nonzero(nums, j);\n        if (nxt_non0 == -1)\n            return;\n        swap(nums[i], nums[nxt_non0]);\n    }\n}\n\n// TIME COMPLEXITY = O(N) (as we moving j throught the array only once)\n// SPACE COMPLEXITY = O(0)",
  "Number_of_occurences": "/*\nQUESTION:\nGiven a sorted array Arr of size N and a number X, you need to find the number of occurrences of X in Arr.\n\nExample:\n\nInput:\nN = 7, X = 2\nArr[] = {1, 1, 2, 2, 2, 2, 3}\nOutput: 4\nExplanation: 2 occurs 4 times in the given array.\nExample 2:\n\nInput:\nN = 7, X = 4\nArr[] = {1, 1, 2, 2, 2, 2, 3}\nOutput: 0\nExplanation: 4 is not present in the given array.\n*/\n\n/*\nAPPROACH:\n1. Use binary search to find the first occurrence of the target element.\n2. Use binary search to find the last occurrence of the target element.\n3. Return the difference between the indices of the first and last occurrence + 1.\n\nCODE:\n*/\n\nint countOccurrences(int arr[], int n, int x) {\n    int first = lower_bound(arr, arr + n, x) - arr;\n    if (first == n || arr[first] != x)\n        return 0;\n    int last = upper_bound(arr, arr + n, x) - arr;\n    return last - first;\n}\n\n// TIME COMPLEXITY: O(log N), where N is the size of the array.\n// SPACE COMPLEXITY: O(1).\n",
  "Odd_even_LL": "/*\nQUESTION:-\nGiven the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\n\nExample 1:\nInput: head = [1,2,3,4,5]\nOutput: [1,3,5,2,4]\n\nExample 2:\nInput: head = [2,1,3,5,6,4,7]\nOutput: [2,3,6,7,1,5,4]\n*/\n\n/*\nAPPROACH:\nTo group nodes with odd indices together followed by nodes with even indices, we can follow these steps:\n1. Initialize two pointers, `odd` and `even`, to the first and second nodes respectively.\n2. Save the starting node of the even list as `evenHead`.\n3. Iterate while `odd->next` and `even` are not NULL.\n4. Connect the odd list with the next odd node (`odd->next = even->next`).\n5. Move the `odd` pointer to the next odd node (`odd = odd->next`).\n6. Connect the even list with the next even node (`even->next = odd->next`).\n7. Move the `even` pointer to the next even node (`even = even->next`).\n8. Connect the end of the odd list with the starting node of the even list (`odd->next = evenHead`).\n9. Return the head of the modified list.\n\nThis approach reorders the linked list in place without using any extra space.\n\nTIME COMPLEXITY: O(N)\nSPACE COMPLEXITY: O(1)\n*/\n\nListNode* oddEvenList(ListNode* head) {\n    if (!head || !head->next)\n        return head;\n    \n    ListNode* odd = head;\n    ListNode* even = head->next;\n    ListNode* evenHead = even;  // save the starting node of the even list\n    \n    while (odd->next && even) {\n        odd->next = even->next;  // connect the odd list with the next odd node\n        if (odd->next){\n            even->next = odd->next->next;  // connect the even list with the next even node\n            odd = odd->next;  // move the odd pointer to the next odd node\n        }\n        even = even->next;  // move the even pointer to the next even node\n    }\n    \n    odd->next = evenHead;  // connect the end of the odd list with the starting node of the even list\n    \n    return head;\n}\n",
  "Rearange_elements_by_sign": "/*\nQUESTION:-\nYou are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers.\nYou should rearrange the elements of nums such that the modified array follows the given conditions:\nEvery consecutive pair of integers have opposite signs.\nFor all integers with the same sign, the order in which they were present in nums is preserved.\nThe rearranged array begins with a positive integer.\nReturn the modified array after rearranging the elements to satisfy the aforementioned conditions.\n\n\nExample 1:\n\nInput: nums = [3,1,-2,-5,2,-4]\nOutput: [3,-2,1,-5,2,-4]\nExplanation:\nThe positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].\nThe only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].\nOther ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions.\n*/\n\n/*\nAPPROACH:-\nInitialize two pointers, pos_ptr and neg_ptr. pos_ptr will point to the first positive integer in the array, and neg_ptr will point to the first negative integer in the array.\nIterate over the array.\nIf the current integer is positive, swap it with the element at neg_ptr.\nIncrement pos_ptr by 1.\nIncrement neg_ptr by 1.\nRepeat steps 3-5 until the end of the array is reached.\nThe array will now be rearranged such that every consecutive pair of integers have opposite signs.\n*/\n\n// CODE:-\nvector<int> rearrangeArray(vector<int> &nums)\n{\n    int i = 0; // for +ve integers\n    int j = 1; // for -ve integers\n    vector<int> ans(nums.size());\n    for (int k = 0; k < nums.size(); k++)\n    {\n        if (nums[k] >= 0)\n        {\n            ans[i] = nums[k];\n            i += 2;\n        }\n        else\n        {\n            ans[j] = nums[k];\n            j += 2;\n        }\n    }\n    return ans;\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(0)",
  "Sudoku solver": "/*QUESTION:-\nWrite a program to solve a Sudoku puzzle by filling the empty cells.\n\nA sudoku solution must satisfy all of the following rules:\n- Each of the digits 1-9 must occur exactly once in each row.\n- Each of the digits 1-9 must occur exactly once in each column.\n- Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n- The '.' character indicates empty cells.\n\nExample:\nInput:\n[\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\n\nOutput:\n[\n  [\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],\n  [\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],\n  [\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],\n  [\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],\n  [\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],\n  [\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],\n  [\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],\n  [\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],\n  [\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]\n]\n\nApproach:\nWe can solve the Sudoku puzzle using a backtracking approach.\n1. Iterate over each cell in the board.\n2. If the cell is empty (denoted by '.'), try placing a digit from 1 to 9.\n3. Check if the placement is valid by verifying that the digit does not already exist in the same row, column, or 3x3 sub-box.\n4. If the placement is valid, update the cell with the digit and move to the next cell recursively.\n5. If the placement is not valid or we have reached the end of the board, backtrack by undoing the placement and trying the next digit.\n6. Repeat this process until we have filled all the cells or found a valid solution.\n\nTime Complexity: The time complexity of the backtracking algorithm for solving a Sudoku puzzle is O(9^(m*n)), where m and n are the number of rows and columns in the board. In the worst case, we have to try all possible combinations.\nSpace Complexity: The space complexity is O(1) as we are using a constant amount of space for the board and temporary variables.\n\nCODE:-*/\n\nbool isValid(int row, int col, char digit, vector<vector<char>>& board) {\n    for (int i = 0; i < 9; i++) {\n        if (board[row][i] == digit)\n            return false;\n        if (board[i][col] == digit)\n            return false;\n        if (board[3 * (row / 3) + (i / 3)][3 * (col / 3) + (i % 3)] == digit)\n            return false;\n    }\n    return true;\n}\n\nbool solve(vector<vector<char>>& board) {\n    for (int i = 0; i < board.size(); i++) {\n        for (int j = 0; j < board[0].size(); j++) {\n            if (board[i][j] == '.') {\n                for (char digit = '1'; digit <= '9'; digit++) {\n                    if (isValid(i, j, digit, board)) {\n                        board[i][j] = digit;\n                        if (solve(board))\n                            return true;\n                        board[i][j] = '.';\n                    }\n                }\n                return false;\n            }\n        }\n    }\n    return true;\n}\n",
  "Sum_of_beauty_of_all_substrings": "/*Question:\n\nThe beauty of a string is the difference in frequencies between the most frequent and least frequent characters.\n\nGiven a string `s`, you need to calculate the sum of beauty for all of its substrings. The beauty of a substring is defined as the difference between the highest and lowest frequency of any character in the substring.\n\nWrite a function `beautySum` that takes a string `s` as input and returns the sum of beauty for all substrings.\n\nExample:\n\nInput: s = \"aabcb\"\nOutput: 5\nExplanation: The substrings with non-zero beauty are [\"aab\",\"aabc\",\"aabcb\",\"abcb\",\"bcb\"], each with beauty equal to 1.\n\nInput: s = \"aabcbaa\"\nOutput: 17\n\nApproach:\n\n1. Initialize a variable `ans` to store the total beauty sum.\n2. Iterate over the string `s` with the first loop, starting from index `i`.\n   - Initialize a frequency array `freq` of size 26, initialized with zeros.\n   - Iterate over the string `s` with the second loop, starting from index `j` equal to `i`.\n      - Increment the frequency of the character `s[j]` in the `freq` array.\n      - Calculate the difference between the highest and lowest frequencies in the `freq` array and add it to `ans`.\n3. Return the value of `ans` as the final result.\n\nCODE:-\n*/\nint get_maxmin(vector<int>& freq){\n    int maxi = INT_MIN, mini = INT_MAX;\n    for(auto it:freq){\n        maxi = max(maxi,it);\n        if(it!=0)\n            mini = min(mini,it);\n    }\n    return (mini==INT_MAX)?0:maxi-mini;\n}    \n\nint beautySum(string s) {\n    int ans = 0;\n    // 2 loops to generate all substrings\n    for(int i=0; i<s.size(); i++){\n        vector<int>freq(26,0);\n        for(int j=i; j<s.size(); j++){\n            freq[s[j]-'a']++;\n            int maxmin = get_maxmin(freq);\n            ans += maxmin;\n        }\n    }\n    return ans;\n}\n\n/*\nTime complexity :- for generating all substrings is O(n^2), where n is the length of the string `s`. For each substring, we calculate the difference between the highest and lowest frequencies, which takes O(26) or O(1) time since there are 26 lowercase alphabets. Therefore, the overall time complexity is O(n^2).\nSpace complexity :- O(26) or O(1) since we use a constant-sized frequency array to store the counts of characters.\n*/\n",
  "Valid_anagram": "/*\nQUESTION:-\nGiven two strings s and t, return true if t is an anagram of s, and false otherwise.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\nExample 1:\n\nInput: s = \"anagram\", t = \"nagaram\"\nOutput: true\nExample 2:\n\nInput: s = \"rat\", t = \"car\"\nOutput: false\n\nProblem: Valid Anagram\n\nApproach:\n1. Create an unordered map to store the count of each character in string `s`.\n2. Iterate over each character in `s` and increment its count in the map.\n3. Iterate over each character in `t`.\n   - If the character is not present in the map or its count is zero, return false.\n   - Decrement the count of the character in the map.\n   - If the count becomes zero, remove the character from the map.\n4. After iterating through all characters in `t`, if the map is empty, return true; otherwise, return false.\n\nCode:\n*/\n\nbool isAnagram(string s, string t) {\n    unordered_map<char,int>mp;\n    for(auto c:s)\n        mp[c]++;\n    for(auto c:t){\n        if(mp.find(c)==mp.end())\n            return false;\n        mp[c]--;\n        if(mp[c]==0)\n            mp.erase(c);\n    }\n    return (mp.size()==0);\n}\n\n/* \nTime complexity: O(max(s.length(), t.length()))\nSpace complexity: O(s.length())\n*/",
  " Bellman Ford Algorithm": "/* QUESTION:\n\nGiven a weighted, directed and connected graph of V vertices and E edges, Find the shortest distance of all the vertex's from the source vertex S.\nNote: If the Graph contains a negative cycle then return an array consisting of only -1.\n\nExample:\n\nInput: E = [[0,1,5],[1,0,3],[1,2,-1],[2,0,1]], S = 2\nOutput: 1 6 0\nExplanation:\nFor nodes 2 to 0, we can follow the path - 2 -> 0. This has a distance of 1.\nFor nodes 2 to 1, we can follow the path - 2 -> 0 -> 1, which has a distance of 1 + 5 = 6.\n\nAPPROACH:\n- We can use Bellman-Ford algorithm to find the shortest distance of all the nodes from the given source vertex S.\n- The Bellman-Ford algorithm can handle negative edge weights and identify negative cycles.\n- We will initialize an array dis to store the shortest distance of each node from the source vertex. Initialize all distances to a very large value except for the source vertex, which will have a distance of 0.\n- Run a loop for V-1 times (V is the number of vertices), and in each iteration, relax all the edges to minimize the distance.\n- If there is a negative cycle, the distance will keep decreasing in the Vth iteration as well. In this case, we will return an array containing only -1.\n- Otherwise, we return the dis array with the shortest distances of all nodes from the source vertex.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of the Bellman-Ford algorithm is O(V*E), where V is the number of vertices and E is the number of edges.\n- The space complexity is O(V) to store the distance values.\n\nCODE:\n*/\n\n\nvector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {\n    vector<pair<int, int>> adj[V];\n    for (auto e : edges) {\n        adj[e[0]].push_back({e[1], e[2]});\n    }\n    vector<int> dis(V, 1e8);\n    dis[S] = 0;\n    for (int i = 0; i < V; i++) {\n        for (int u = 0; u < V; u++) {\n            for (auto vec : adj[u]) {\n                int v = vec.first, wt = vec.second;\n                if (dis[u] != 1e8)\n                    dis[v] = min(dis[v], dis[u] + wt);\n            }\n        }\n    }\n    for (int u = 0; u < V; u++) {\n        for (auto vec : adj[u]) {\n            int v = vec.first, wt = vec.second;\n            if (dis[u] != 1e8 && dis[v] > dis[u] + wt)\n                return {-1};\n        }\n    }\n    return dis;\n}\n",
  " Build BST from Preorder Traversal": "/*\nQuestion:\nGiven an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.\n\nIt is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.\n\nA binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.\n\nA preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.\n\nExample:\nInput: preorder = [8,5,1,7,10,12]\nOutput: [8,5,10,1,7,null,12]\n\nApproach:\n- The first element of the preorder traversal is the root of the BST.\n- We start with the first element of the preorder traversal and recursively build the BST as follows:\n    - If the current element is greater than the previous element, it must be the right child of the previous element. We build the right subtree of the previous element using this information and recursively move forward in the preorder array.\n    - If the current element is smaller than the previous element, it must be a left child of one of the previous elements. We keep on traversing the preorder array until we find an element greater than the current element. This element will be the right child of one of the ancestors of the current element.\n\nTime Complexity: O(n)\n- In the worst case, we might need to traverse the entire preorder array to construct the BST.\n\nSpace Complexity: O(h)\n- The space complexity is determined by the recursion stack during the function call.\n- In the worst case, the height of the BST can be n for a skewed tree, so the space complexity becomes O(n).\n- However, for a balanced BST, the height is log n, so the space complexity becomes O(log n).\n*/\n\nTreeNode* solve(int& index, vector<int>& pre, int bound) {\n    if (index >= pre.size() || pre[index] > bound) {\n        return NULL;\n    }\n    TreeNode* root = new TreeNode(pre[index++]);\n    root->left = solve(index, pre, root->val);\n    root->right = solve(index, pre, bound);\n    return root;\n}\n\nTreeNode* bstFromPreorder(vector<int>& preorder) {\n    int i = 0;\n    return solve(i, preorder, INT_MAX);\n}\n",
  " Construct BT from inorder and preorder": "/* QUESTION:\n\nGiven two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n\nAPPROACH:\n\nThe preorder traversal follows the root-left-right order, while the inorder traversal follows the left-root-right order. Based on these two traversals, we can construct the binary tree recursively.\n\n1. The first element in the preorder traversal array is the root of the binary tree.\n2. We can find the position of the root in the inorder traversal array. All the elements to the left of this position will be in the left subtree, and all the elements to the right will be in the right subtree.\n3. Recursively, we can build the left and right subtrees using the corresponding portions of the preorder and inorder traversal arrays.\n4. The recursive function takes the index of the current element in the preorder traversal array, the starting and ending indices of the current portion in the inorder traversal array, and the preorder and inorder traversal arrays as inputs.\n5. In each recursive call, we create a new node with the value of the current element in the preorder traversal array and determine its left and right subtrees by calling the recursive function on the corresponding portions of the inorder and preorder traversal arrays.\n6. The base case is when the starting index is greater than the ending index, indicating an empty portion of the tree. In this case, we return NULL.\n7. Finally, we return the root of the constructed binary tree.\n\nCOMPLEXITY ANALYSIS:\n\nLet n be the number of nodes in the binary tree.\n- Time Complexity: The time complexity of this approach is O(n), as we visit each node once.\n- Space Complexity: The space complexity is O(n) for the recursive call stack.\n\nCODE:\n*/\n\nTreeNode* solve(int i, int ins, int ine, vector<int>& preorder, vector<int>& inorder) {\n    if (i >= preorder.size() || ins > ine) return NULL;\n\n    int loc = -1;\n    for (int j = ins; j <= ine; j++) {\n        if (inorder[j] == preorder[i])\n            loc = j;\n    }\n    TreeNode* root = new TreeNode(preorder[i]);\n    root->left = solve(i + 1, ins, loc - 1, preorder, inorder);\n    // Note: the index of the right child in preorder is the number of nodes in the left subtree + 1\n    root->right = solve(i + (loc - ins + 1), loc + 1, ine, preorder, inorder);\n\n    return root;\n}\n\nTreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n    int n = inorder.size();\n    return solve(0, 0, n - 1, preorder, inorder);\n}\n",
  " Distinct Subsequences": "/*\nQUESTION:\nGiven two strings s and t, return the number of distinct subsequences of s which equals t.\n\nAPPROACH:\n- The problem can be solved using dynamic programming.\n- Let dp[i][j] represent the number of distinct subsequences of the first i characters of string s that match the first j characters of string t.\n- If s[i] equals t[j], we have two choices: we can either include the current character (s[i]) in the subsequence, in which case we add dp[i-1][j-1] to our count, or we can exclude it and move on, so we add dp[i-1][j] to our count.\n- If s[i] doesn't match t[j], we have no choice but to exclude s[i], so we add dp[i-1][j] to our count.\n- Base cases: When j equals -1 (meaning we've matched all characters of t), return 1. When i equals -1 (meaning we've exhausted all characters of s), return 0.\n- Return dp[n-1][m-1], where n is the length of s and m is the length of t.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n * m), where n is the length of string s and m is the length of string t.\n- The space complexity is O(n * m) due to the dp array.\n- Overall, the algorithm runs in O(n * m) time and O(n * m) space.\n\nCODE:\n*/\n\nint fmemo(int i, int j, string& s, string& t, vector<vector<int>>& dp) {\n    if (j < 0) return 1;\n    if (i < 0) return 0;\n    if (dp[i][j] != -1) return dp[i][j];\n    if (s[i] == t[j])\n        return dp[i][j] = fmemo(i - 1, j - 1, s, t, dp) + fmemo(i - 1, j, s, t, dp);\n    else\n        return dp[i][j] = fmemo(i - 1, j, s, t, dp);\n}\n\nint ftab(int n, int m, string& s, string& t){\n    vector<vector<int>> dp(n+1,vector<int>(m+1));\n    for(int i=1; i<=n; i++){\n        for(int j=1; j<=m; j++){\n            if(s[i-1]==t[j-1]) dp[i][j] = dp[i-1][j-1]+dp[i-1][j];\n            else dp[i][j] = dp[i-1][j];\n        }\n    }\n    return dp[n-1][m-1];\n}\n\nint numDistinct(string s, string t) {\n    int n = s.size(), m = t.size();\n    vector<vector<int>> dp(n, vector<int>(m, -1));\n    return fmemo(n - 1, m - 1, s, t, dp);\n}\n",
  " Iterative Inorder Traversal": "/*\nQuestion:\nGiven the root of a binary tree, return the inorder traversal of its nodes' values.\n\nApproach:\n- We can perform an inorder traversal iteratively using a stack.\n- The idea is to push all the left children of a node into the stack until we reach a node with no left child.\n- Then, we pop a node from the stack, add its value to the result vector, and move to its right child (if it exists).\n- We repeat this process until the stack is empty and all nodes are traversed.\n\nComplexity Analysis:\n- Since we visit each node once and perform constant time operations for each node, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(N) as we store the node values in the result vector and use a stack to keep track of the nodes.\n\nCode:\n*/\n\nvoid pushLeft(TreeNode* curr, stack<TreeNode*>& st) {\n    while (curr) {\n        st.push(curr);\n        curr = curr->left;\n    }\n}\n\nvector<int> inorderTraversal(TreeNode* root) {\n    if (!root) {\n        return {};\n    }\n    stack<TreeNode*> st;\n    TreeNode* curr = root;\n    pushLeft(curr, st);\n    vector<int> ans;\n    while (!st.empty()) {\n        curr = st.top();\n        st.pop();\n        ans.push_back(curr->val);\n        curr = curr->right;\n        if (curr) {\n            pushLeft(curr, st);\n        }\n    }\n    return ans;\n}\n",
  " Largest Rectangle in Histogram": "/*\nQUESTION:\nGiven an array of integers heights representing the histogram's bar height where the width of each bar is 1,\nreturn the area of the largest rectangle in the histogram.\n\nExample:\nInput: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The above is a histogram where the width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.\n*/\n\n/*\nAPPROACH:\nTo find the largest rectangle area, we can use the concept of a stack.\nThe idea is to maintain a stack of indices of the heights in non-decreasing order.\nFor each height, we compare it with the top of the stack.\nIf the current height is greater than the top of the stack, we push its index onto the stack.\nOtherwise, we keep popping elements from the stack and calculate the area using the popped index as the right boundary.\nThe left boundary can be obtained from the new top of the stack.\nBy doing this, we ensure that the heights in the stack are always in non-decreasing order.\nFinally, we calculate the area for each popped element and update the maximum area found so far.\n\nCODE:\n*/\n\n\nvector<int> prevSmaller(vector<int>& arr) {\n    stack<int> st;\n    vector<int> ans(arr.size(), -1);\n    for (int i = 0; i < arr.size(); i++) {\n        while (!st.empty() && arr[st.top()] > arr[i])\n            st.pop();\n        if (!st.empty())\n            ans[i] = st.top();\n        st.push(i);\n    }\n    return ans;\n}\n\nvector<int> nextSmaller(vector<int>& arr) {\n    stack<int> st;\n    vector<int> ans(arr.size(), arr.size());\n    for (int i = arr.size() - 1; i >= 0; i--) {\n        while (!st.empty() && arr[st.top()] >= arr[i])\n            st.pop();\n        if (!st.empty())\n            ans[i] = st.top();\n        st.push(i);\n    }\n    return ans;\n}\n\nint largestRectangleArea(vector<int>& heights) {\n    vector<int> prev = prevSmaller(heights);\n    vector<int> next = nextSmaller(heights);\n\n    int ans = INT_MIN;\n    for (int i = 0; i < heights.size(); i++) {\n        ans = max(ans, (next[i] - prev[i] - 1) * heights[i]);\n    }\n    return ans;\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- The time complexity of the solution is O(n), where n is the number of elements in the heights array.\n  This is because we iterate through the array once to calculate the previous and next smaller elements.\n- The space complexity is O(n) as well since we use two additional arrays to store the previous and next smaller elements.\n*/\n\n",
  " Maximum Points you can obtaln form the card": "/*\nQUESTION:\nYou are given an array of cards, each with an associated number of points. You can take exactly k cards, either from the beginning or from the end of the row. Your goal is to maximize the sum of the points of the cards you have taken. Return the maximum score you can obtain.\n\nAPPROACH:\nTo maximize the score, we need to minimize the sum of the discarded cards. We can find the minimum sum of a subarray of size (n - k) using a sliding window approach.\n\n1. Create a helper function, minimumSumOfSizeK, which finds the minimum sum of a subarray of size k.\n   - Initialize ans to INT_MAX, currsum to 0, and start to 0.\n   - Iterate over the array from left to right:\n     - Add the current element to currsum.\n     - If the size of the current window (i - start + 1) exceeds k, remove the element at the start of the window from currsum and move the start to the next position.\n     - If the size of the current window is k, update ans with the minimum of ans and currsum.\n   - Return ans.\n\n2. In the main function, maxScore:\n   - Calculate the total sum of all the cards, totalSum.\n   - Calculate the size of the discarded cards, windowSize, which is (n - k).\n   - Find the minimum sum of a subarray of size windowSize using the minimumSumOfSizeK function and store it in discardedSum.\n   - Return the maximum score, which is (totalSum - discardedSum).\n\nCOMPLEXITY ANALYSIS:\n- Time complexity: O(n), where n is the size of the cardPoints array. We iterate over the array once to calculate the total sum and find the minimum sum of a subarray.\n- Space complexity: O(1), as the extra space used is constant throughout the algorithm.\n*/\n\nint minimumSumOfSizeK(vector<int>& arr, int k) {\n    int ans = INT_MAX, currsum = 0, start = 0;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        currsum += arr[i];\n        \n        while ((i - start + 1) > k) {\n            currsum -= arr[start];\n            start++;\n        }\n        \n        if ((i - start + 1) == k)\n            ans = min(ans, currsum);\n    }\n    \n    return ans;\n}\n\nint maxScore(vector<int>& cardPoints, int k) {\n    int totalSum = 0;\n    \n    for (auto it : cardPoints) {\n        totalSum += it;\n    }\n    \n    int windowSize = cardPoints.size() - k;\n    int discardedSum = minimumSumOfSizeK(cardPoints, windowSize);\n    \n    return totalSum - discardedSum;\n}\n",
  " Non Overlapping Intervals": "/*\nQuestion:\nGiven an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\n\nExample:\nInput: intervals = [[1,2],[2,3],[3,4],[1,3]]\nOutput: 1\nExplanation: [1,3] can be removed and the rest of the intervals are non-overlapping.\n\nApproach:\n- We sort the intervals based on the end time in ascending order.\n- We initialize a count variable to keep track of the number of intervals that need to be removed.\n- We initialize the end variable to store the end time of the first interval.\n- Then, we iterate through the intervals starting from the second interval.\n- If the start time of the current interval is less than the end time of the previous interval, it means there is an overlap.\n- In that case, we increment the count variable since we need to remove this interval to make the rest non-overlapping.\n- Otherwise, if there is no overlap, we update the end variable to the end time of the current interval.\n- Finally, we return the count variable, which represents the minimum number of intervals to remove.\n\nComplexity Analysis:\n- The time complexity of this approach is O(NlogN), where N is the number of intervals.\n- Sorting the intervals takes O(NlogN) time, and iterating through the intervals takes O(N) time.\n- The space complexity is O(1) as we are not using any additional data structures.\n\nCode:\n*/\n\nbool comp(vector<int>& a, vector<int>& b) {\n    return a[1] < b[1];\n}\n\nint eraseOverlapIntervals(vector<vector<int>>& intervals) {\n    if(intervals.size() < 2) return 0;\n    sort(intervals.begin(), intervals.end(), comp);\n    int cnt = 0, end = intervals[0][1];\n    for(int i = 1; i < intervals.size(); i++) {\n        if(intervals[i][0] < end) {\n            cnt++;\n        }\n        else {\n            end = intervals[i][1];\n        }\n    }\n    return cnt;\n}\n",
  " Swim in rising water": "/*\nQUESTION:-\nYou are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).\nThe rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n\nReturn the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).\n\nApproach:\n1. We use a priority queue (min heap) to keep track of the cells in increasing order of their elevations.\n2. Start from the top left cell (0, 0) and add it to the priority queue with its elevation as the key.\n3. Mark this cell as visited.\n4. While the priority queue is not empty, pop the cell with the minimum elevation.\n5. Update the answer with the maximum of the current elevation and the answer so far.\n6. Check the 4-directionally adjacent cells of the current cell.\n7. If the adjacent cell is within the boundaries and not visited, add it to the priority queue with its elevation as the key.\n8. Mark the adjacent cell as visited.\n9. Continue the process until we reach the bottom right cell (n-1, n-1).\n10. The answer at this point will be the least time until we can reach the bottom right cell.\n\nComplexity Analysis:\n- We need to visit all cells of the grid, so the time complexity of the solution is O(n^2).\n- We use a priority queue to store at most n^2 cells, so the space complexity is also O(n^2).\n\nCODE:-\n*/\n\ntypedef pair<int, pair<int, int>> dup;\n\nint swimInWater(vector<vector<int>>& grid) {\n    int n = grid.size();\n\n    vector<vector<bool>> vis(n, vector<bool>(n));\n    priority_queue<dup, vector<dup>, greater<dup>> pq;\n    pq.push({grid[0][0], {0, 0}});\n    vis[0][0] = true;\n\n    vector<int> dr = {-1, 1, 0, 0};\n    vector<int> dc = {0, 0, -1, 1};\n\n    int ans = 0;\n\n    while (!pq.empty()) {\n        auto [uwt, cord] = pq.top();\n        pq.pop();\n        int x = cord.first, y = cord.second;\n        ans = max(ans, uwt);\n        if (x == n - 1 && y == n - 1) return ans;\n        for (int i = 0; i < 4; i++) {\n            int nx = x + dr[i], ny = y + dc[i];\n            if (nx >= 0 && nx < n && ny >= 0 && ny < n && !vis[nx][ny]) {\n                vis[nx][ny] = true;\n                pq.push({grid[nx][ny], {nx, ny}});\n            }\n        }\n    }\n\n    return ans;\n}\n",
  " Target Sum": "/*\nQUESTION:\nGiven an array 'nums' and an integer 'target', the task is to count \nthe number of ways to make the sum of elements of one subset equal \nto 'target'.\n\nExample:\nInput: nums = [1, 1, 1, 1, 1], target = 3\nOutput: 5\nExplanation: There are 5 ways to achieve the target sum: \n{1, 1, 1}, {1, 2}, {2, 1}, {1, 2}, {3}\n\nAPPROACH:\n- The problem can be reduced to finding the count of subsets with a \n  given sum.\n- Initialize dp[i][j] as the number of subsets with sum 'j' using \n  the first 'i' elements.\n- Base cases:\n  - dp[0][0] = 1 since an empty subset has a sum of 0.\n  - dp[i][0] = 1 since there's always an empty subset.\n- For each element 'nums[i]' and each possible sum 'j' from 1 to 'target':\n  - dp[i][j] = dp[i-1][j] (not taking the current element)\n  - if 'nums[i]' is less than or equal to 'j', then dp[i][j] += dp[i-1][j-nums[i]] (taking the current element)\n- The required answer will be dp[n][target] where 'n' is the number \n  of elements in the array.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of the solution is O(n * target), where 'n' \n  is the number of elements in the array.\n- The space complexity is O(n * target) for the dp array.\n\nCODE:\n*/\n\n\n// Memoization\nint fmemo(int i, int tar, int arr[], vector<vector<int>>& dp){\n    if(i == 0){\n        if(tar == 0 && arr[i] == 0) return dp[i][tar] = 2;\n        if(tar == 0) return dp[i][tar] = 1;\n        return dp[i][tar] = (arr[i] == tar);\n    }\n\n    if(dp[i][tar] != -1) return dp[i][tar];\n\n    int take = 0;\n    if(arr[i] <= tar) take = fmemo(i - 1, tar - arr[i], arr, dp);\n    int notake = fmemo(i - 1, tar, arr, dp);\n    return dp[i][tar] = (take + notake);\n}\n\n// Tabulation\nint ftab(int n, int sum, int arr[]){\n    vector<vector<int>> dp(n,vector<int>(sum+1));\n    for(int i=0; i<n; i++){\n        for(int tar=0; tar<=sum; tar++){\n            if(i==0){\n                if(tar==0 && arr[i]==0) dp[i][tar] = 2;\n                else if(tar==0) dp[i][tar] = 1;\n                else dp[i][tar] =  (arr[i]==tar);\n                continue;\n            }\n            int take = 0;\n            if(arr[i] <= tar) take = dp[i-1][tar-arr[i]];\n            int notake = dp[i-1][tar];\n            dp[i][tar] =  (take+notake);\n        }\n    }\n    return dp[n-1][sum];\n}\n\n// Space Optimization\nint fopt(int n, int sum, int arr[]){\n    vector<int> prev(sum+1);\n    for(int i=0; i<n; i++){\n        vector<int> curr(sum+1);\n        for(int tar=0; tar<=sum; tar++){\n            if(i==0){\n                if(tar==0 && arr[i]==0) curr[tar] = 2;\n                else if(tar==0) curr[tar] = 1;\n                else curr[tar] =  (arr[i]==tar);\n                continue;\n            }\n            int take = 0;\n            if(arr[i] <= tar) take = prev[tar-arr[i]];\n            int notake = prev[tar];\n            curr[tar] =  (take+notake);\n        }\n        prev = curr;\n    }\n    return prev[sum];\n}\n\nint findTargetSumWays(vector<int>& nums, int target) {\n    int n = nums.size(), sum = 0; \n    for(auto i:nums) sum += i;\n    vector<vector<int>> dp(n, vector<int>(sum + 1, -1));\n    return fmemo(n - 1, target, nums, dp);\n}\n",
  " Vertical Order Traversal": "/*\nQuestion:\nGiven the root of a binary tree, calculate the vertical order traversal of the binary tree.\nThere may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.\n\nApproach:\n- We can perform a level order traversal of the binary tree while keeping track of the horizontal distance (hd) of each node from the root.\n- For each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively.\n- We can use a queue to perform the level order traversal. The queue will store pairs of (hd, node), where hd represents the horizontal distance and node represents the current node being processed.\n- During the traversal, we maintain an unordered_map to store the nodes at each horizontal distance. The key in the map is the horizontal distance (hd), and the value is a vector of pairs representing the level and value of the nodes at that horizontal distance.\n- After the traversal, we iterate over the keys in the map in ascending order and sort the nodes within each horizontal distance based on their levels. We then extract the values and add them to the result vector.\n- Finally, we return the result vector containing the vertical order traversal.\n\nComplexity Analysis:\n- Since we visit each node once and perform constant time operations for each node, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(N), where N is the number of nodes in the binary tree. This space is used to store the nodes in the unordered_map during the traversal.\n\nCode:\n*/\n\n// NOTE:- we are keeping track of levels because of the question condition but if no such condition exists, then no need of level only hd will work.\n\nvector<vector<int>> verticalTraversal(TreeNode* root) {\n    if (!root) return {};\n\n    unordered_map<int, vector<pair<int, int>>> mp;\n    int mini = 0, maxi = 0;\n    queue<pair<int, TreeNode*>> q;\n    q.push({0, root});\n\n    int lvl = 0;\n    while (!q.empty()) {\n        int n = q.size();\n        for (int i = 0; i < n; i++) {\n            auto p = q.front();\n            q.pop();\n            TreeNode* curr = p.second;\n            int hd = p.first;\n            if (curr->left) {\n                mini = min(mini, hd - 1);\n                q.push({hd - 1, curr->left});\n            }\n            if (curr->right) {\n                maxi = max(maxi, hd + 1);\n                q.push({hd + 1, curr->right});\n            }\n            mp[hd].push_back({lvl, curr->val});\n        }\n        lvl++;\n    }\n\n    vector<vector<int>> ans;\n    for (int i = mini; i <= maxi; i++) {\n        sort(mp[i].begin(), mp[i].end());\n        vector<int> temp;\n        for (auto it : mp[i])\n            temp.push_back(it.second);\n        ans.push_back(temp);\n    }\n\n    return ans;\n}\n",
  " Word Ladder": "/*\nQUESTION:\nA transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n1. Every adjacent pair of words differs by a single letter.\n2. Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n3. sk == endWord\n\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n\nAPPROACH:\n- We can model this problem as a graph where each word is a node and there is an edge between two words if they differ by a single letter.\n- First, we create an adjacency list to represent the graph based on the given wordList. Two words are adjacent if they differ by one character.\n- Then, we use Breadth-First Search (BFS) to find the shortest transformation sequence from beginWord to endWord.\n- We start BFS from the beginWord and traverse the graph level by level, marking visited words to avoid revisiting them.\n- During the BFS, if we reach the endWord, we return the length of the transformation sequence.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(n^2 * m), where n is the size of wordList and m is the average length of the words in wordList. In the worst case, we may need to compare every pair of words in wordList to create the adjacency list.\n- Space Complexity: O(n^2), where n is the size of wordList. We use additional space for the adjacency list and the visited map.\n*/\n\nbool isAdj(string& a, string& b){\n    int cnt = 0;\n    for(int i = 0; i < a.size(); i++){\n        if(a[i] != b[i]){\n            if(cnt > 0) return false;\n            cnt++;\n        }\n    }\n    return true;\n}\n\nint ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n    unordered_map<string, vector<string>> adj;\n    wordList.push_back(beginWord);\n    int n = wordList.size();\n    \n    // Create the adjacency list\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(i != j && isAdj(wordList[i], wordList[j])){\n                adj[wordList[i]].push_back(wordList[j]);\n            }\n        }\n    }\n    \n    queue<string> q;\n    unordered_map<string, bool> vis;\n    q.push(beginWord);\n    vis[beginWord] = true;\n    int lvl = 1;\n    \n    // Perform BFS\n    while(!q.empty()){\n        int siz = q.size();\n        while(siz--){\n            string node = q.front();\n            q.pop();\n            if(node == endWord) return lvl;\n            for(auto s : adj[node]){\n                if(!vis[s]){\n                    vis[s] = true;\n                    q.push(s);\n                }\n            }\n        }\n        lvl++;\n    }\n    \n    return 0;\n}\n",
  "Aggresive_cows": "/*\nQuestion:\nIn the universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has n empty baskets, the ith basket is at position[i], Morty has m balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum.\n\nRick stated that magnetic force between two different balls at positions x and y is |x - y|.\n\nGiven the integer array position and the integer m. Return the required force.\n\nExample:\n\nInput: position = [1,2,3,4,7], m = 3\nOutput: 3\nExplanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.\n\nApproach:\n- Sort the position array in ascending order to simplify the possibility check.\n- Use binary search to find the maximum minimum magnetic force.\n- Set the low and high values for the binary search.\n- While the low value is less than or equal to the high value, calculate the mid value.\n- Check if it is possible to distribute the balls with a minimum magnetic force of mid using the isPossible() function.\n- If it is possible, update the answer and set the low value to mid + 1.\n- If it is not possible, set the high value to mid - 1.\n- Return the answer.\n\nCode:\n*/\n\nbool isPossible(int mid, vector<int>& position, int m){\n    int placeM = 1;\n    int start = 0;\n    for(int i=1; i<position.size(); i++){\n        if(position[i]-position[start]>=mid){\n            placeM++;\n            start = i;\n        }\n    }\n    if(placeM>=m)\n        return true;\n    return false;\n}\n\nint maxDistance(vector<int>& position, int m) {\n    sort(position.begin(),position.end());\n    int low = 1, high = position[position.size()-1]-position[0];\n    int ans = -1; \n    while(low<=high){\n        int mid = low+(high-low)/2;\n        if(isPossible(mid,position,m)){\n            ans = mid;\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    return ans;\n}\n\n/*\nTime Complexity: O(n log n), where n is the size of the position array. Sorting the array takes O(n log n) time and the binary search takes O(log n) time.\nSpace Complexity: O(1), constant space is used.\n*/\n",
  "Combination Sum 2": "/*QUESTION:\nGiven a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. Each number in candidates may only be used once in the combination. Note: The solution set must not contain duplicate combinations.\n\nExample:\nInput: candidates = [10,1,2,7,6,1,5], target = 8\nOutput: [[1,1,6],[1,2,5],[1,7],[2,6]]\nExplanation: The sum of the combinations [1,1,6], [1,2,5], [1,7], and [2,6] is equal to the target 8.\n\nApproach:\nTo find all unique combinations that sum up to the target, we can use a recursive backtracking approach.\n1. Create a helper function called 'solve' that takes the current index, the target sum, the array of candidates, a temporary vector to store the current combination, and a vector of vector to store all combinations as parameters.\n2. Sort the array of candidates in non-decreasing order to handle duplicates.\n3. In the 'solve' function:\n   - If the target sum is equal to 0, add the current combination to the vector of combinations.\n   - If the current index is equal to the size of the array, return.\n   - If the current candidate value is less than or equal to the target sum:\n     - Add the current candidate to the current combination.\n     - Recursively call the 'solve' function with the updated index by incrementing it, the reduced target sum by subtracting the current candidate value, the same array of candidates, the current combination, and the vector of combinations.\n     - Remove the last added candidate from the current combination (backtracking).\n   - To handle duplicates, skip the candidates with the same value as the current candidate by incrementing the index until a different candidate is found.\n   - Recursively call the 'solve' function with the updated index by incrementing it, the same target sum, the same array of candidates, the current combination, and the vector of combinations.\n4. Create the main function called 'combinationSum2' that calculates and returns the vector of combinations.\n   - Initialize an empty vector to store the combinations.\n   - Call the 'solve' function with the initial index as 0, the target sum, the sorted array of candidates, an empty temporary vector, and the vector of combinations.\n   - Return the vector of combinations.\n\nTime Complexity: O(N * 2^N), where N is the size of the array of candidates. In the worst case, we may have to explore all possible combinations, which is exponential.\nSpace Complexity: O(target), as the maximum depth of the recursion tree is determined by the target sum.\n\nCODE:*/\nvoid solve(int index, int target, vector<int>& candidates, vector<int>& temp, vector<vector<int>>& ans) {\n    if (target == 0) {\n        ans.push_back(temp);\n        return;\n    }\n\n    if (index == candidates.size() || target < 0)\n        return;\n\n    if (candidates[index] <= target) {\n        temp.push_back(candidates[index]);\n        solve(index + 1, target - candidates[index], candidates, temp, ans);\n        temp.pop_back();\n    }\n\n    while (index + 1 < candidates.size() && candidates[index] == candidates[index + 1])\n        index++;\n\n    solve(index + 1, target, candidates, temp, ans);\n}\n\nvector<vector<int>> combinationSum2(vector<int>& candidates, int target) {\n    vector<vector<int>> ans;\n    vector<int> temp;\n    sort(candidates.begin(), candidates.end());\n    solve(0, target, candidates, temp, ans);\n    return ans;\n}\n",
  "Count set bit from numbers 1 to n": "/*\nQUESTION:\nYou are given a number N. Find the total count of set bits for all numbers from 1 to N (both inclusive).\n\nExample:\nInput: N = 4\nOutput: 5\nExplanation:\nFor numbers from 1 to 4:\n- For 1: 0 0 1 = 1 set bit\n- For 2: 0 1 0 = 1 set bit\n- For 3: 0 1 1 = 2 set bits\n- For 4: 1 0 0 = 1 set bit\nTherefore, the total set bits is 5.\n\nAPPROACH:\nThe approach to solve this problem is based on the observation that the count of set bits in the binary representation of a number `n` can be determined by the following formula:\ncountSetBits(n) = countSetBits(pow(2, x - 1) * x) + (n - pow(2, x) + 1) + countSetBits(n - pow(2, x))\n\nCODE:*/\nint countSetBits(int n) {\n    if (n <= 1)\n        return n;\n    int x = log2(n); // Find the greatest power of 2 less than n\n    return (pow(2, x - 1) * x) + (n - pow(2, x) + 1) + countSetBits(n - pow(2, x));\n}\n\n// Time Complexity: O(log(n))\n// Space Complexity: O(log(n))\n\n\n",
  "Delete_nth_node_from_back": "/*\nQUESTION:-\nGiven the head of a linked list, remove the nth node from the end of the list and return its head.\n\nExample 1:\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n\nExample 2:\nInput: head = [1], n = 1\nOutput: []\n\nExample 3:\nInput: head = [1,2], n = 1\nOutput: [1]\n*/\n\n/*\nAPPROACH:\nTo remove the nth node from the end of the linked list, we can follow these steps:\n1. Initialize two pointers, `left` and `right`, to the head of the linked list.\n2. Move the `right` pointer n nodes ahead.\n3. If `right` becomes NULL, it means the first node needs to be removed. Return head->next.\n4. Iterate until `right->next` becomes NULL.\n5. Move both `left` and `right` pointers one node ahead in each iteration.\n6. Once `right->next` becomes NULL, `left` will be pointing to the (n-1)th node from the end.\n7. Update `left->next` to skip the nth node from the end.\n8. Return the head of the modified linked list.\n\nTIME COMPLEXITY: O(N)\nSPACE COMPLEXITY: O(1)\n*/\n\nListNode* removeNthFromEnd(ListNode* head, int n) {\n    ListNode* left = head;\n    ListNode* right = head;\n    \n    // Move the right pointer n nodes ahead\n    for (int i = 0; i < n; i++) {\n        right = right->next;\n    }\n    \n    // If right becomes NULL, remove the first node\n    if (!right)\n        return head->next;\n    \n    // Iterate until right->next becomes NULL\n    while (right->next) {\n        left = left->next;\n        right = right->next;\n    }\n    \n    // Update left->next to skip the nth node from the end\n    left->next = left->next->next;\n    \n    return head;\n}\n",
  "Find_peak_element": "/*\nQUESTION:-\nA peak element is an element that is strictly greater than its neighbors.\n\nGiven a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\n\nYou may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\n\nYou must write an algorithm that runs in O(log n) time.\n\nExample 1:\nInput: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.\n\nExample 2:\nInput: nums = [1,2,1,3,5,6,4]\nOutput: 5\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\n*/\n\n/*\nAPPROACH:-\nWe can use the binary search approach to find the peak element.\n1. Initialize low = 0 and high = n-1, where n is the size of the array.\n2. While low < high, calculate mid = low + (high - low) / 2.\n3. If nums[mid] < nums[mid+1], it means a peak element exists on the right side of mid, so update low = mid+1.\n4. Otherwise, a peak element exists on the left side of mid or mid itself is a peak, so update high = mid.\n5. After the loop ends, low will be pointing to the peak element index.\n6. Return low as the result.\n\nCODE:-\n*/\n\nint findPeakElement(vector<int>& nums) {\n    int low = 0, high = nums.size()-1;\n    while(low < high){\n        int mid = low + (high - low) / 2;\n        if(nums[mid] < nums[mid+1])\n            low = mid+1;\n        else\n            high = mid;\n    }\n    return low;\n}\n\n// TIME COMPLEXITY: O(log n)\n// SPACE COMPLEXITY: O(1)\n",
  "Linear_search": "/*\nI don't think anyone needs it's solution. The idea is to traverse the array using loop and when the element\nis equal to k return the same\n*/",
  "Merge_2_sorted_array_without_space": "/*\nQUESTION:\nYou are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\nMerge nums1 and nums2 into a single array sorted in non-decreasing order.\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\n\nExample 1:\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n\nAPPROACH:\nTo merge two sorted arrays, nums1 and nums2, into nums1, we can use a two-pointer approach.\n1. Initialize three pointers: i, j, and k, where i points to the last valid element of nums1, j points to the last element of nums2, and k points to the last index of the merged array nums1.\n2. Start from the end of the arrays and compare the elements at i and j.\n3. If the element at nums1[i] is greater than the element at nums2[j], swap it with the element at nums1[k], decrement i and k.\n4. Otherwise, swap the element at nums2[j] with the element at nums1[k], decrement j and k.\n5. Repeat steps 3 and 4 until all elements in nums1 and nums2 have been merged.\n6. If there are still elements remaining in nums2 after merging, copy them to the remaining positions in nums1.\n\nCODE:\n*/\n\nvoid merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n    int i = m - 1; // Pointer for nums1\n    int j = n - 1; // Pointer for nums2\n    int k = m + n - 1; // Pointer for merged array nums1\n    \n    while (i >= 0 && j >= 0) {\n        if (nums1[i] > nums2[j]) {\n            swap(nums1[i], nums1[k]);\n            i--;\n            k--;\n        } else {\n            swap(nums2[j], nums1[k]);\n            j--;\n            k--;\n        }\n    }\n    \n    // Copy remaining elements from nums2 to nums1 if any\n    while (j >= 0) {\n        swap(nums2[j], nums1[k]);\n        j--;\n        k--;\n    }\n}\n\n/*\nTIME COMPLEXITY: O(m + n), where m and n are the lengths of nums1 and nums2 respectively.\nThe merging process requires iterating through both arrays once.\nSPACE COMPLEXITY: O(1)\nThe merge is performed in-place without using any additional space.\n\n*/\n\n",
  "Next_permutation": "/*\nQUESTION:-\n\nA permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n\nFor example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\nThe next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n\nFor example, the next permutation of arr = [1,2,3] is [1,3,2].\nSimilarly, the next permutation of arr = [2,3,1] is [3,1,2].\nWhile the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\n\nGiven an array of integers nums, find the next permutation of nums.\n\nThe replacement must be in place and use only constant extra memory.\n\nExample 1:\nInput: nums = [1,2,3]\nOutput: [1,3,2]\n*/\n\n/*\nAPPROACH:-\n\nTo find the next permutation of an array, we can follow these steps:\n\n1. Find the first index `i` from the right such that `nums[i] < nums[i+1]`. This is the first element that needs to be swapped.\n2. Find the first index `j` from the right such that `nums[j] > nums[i]`. This is the element that will replace `nums[i]`.\n3. Swap `nums[i]` and `nums[j]`.\n4. Reverse the subarray starting from `i+1` till the end of the array.\n5. If step 1 does not find any index `i`, it means the array is in descending order. In that case, reverse the entire array to get the lowest possible order.\n\n*/\n\n// CODE:\n\nvoid nextPermutation(vector<int> &nums)\n{\n\n    int bp = -1;\n    // finding the break point\n    for (int i = nums.size() - 2; i >= 0; i--)\n    {\n        if (nums[i] < nums[i + 1])\n        {\n            bp = i;\n            break;\n        }\n    }\n    // first greater element from back\n    if (bp != -1)\n    {\n        for (int i = nums.size() - 1; i >= 0; i--)\n        {\n            if (nums[i] > nums[bp])\n            {\n                swap(nums[i], nums[bp]);\n                break;\n            }\n        }\n    }\n    // reverse the array from bp+1 to end\n    reverse(nums.begin() + bp + 1, nums.end());\n}\n\n// TIME COMPLEXITY: O(n), where n is the size of the input array.\n// SPACE COMPLEXITY: O(1)\n",
  " BST Iterator": "/*\nQuestion:\nImplement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\n\nBSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n\nboolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\n\nint next() Moves the pointer to the right, then returns the number at the pointer.\n\nApproach:\n- We are using a stack to keep track of the nodes during the in-order traversal of the BST.\n- In the constructor, we initialize the stack by pushing all the leftmost nodes in the BST to the stack.\n- The next() function returns the top element of the stack (which will be the next smallest element in the BST) and pops it from the stack.\n- If the node has a right child, we push all the leftmost nodes in the right subtree to the stack before returning the node's value.\n- The hasNext() function simply checks if the stack is empty or not.\n\nTime Complexity:\n- The constructor takes O(h) time, where h is the height of the BST, as it traverses the leftmost path in the BST.\n- The next() and hasNext() functions take O(1) time as they only perform stack operations.\n\nSpace Complexity:\n- The space complexity is O(h), where h is the height of the BST, as the stack stores the nodes in the leftmost path of the BST.\n\n*/\n\nstack<TreeNode*> st;\n\nBSTIterator(TreeNode* root) {\n    pushLeft(root);\n}\n\nvoid pushLeft(TreeNode* root) {\n    while (root) {\n        st.push(root);\n        root = root->left;\n    }\n}\n\nint next() {\n    TreeNode* ans = st.top();\n    st.pop();\n    if (ans->right) {\n        pushLeft(ans->right);\n    }\n    return ans->val;\n}\n\nbool hasNext() {\n    return (!st.empty());\n}\n",
  " Coin Change 2": "/*\nQUESTION:\nGiven an integer array 'coins' representing coins of different \ndenominations and an integer 'amount' representing a total amount \nof money, the task is to return the number of combinations that \nmake up that amount using the given coins. If that amount of money \ncannot be made up by any combination of the coins, return 0.\n\nExample:\nInput: amount = 5, coins = [1, 2, 5]\nOutput: 4\nExplanation: There are four ways to make up the amount:\n5 = 5\n5 = 2 + 2 + 1\n5 = 2 + 1 + 1 + 1\n5 = 1 + 1 + 1 + 1 + 1\n\nAPPROACH:\n- This problem can be solved using Dynamic Programming (DP).\n- Initialize a 2D DP array 'dp' where dp[i][j] represents the number \n  of combinations to make up amount 'j' using the first 'i' coins.\n- Base case:\n  - dp[i][0] = 1 for all 'i' (one way to make 0 amount with any coin)\n- For each coin 'i' and each possible amount 'j':\n  - dp[i][j] = dp[i-1][j] + dp[i][j-coins[i]]\n- The required answer will be dp[n][amount] where 'n' is the number \n  of coins and 'amount' is the given total amount.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of the solution is O(N * amount), where 'N' is \n  the number of coins and 'amount' is the given total amount.\n- The space complexity is O(N * amount) for the dp array.\n\nCODE:\n*/\n\n// Memoization\nint fmemo(int i, int tar, vector<int>& arr, vector<vector<int>>& dp){\n    if(i == 0){\n        if(tar % arr[i] != 0) return 0;\n        return 1;\n    }\n\n    if(dp[i][tar] != -1) return dp[i][tar];\n\n    int take = 0;\n    if(arr[i] <= tar) take = fmemo(i, tar - arr[i], arr, dp);\n    int notake = fmemo(i - 1, tar, arr, dp);\n    \n    return dp[i][tar] = (take + notake);\n}\n\n// Tabulation\n int ftab(int n, int amount, vector<int>& arr){\n    vector<vector<int>> dp(n,vector<int>(amount+1));\n    for(int i=0; i<n; i++){\n        for(int tar=0; tar<=amount; tar++){\n            if(i == 0){\n                if(tar % arr[i]!=0) dp[i][tar] = 0;\n                else dp[i][tar] = 1;\n                continue;\n            }\n            int take = 0;\n            if(arr[i] <= tar) take = dp[i][tar-arr[i]];\n            int notake = dp[i-1][tar];\n            dp[i][tar] = (take + notake);\n        }\n    }\n    return dp[n-1][amount];\n}\n\n// Space Optimization\nint fopt(int n, int amount, vector<int>& arr){\n    vector<int> prev(amount+1);\n    for(int i=0; i<n; i++){\n        vector<int> curr(amount+1);\n        for(int tar=0; tar<=amount; tar++){\n            if(i == 0){\n                if(tar % arr[i]!=0) curr[tar] = 0;\n                else curr[tar] = 1;\n                continue;\n            }\n            int take = 0;\n            if(arr[i] <= tar) take = curr[tar-arr[i]];\n            int notake = prev[tar];\n            curr[tar] = (take + notake);\n        }\n        prev = curr;\n    }\n    return prev[amount];\n}\n\nint change(int amount, vector<int>& coins) {\n    int n = coins.size();\n    vector<vector<int>> dp(n, vector<int>(amount + 1, -1));\n    return fmemo(n - 1, amount, coins, dp);\n}\n",
  " Construct BT from inorder and postorder": "/* QUESTION:\n\nGiven two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n\nAPPROACH:\n\nThe postorder traversal follows the left-right-root order, while the inorder traversal follows the left-root-right order. Based on these two traversals, we can construct the binary tree recursively.\n\n1. The last element in the postorder traversal array is the root of the binary tree.\n2. We can find the position of the root in the inorder traversal array. All the elements to the left of this position will be in the left subtree, and all the elements to the right will be in the right subtree.\n3. Recursively, we can build the left and right subtrees using the corresponding portions of the inorder and postorder traversal arrays.\n4. The recursive function takes the index of the current element in the postorder traversal array, the starting and ending indices of the current portion in the inorder traversal array, and the inorder and postorder traversal arrays as inputs.\n5. In each recursive call, we create a new node with the value of the current element in the postorder traversal array and determine its left and right subtrees by calling the recursive function on the corresponding portions of the inorder and postorder traversal arrays.\n6. The base case is when the starting index is greater than the ending index, indicating an empty portion of the tree. In this case, we return NULL.\n7. Finally, we return the root of the constructed binary tree.\n\nCOMPLEXITY ANALYSIS:\n\nLet n be the number of nodes in the binary tree.\n- Time Complexity: The time complexity of this approach is O(n), as we visit each node once.\n- Space Complexity: The space complexity is O(n) for the recursive call stack.\n\nCODE:\n*/\n\nTreeNode* solve(int pi, int ins, int ine, vector<int>& inorder, vector<int>& postorder) {\n    if (pi < 0 || ins > ine) return NULL;\n\n    int loc = -1;\n    for (int i = ins; i <= ine; i++) {\n        if (inorder[i] == postorder[pi])\n            loc = i;\n    }\n\n    TreeNode* root = new TreeNode(postorder[pi]);\n    root->right = solve(pi - 1, loc + 1, ine, inorder, postorder);\n    root->left = solve(pi - (ine - loc + 1), ins, loc - 1, inorder, postorder);\n\n    return root;\n}\n\nTreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n    int n = inorder.size();\n    return solve(n - 1, 0, n - 1, inorder, postorder);\n}\n",
  " Floyd Warshall Algorithm": "/* QUESTION:\n\nThe problem is to find the shortest distances between every pair of vertices in a given edge-weighted directed graph.\nThe graph is represented as an adjacency matrix of size n*n. Matrix[i][j] denotes the weight of the edge from i to j.\nIf Matrix[i][j] = -1, it means there is no edge from i to j.\n\nExample:\n\nInput: matrix = {{0, 25}, {-1, 0}}\n\nOutput: {{0, 25}, {-1, 0}}\n\nExplanation: The shortest distance between every pair is already given (if it exists).\n\nAPPROACH:\n- We will first replace all the \"-1\" entries in the adjacency matrix with a very large value (e.g., 1e9) to represent that there is no edge between those vertices.\n- Then, we will apply the Floyd-Warshall algorithm to find the shortest distances between all pairs of vertices in the graph.\n- In each iteration, we will consider an intermediate vertex k and update the shortest distance between each pair (i, j) if the path i -> k -> j is shorter than the current distance i -> j.\n- After completing the algorithm, we will replace the entries with a very large value (e.g., 1e9) with -1 in the adjacency matrix to represent that there is no path between those vertices.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of the Floyd-Warshall algorithm is O(V^3), where V is the number of vertices.\n- The space complexity is O(1) since we are modifying the input matrix in-place.\n\nCODE:\n*/\n\nvoid shortest_distance(vector<vector<int>>& matrix) {\n    int v = matrix.size();\n\n    for (int i = 0; i < v; i++) {\n        for (int j = 0; j < v; j++) {\n            if (matrix[i][j] == -1)\n                matrix[i][j] = 1e9;\n        }\n    }\n\n    for (int k = 0; k < v; k++) {\n        for (int i = 0; i < v; i++) {\n            for (int j = 0; j < v; j++) {\n                if (i == j)\n                    matrix[i][j] = 0;\n                matrix[i][j] = min(matrix[i][j], (matrix[i][k] + matrix[k][j]));\n            }\n        }\n    }\n\n    for (int i = 0; i < v; i++) {\n        for (int j = 0; j < v; j++) {\n            if (matrix[i][j] == 1e9)\n                matrix[i][j] = -1;\n        }\n    }\n}\n",
  " Iterative Postorder": "/*\nQuestion:\nGiven the root of a binary tree, return the postorder traversal of its nodes' values.\n\nApproach:\n- We can perform a postorder traversal iteratively using a stack and a map.\n- The idea is to push all the left children of a node into the stack until we reach a node with no left child.\n- Then, we check if the right child of the node exists or has already been visited (using the map).\n    - If it does not exist or has been visited, we add the node's value to the result vector and pop the node from the stack.\n    - Otherwise, we push the right child into the stack and mark it as visited in the map.\n- We repeat this process until the stack is empty and all nodes are traversed.\n\nComplexity Analysis:\n- Since we visit each node once and perform constant time operations for each node, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is also O(N) as we store the node values in the result vector and use a stack and a map to keep track of the nodes.\n\nCode:\n*/\n\nvoid pushLeft(TreeNode* curr, stack<TreeNode*>& st, unordered_map<TreeNode*, bool>& mp) {\n    while (curr) {\n        mp[curr] = true;\n        st.push(curr);\n        curr = curr->left;\n    }\n}\n\nvector<int> postorderTraversal(TreeNode* root) {\n    if (!root) {\n        return {};\n    }\n    vector<int> ans;\n    stack<TreeNode*> st;\n    TreeNode* curr = root;\n    unordered_map<TreeNode*, bool> mp;\n    pushLeft(curr, st, mp);\n    while (!st.empty()) {\n        curr = st.top();\n        if (!curr->right || mp[curr->right]) {\n            ans.push_back(curr->val);\n            st.pop();\n        }\n        else {\n            pushLeft(curr->right, st, mp);\n        }\n    }\n    return ans;\n}\n",
  " Maximal Rectangle in binary matrix": "/*\nQUESTION:\nGiven a binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n\nAPPROACH:\nTo solve this problem, we can use a variation of the Largest Rectangle in Histogram problem.\n1. First, we will calculate the heights of the histogram for each row in the matrix.\n   - If the current element is '1', we increment the height of the histogram at that column by 1.\n   - If the current element is '0', we reset the height of the histogram at that column to 0.\n2. For each row, we calculate the largest rectangle area using the heights calculated in step 1.\n   - We use the largestRectangleArea function, which calculates the largest rectangle area in a histogram.\n   - The histogram heights are the heights of the current row up to that column.\n3. Finally, we return the maximum area obtained from step 2.\n\nExample:\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 6\nExplanation: The maximal rectangle is shown in the above picture.\n\nCODE:\n*/\n\n// Helper function to calculate the previous smaller element index for each element in an array\nvector<int> prevSmaller(vector<int>& arr) {\n    stack<int> st;\n    vector<int> ans(arr.size(), -1);\n    for (int i = 0; i < arr.size(); i++) {\n        while (!st.empty() && arr[st.top()] > arr[i])\n            st.pop();\n        if (!st.empty())\n            ans[i] = st.top();\n        st.push(i);\n    }\n    return ans;\n}\n\n// Helper function to calculate the next smaller element index for each element in an array\nvector<int> nextSmaller(vector<int>& arr) {\n    stack<int> st;\n    vector<int> ans(arr.size(), arr.size());\n    for (int i = arr.size() - 1; i >= 0; i--) {\n        while (!st.empty() && arr[st.top()] >= arr[i])\n            st.pop();\n        if (!st.empty())\n            ans[i] = st.top();\n        st.push(i);\n    }\n    return ans;\n}\n\n// Function to calculate the largest rectangle area in a histogram represented by heights\nint largestRectangleArea(vector<int>& heights) {\n    vector<int> prev = prevSmaller(heights);\n    vector<int> next = nextSmaller(heights);\n\n    int ans = INT_MIN;\n    for (int i = 0; i < heights.size(); i++) {\n        ans = max(ans, (next[i] - prev[i] - 1) * heights[i]);\n    }\n    return ans;\n}\n\n// Function to find the largest rectangle area in a binary matrix\nint maximalRectangle(vector<vector<char>>& matrix) {\n    if (matrix.empty() || matrix[0].empty())\n        return 0;\n\n    int rows = matrix.size();\n    int cols = matrix[0].size();\n    vector<int> prev(cols, 0);\n    int maxArea = 0;\n\n    for (int i = 0; i < rows; i++) {\n        vector<int> curr(cols, 0);\n        for (int j = 0; j < cols; j++) {\n            if (matrix[i][j] == '1')\n                curr[j] = prev[j] + 1;\n        }\n\n        int rowArea = largestRectangleArea(curr);\n        maxArea = max(maxArea, rowArea);\n\n        prev = curr;\n    }\n\n    return maxArea;\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- Let n be the total number of elements in the matrix, and m be the number of columns.\n- The time complexity of the solution is O(n*m) because we iterate through each element of the matrix once.\n- The space complexity is O(m) since we use additional arrays to store the heights and indices during the calculation.\n  However, the space complexity can be considered O(1) if we modify the input matrix directly.\n*/\n\n",
  " Top View": "/*\nQuestion:\nGiven a binary tree, print its top view.\n\nApproach:\n- We can perform a level order traversal of the binary tree while keeping track of the horizontal distance (hd) of each node from the root.\n- For each node, if the horizontal distance is not present in the map, we add it to the map along with its value.\n- Since we want to print the nodes in the order of their horizontal distance, we maintain the minimum and maximum horizontal distances (`mini` and `maxi`) during the traversal.\n- Finally, we iterate over the range from `mini` to `maxi` and retrieve the corresponding values from the map, and add them to the result vector.\n\nComplexity Analysis:\n- Since we visit each node once and perform constant time operations for each node, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(N), where N is the number of nodes in the binary tree. This space is used to store the nodes in the map during the traversal.\n\nCode:\n*/\n\nvector<int> getTopView(TreeNode<int> *root) {\n    if (!root) return {};\n\n    unordered_map<int, int> mp;\n    int mini = 0, maxi = 0;\n    queue<pair<int, TreeNode<int>*>> q;\n    q.push({0, root});\n\n    while (!q.empty()) {\n        auto p = q.front();\n        q.pop();\n        TreeNode<int>* curr = p.second;\n        int hd = p.first;\n        if (curr->left) {\n            mini = min(mini, hd - 1);\n            q.push({hd - 1, curr->left});\n        }\n        if (curr->right) {\n            maxi = max(maxi, hd + 1);\n            q.push({hd + 1, curr->right});\n        }\n        if (mp.find(hd) == mp.end())\n            mp[hd] = curr->data;\n    }\n\n    vector<int> ans;\n    for (int i = mini; i <= maxi; i++) {\n        ans.push_back(mp[i]);\n    }\n\n    return ans;\n}\n",
  " Wildcard Matching": "/*\nQUESTION:\nGiven an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n- '?' Matches any single character.\n- '*' Matches any sequence of characters (including the empty sequence).\nThe matching should cover the entire input string (not partial).\n\nAPPROACH:\n- This problem can be solved using dynamic programming.\n- Let dp[i][j] represent whether the substring of s up to index i can be matched with the substring of p up to index j.\n- If s[i] equals p[j] or p[j] is '?', the characters match and we move diagonally to check the next characters.\n- If p[j] is '*', we have two options:\n  1. Move vertically up (skip the '*').\n  2. Move horizontally left (count '*' as matching zero characters).\n- Base cases: When both i and j are -1, return true. When only j is -1, check if the remaining characters in p are all '*'.\n- Return dp[n-1][m-1], where n is the length of s and m is the length of p.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of this approach is O(n * m), where n is the length of string s and m is the length of string p.\n- The space complexity is O(n * m) due to the dp array.\n- Overall, the algorithm runs in O(n * m) time and O(n * m) space.\n\nCODE:\n*/\n\nbool allStars(int i, string& p) {\n    for (int j = i; j >= 0; j--) {\n        if (p[j] != '*') return false;\n    }\n    return true;\n}\n\nint fmemo(int i, int j, string& s, string& p, vector<vector<int>>& dp) {\n    if (i < 0 && j < 0) return true;\n    if (j < 0 && i >= 0) return false;\n    if (i < 0 && j >= 0) {\n        if (allStars(j, p)) return true;\n        return false;\n    }\n    \n    if (dp[i][j] != -1) return dp[i][j];\n\n    if (s[i] == p[j] || p[j] == '?')\n        return dp[i][j] = fmemo(i - 1, j - 1, s, p, dp);\n    else {\n        if (p[j] == '*')\n            return dp[i][j] = (fmemo(i - 1, j, s, p, dp) || fmemo(i, j - 1, s, p, dp));\n        return dp[i][j] = false;\n    }\n}\n\nbool isMatch(string s, string p) {\n    int n = s.size(), m = p.size();\n    vector<vector<int>> dp(n, vector<int>(m, -1));\n    return fmemo(n - 1, m - 1, s, p, dp);\n}\n",
  "Book_allocation": "/*\nQuestion:\nYou have N books, each with Ai number of pages. M students need to be allocated contiguous books, with each student getting at least one book. Out of all the permutations, the goal is to find the permutation where the student with the most pages allocated to him gets the minimum number of pages, out of all possible permutations.\n\nNote: Return -1 if a valid assignment is not possible, and allotment should be in contiguous order.\n\nExample:\n\nInput:\nN = 4\nA[] = {12,34,67,90}\nM = 2\nOutput: 113\nExplanation:\nAllocation can be done in following ways:\n{12} and {34, 67, 90} Maximum Pages = 191\n{12, 34} and {67, 90} Maximum Pages = 157\n{12, 34, 67} and {90} Maximum Pages = 113.\nTherefore, the minimum of these cases is 113, which is selected as the output.\n\nApproach:\n- We can use binary search to find the minimum number of pages that can be allocated to the student with the most pages.\n- The range for binary search will be from the minimum number of pages in the array to the sum of all the pages in the array.\n- For each mid value, we will check if it is possible to allocate the books in a way that the maximum number of pages for a student is less than or equal to mid.\n- To check this, we iterate through the array of pages and keep track of the number of students and the sum of pages allocated to the current student.\n- If at any point, the sum exceeds the mid value, we increment the number of students and reset the sum to the current page value.\n- If the number of students exceeds the given M, it means we need more students to allocate the pages, so we return false.\n- If at the end, the number of students is less than or equal to M, it means it is possible to allocate the pages within the given constraints, so we return true.\n- Finally, we perform binary search and find the minimum mid value that returns true in the isPossible function.\n\nCode:\n*/\n\nbool isPossible(int mid, int A[], int N, int M) {\n    int pos_m = 1;\n    int temp = 0;\n    for (int i = 0; i < N; i++) {\n        if (temp + A[i] <= mid) {\n            temp += A[i];\n        } else {\n            pos_m++;\n            if (A[i] > mid)\n                return false;\n            temp = A[i];\n        }\n    }\n    if (pos_m <= M)\n        return true;\n    return false;\n}\n\nint findPages(int A[], int N, int M) {\n    if (M > N)\n        return -1;\n    int low = INT_MAX, high = 0;\n    int ans = -1;\n    for (int i = 0; i < N; i++) {\n        low = min(low, A[i]);\n        high += A[i];\n    }\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (isPossible(mid, A, N, M)) {\n            ans = mid;\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\n\n/*\nTime Complexity: O(N log S), where N is the number of books and S is the sum of all the pages in the array. The binary search takes log S iterations, and for each iteration, we check the validity of allocation in O(N) time.\nSpace Complexity: O(1), as we are using a constant amount of extra space.\n*/",
  "Combination Sum 3": "/*QUESTION:\nFind all valid combinations of k numbers that sum up to n such that the following conditions are true:\n- Only numbers 1 through 9 are used.\n- Each number is used at most once.\nReturn a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\n\nExample:\nInput: k = 3, n = 7\nOutput: [[1,2,4]]\nExplanation: 1 + 2 + 4 = 7. There are no other valid combinations.\n\nApproach:\nTo find all valid combinations of k numbers that sum up to n, we can use a recursive backtracking approach.\n1. Create a helper function called 'solve' that takes the current index, the number of elements to choose (k), the target sum (tar), the array of available numbers (nums), a temporary vector to store the current combination, and a vector of vector to store all combinations as parameters.\n2. In the 'solve' function:\n   - If the target sum is equal to 0 and the size of the current combination is equal to k, add the current combination to the vector of combinations.\n   - If the current index is equal to the size of the array or the target sum is less than 0, return.\n   - If the current number is less than or equal to the target sum:\n     - Add the current number to the current combination.\n     - Recursively call the 'solve' function with the updated index by incrementing it, the same number of elements to choose (k), the reduced target sum by subtracting the current number, the same array of available numbers (nums), the current combination, and the vector of combinations.\n     - Remove the last added number from the current combination (backtracking).\n   - Recursively call the 'solve' function with the updated index by incrementing it, the same number of elements to choose (k), the same target sum, the same array of available numbers (nums), the current combination, and the vector of combinations.\n3. Create the main function called 'combinationSum3' that calculates and returns the vector of combinations.\n   - Initialize an array of available numbers containing numbers from 1 to 9.\n   - Initialize an empty vector to store the combinations.\n   - Call the 'solve' function with the initial index as 0, the number of elements to choose (k), the target sum (n), the array of available numbers, an empty temporary vector, and the vector of combinations.\n   - Return the vector of combinations.\n\nTime Complexity: O(2^9), as there are 9 available numbers and we have to explore all possible combinations.\nSpace Complexity: O(k), as the maximum depth of the recursion tree is determined by the number of elements to choose (k).\n\nCODE:*/\nvoid solve(int i, int k, int tar, vector<int>& nums, vector<int>& temp, vector<vector<int>>& ans) {\n    if (tar == 0 && temp.size() == k) {\n        ans.push_back(temp);\n        return;\n    }\n\n    if (i == nums.size() || tar < 0)\n        return;\n\n    if (nums[i] <= tar) {\n        temp.push_back(nums[i]);\n        solve(i + 1, k, tar - nums[i], nums, temp, ans);\n        temp.pop_back();\n    }\n\n    solve(i + 1, k, tar, nums, temp, ans);\n}\n\nvector<vector<int>> combinationSum3(int k, int n) {\n    vector<int> nums;\n    for (int i = 1; i <= 9; i++) {\n        nums.push_back(i);\n    }\n\n    vector<vector<int>> ans;\n    vector<int> temp;\n    solve(0, k, n, nums, temp, ans);\n    return ans;\n}\n",
  "Delete_mid_of_LL": "/*\nQUESTION:-\nYou are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.\n\nExample:\nInput: head = [1,3,4,7,1,2,6]\nOutput: [1,3,4,1,2,6]\nExplanation:\nThe above figure represents the given linked list. The indices of the nodes are written below.\nSince n = 7, node 3 with value 7 is the middle node, which is marked in red.\nWe return the new list after removing this node.\n\nAPPROACH:\nTo delete the middle node of a linked list, we can use the slow and fast pointer technique.\n1. Initialize three pointers: slow, fast, and prev.\n2. Move the slow pointer one step at a time and the fast pointer two steps at a time.\n3. Keep track of the previous node using the prev pointer.\n4. When the fast pointer reaches the end of the linked list, the slow pointer will be at the middle node.\n5. Update the next pointer of the previous node to skip the middle node.\n6. Return the head of the modified linked list.\n\nTIME COMPLEXITY: O(N)\nSPACE COMPLEXITY: O(1)\n*/\n\nListNode* deleteMiddle(ListNode* head) {\n    ListNode* slow = head;\n    ListNode* fast = head;\n    ListNode* prev = NULL;\n    \n    // Move the slow and fast pointers\n    while (fast && fast->next) {\n        prev = slow;\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n    \n    // Update the next pointer of the previous node\n    prev->next = slow->next;\n    \n    return head;\n}\n",
  "Leaders_in_array": "/*\nQUESTION:-\n\nGiven an array A of positive integers. Your task is to find the leaders in the array. An element of the array is a leader if it is greater than or equal to all the elements to its right side. The rightmost element is always a leader.\n\nExample 1:\nInput:\nn = 6\nA[] = {16,17,4,3,5,2}\nOutput: 17 5 2\nExplanation: The first leader is 17 as it is greater than all the elements to its right. Similarly, the next leader is 5. The rightmost element is always a leader, so it is also included.\n\n*/\n\n/*\nAPPROACH:-\n\nTo find the leaders in the array, we can follow these steps:\n\n1. Initialize a variable `maxRight` with the rightmost element of the array.\n2. Iterate the array from right to left:\n   - If the current element is greater than or equal to `maxRight`, it is a leader. Print the current element and update `maxRight` to the current element.\n3. Finally, print `maxRight` as it is always a leader.\n\n*/\n\n// CODE:\n\nvector<int> leaders(int a[], int n)\n{\n    vector<int> ans;\n    ans.push_back(a[n - 1]);\n    int maxi = a[n - 1]; // represent maximum encountered till now\n\n    for (int i = n - 2; i >= 0; i--)\n    {\n        if (a[i] >= maxi)\n        {\n            ans.push_back(a[i]);\n            maxi = a[i];\n        }\n    }\n\n    reverse(ans.begin(), ans.end());\n    return ans;\n}\n\n// TIME COMPLEXITY: O(n), where n is the size of the array.\n// SPACE COMPLEXITY: O(1)\n\n",
  "Repeating_and_missing_numbers": "/*\nQUESTION:\nGiven an unsorted array Arr of size N of positive integers. One number 'A' from set {1, 2,....,N} is missing and one number 'B' occurs twice in the array. Find these two numbers.\n\nExample:\nInput:\nN = 2\nArr[] = {2, 2}\nOutput: 2 1\nExplanation: Repeating number is 2 and the smallest positive missing number is 1.\n\nAPPROACH:\nTo find the missing and repeating numbers in the given unsorted array, we can utilize the properties of summation and sum of squares. Let's denote the missing number as 'x' and the repeating number as 'y'.\n\n1. Calculate the optimal sum 'optSum' using the formula: optSum = N * (N + 1) / 2, where N is the size of the array.\n2. Calculate the optimal sum of squares 'opt2Sum' using the formula: opt2Sum = N * (N + 1) * (2 * N + 1) / 6.\n3. Calculate the actual sum 'actSum' and actual sum of squares 'act2Sum' of the given array.\n4. Find the difference between the optimal sum and the actual sum: xMinusY = optSum - actSum.\n5. Find the difference between the optimal sum of squares and the actual sum of squares: x2MinusY2 = opt2Sum - act2Sum.\n6. Calculate the sum of 'x' and 'y': xPlusY = x2MinusY2 / xMinusY.\n7. Calculate 'x' and 'y' using the equations: x = (xPlusY + xMinusY) / 2 and y = xPlusY - x.\n\nCODE:\n*/\n\nvector<int> findTwoElement(vector<int> arr, int N) {\n    long long n = N;\n    long long optSum = n * (n + 1) / 2; // Sum if all elements are present once\n    long long opt2Sum = n * (n + 1) * (2 * n + 1) / 6; // Optimum sum of squares\n    long long actSum = 0; // Actual sum of the given array\n    long long act2Sum = 0; // Actual sum of squares\n    \n    for (auto it : arr) {\n        actSum += it;\n        act2Sum += (long long)it * (long long)it;\n    }\n    \n    long long xMinusY = optSum - actSum;\n    long long x2MinusY2 = opt2Sum - act2Sum;\n    long long xPlusY = x2MinusY2 / xMinusY;\n    \n    long long x = (xPlusY + xMinusY) / 2;\n    long long y = xPlusY - x;\n    \n    return {(int)y, (int)x};\n}\n\n/*\nTIME COMPLEXITY: O(N), where N is the size of the array.\nSPACE COMPLEXITY: O(1).\n*/\n",
  "Search_in_rotated_sorted_array": "/*\nQUESTION:\nThere is an integer array nums sorted in ascending order (with distinct values).\n\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\n\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\n\nYou must write an algorithm with O(log n) runtime complexity.\n\nExample 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n\nExample 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n*/\n\n/*\nAPPROACH:\nWe can use the binary search approach to find the target element in the rotated sorted array.\n1. Initialize low = 0 and high = nums.size() - 1, where nums is the input array.\n2. Perform binary search using the while loop until low <= high.\n3. Calculate mid = low + (high - low) / 2.\n4. If nums[mid] is equal to the target, return mid.\n5. Check if the left part of the array (nums[low] to nums[mid]) is sorted or the right part (nums[mid] to nums[high]) is sorted.\n   - If the left part is sorted:\n     - If the target is within the range of nums[low] and nums[mid], update high = mid - 1.\n     - Otherwise, update low = mid + 1.\n   - If the right part is sorted:\n     - If the target is within the range of nums[mid] and nums[high], update low = mid + 1.\n     - Otherwise, update high = mid - 1.\n6. If the target is not found after the while loop, return -1.\n\nCODE:\n*/\n\nint search(vector<int>& nums, int target) {\n    int low = 0, high = nums.size() - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (nums[mid] == target)\n            return mid;\n        if (nums[low] <= nums[mid]) {\n            if (nums[low] <= target && target <= nums[mid])\n                high = mid - 1;\n            else\n                low = mid + 1;\n        } else {\n            if (nums[mid] <= target && target <= nums[high])\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;\n}\n\n// TIME COMPLEXITY: O(log n)\n// SPACE COMPLEXITY: O(1)\n",
  "Union_of_2_sorted_arrays": "/*\nQUESTION:-\nUnion of two arrays can be defined as the common and distinct elements in the two arrays.\nGiven two sorted arrays of size n and m respectively, find their union.\n\n\nExample 1:\n\nInput:\nn = 5, arr1[] = {1, 2, 3, 4, 5}\nm = 3, arr2 [] = {1, 2, 3}\nOutput: 1 2 3 4 5\nExplanation: Distinct elements including\nboth the arrays are: 1 2 3 4 5.\n\n\nExample 2:\n\nInput:\nn = 5, arr1[] = {2, 2, 3, 4, 5}\nm = 5, arr2[] = {1, 1, 2, 3, 4}\nOutput: 1 2 3 4 5\nExplanation: Distinct elements including\nboth the arrays are: 1 2 3 4 5.\n*/\n\n/*\nAPPROACH:-\n-> Take two pointer i and j where i is for arr1 and j is for arr2 and traverse\n-> While travsersing 3 cases arises\n    -> arr1[ i ] == arr2[ j ]\n        Here we found a common element, so insert only one element in the union.\n        Let’s insert arr[i] in union and whenever we insert element we increment pointer while pointer is not equal to the inserted element\n    -> arr1[i]<arr2[j]\n        Here insert arr[i]\n    -> arr1[i]>arr2[j]\n        Here insert arr2[j]\n-> Now check if elements of any array is left to traverse then traverse that array\n*/\n\n// CODE:-\nvector<int> findUnion(int arr1[], int arr2[], int n, int m)\n{\n    int i = 0; // i to keep track in arr1\n    int j = 0; // j to keep track in arr2\n    vector<int> ans;\n\n    while (i < n && j < m)\n    {\n\n        if (arr1[i] < arr2[j])\n        {\n            ans.push_back(arr1[i++]);\n            while (i < n && arr1[i] == arr1[i - 1])\n                i++;\n        }\n        else if (arr2[j] < arr1[i])\n        {\n            ans.push_back(arr2[j++]);\n            while (j < m && arr2[j] == arr2[j - 1])\n                j++;\n        }\n        // means arr1[i] = arr2[j] in that case we can insert anyone\n        else\n        {\n            ans.push_back(arr1[i++]);\n            j++;\n            while (i < n && arr1[i] == arr1[i - 1])\n                i++;\n            while (j < m && arr2[j] == arr2[j - 1])\n                j++;\n        }\n    }\n\n    while (i < n)\n    {\n        ans.push_back(arr1[i++]);\n        while (i < n && arr1[i] == arr1[i - 1])\n            i++;\n    }\n    while (j < m)\n    {\n        ans.push_back(arr2[j++]);\n        while (j < m && arr2[j] == arr2[j - 1])\n            j++;\n    }\n\n    return ans;\n}\n\n// TIME COMPLEXITY = O(N+M)\n// SPACE COMPLEXITY = O(0)",
  "Row_with_maximum_number_of_1's": "/*\nQUESTION:-\nGiven a boolean 2D array of n x m dimensions where each row is sorted. Find the 0-based index of the first row that has the maximum number of 1's.\n\nExample 1:\n\nInput:\nN = 4 , M = 4\nArr[][] = {{0, 1, 1, 1},\n           {0, 0, 1, 1},\n           {1, 1, 1, 1},\n           {0, 0, 0, 0}}\nOutput: 2\nExplanation: Row 2 contains 4 1's (0-based indexing).\n*/\n\n/*\nAPPROACH:-\n-> We can use two pointer i and j which indicates current row and col\n-> As we know the matrix is row-wise sorted we can intilaize j=m-1 i.e. last col and i=0 i.e. first row\n-> Now, the idea is we will keep moving left j while we occur 1 and if 0 is found we will check in next row\n-> The last row where we encountered 1 will be our ans\n\n                {*0, *1, *1, *1}\n                {*0,  0,  1,  1}\nout of matrix  *{*1,  1,  1,  1} ---> ans\n                {0,  0,  0,  0}\n\n\n\n*/\n\n// CODE:-\nint rowWithMax1s(vector<vector<int>> arr, int n, int m)\n{\n    int j = m - 1;\n    int i = 0;\n    int ans = -1;\n    while (j >= 0 && i < n)\n    {\n        while (arr[i][j] == 1)\n        {\n            ans = i;\n            j--;\n        }\n        if (i < n)\n            i++;\n    }\n    return ans;\n}\n\n// TIME COMPLEXITY = O(N+M)\n// SPACE COMPLEXITY = O(0)",
  " All in one traversal": "/*\nQuestion:\nYou have been given a Binary Tree of 'N' nodes, where the nodes have integer values.\nYour task is to find the In-Order, Pre-Order, and Post-Order traversals of the given binary tree.\n\nApproach:\n- We can perform the tree traversals recursively using three functions:\n    - In-Order Traversal: Visit the left subtree, visit the current node, visit the right subtree.\n    - Pre-Order Traversal: Visit the current node, visit the left subtree, visit the right subtree.\n    - Post-Order Traversal: Visit the left subtree, visit the right subtree, visit the current node.\n- For each traversal, we can maintain a vector to store the values of the visited nodes in the respective order.\n\nComplexity Analysis:\n- Since we visit each node once and perform constant time operations for each node, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(N) as we store the values of the nodes in vectors for each traversal.\n\nCode:\n*/\n\nvoid traversal(BinaryTreeNode<int>* root, vector<int>& pre, vector<int>& ino, vector<int>& pos) {\n    if (root == NULL) {\n        return;\n    }\n\n    // Pre-Order Traversal\n    pre.push_back(root->data);\n    traversal(root->left, pre, ino, pos);\n    // In-Order Traversal\n    ino.push_back(root->data);\n    traversal(root->right, pre, ino, pos);\n    // Post-Order Traversal\n    pos.push_back(root->data);\n}\n\nvector<vector<int>> getTreeTraversal(BinaryTreeNode<int>* root) {\n    vector<vector<int>> ans;\n    vector<int> pre;\n    vector<int> ino;\n    vector<int> pos;\n\n    traversal(root, pre, ino, pos);\n\n    ans.push_back(ino);\n    ans.push_back(pre);\n    ans.push_back(pos);\n\n    return ans;\n}\n",
  " Asteroids Collision": "/*\nQUESTION:\nWe are given an array of integers representing asteroids in a row. Each asteroid moves at the same speed.\nIf two asteroids meet, the smaller one will explode. If both are the same size, both will explode.\nFind out the state of the asteroids after all collisions.\n\nAPPROACH:\nTo solve this problem, we can use a stack to simulate the asteroid collisions.\n1. We iterate through each asteroid in the given array.\n2. For each asteroid, we check if it will collide with the asteroids in the stack.\n   - If the current asteroid is moving to the right (positive direction), we simply push it onto the stack.\n   - If the current asteroid is moving to the left (negative direction), we compare its size with the asteroids in the stack.\n     - If the stack is empty or the top asteroid in the stack is also moving to the left, we push the current asteroid onto the stack.\n     - If the top asteroid in the stack is moving to the right and its size is smaller than the current asteroid, we pop the top asteroid from the stack and continue the comparison.\n     - If the top asteroid in the stack is moving to the right and its size is equal to or greater than the current asteroid, we do not push the current asteroid onto the stack and continue to the next asteroid.\n3. After processing all the asteroids, the remaining asteroids in the stack represent the final state after collisions.\n\nExample:\nInput: asteroids = [5,10,-5]\nOutput: [5,10]\nExplanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.\n\nCODE:\n*/\n\nvector<int> asteroidCollision(vector<int>& asteroids) {\n    stack<int> st;\n    for (int i = 0; i < asteroids.size(); i++) {\n        int siz = abs(asteroids[i]);\n        while (!st.empty() && (st.top() > 0 && asteroids[i] < 0) && (st.top() < siz)) {\n            st.pop();\n        }\n        // Check if same size asteroids collide\n        if (!st.empty() && (st.top() > 0 && asteroids[i] < 0) && st.top() == siz) {\n            st.pop();\n        }\n        else if (st.empty() || !(st.top() > 0 && asteroids[i] < 0)) {\n            st.push(asteroids[i]);\n        }\n    }\n    vector<int> ans;\n    while (!st.empty()) {\n        ans.push_back(st.top());\n        st.pop();\n    }\n    reverse(ans.begin(), ans.end());\n    return ans;\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- Let n be the number of asteroids in the given array.\n- The time complexity of the solution is O(n) because we iterate through each asteroid once.\n- The space complexity is O(n) because in the worst case, all asteroids can be stored in the stack.\n*/\n",
  " Bottom View": "/*\nQuestion:\nGiven a binary tree, print its bottom view.\n\nApproach:\n- We can perform a level order traversal of the binary tree while keeping track of the horizontal distance (hd) and the level of each node from the root.\n- For each node, we update its horizontal distance and level in the map.\n- Since we want to print the nodes in the order of their horizontal distance, we maintain the minimum and maximum horizontal distances (`mini` and `maxi`) during the traversal.\n- Finally, we iterate over the range from `mini` to `maxi` and retrieve the corresponding values from the map, and add them to the result vector.\n\nComplexity Analysis:\n- Since we visit each node once and perform constant time operations for each node, the time complexity of this approach is O(N), where N is the number of nodes in the binary tree.\n- The space complexity is O(N), where N is the number of nodes in the binary tree. This space is used to store the nodes in the map during the traversal.\n\nCode:\n*/\n\nvector<int> getBottomView(TreeNode<int> *root) {\n    if (!root) return {};\n\n    unordered_map<int, pair<int, int>> mp;\n    int mini = 0, maxi = 0;\n    queue<pair<TreeNode<int>*, pair<int, int>>> q;\n    q.push({root, {0, 0}});\n\n    while (!q.empty()) {\n        auto p = q.front();\n        q.pop();\n        TreeNode<int>* curr = p.first;\n        int hd = p.second.first;\n        int level = p.second.second;\n\n        mp[hd] = {curr->data, level};\n        mini = min(mini, hd);\n        maxi = max(maxi, hd);\n\n        if (curr->left) {\n            q.push({curr->left, {hd - 1, level + 1}});\n        }\n        if (curr->right) {\n            q.push({curr->right, {hd + 1, level + 1}});\n        }\n    }\n\n    vector<int> ans;\n    for (int i = mini; i <= maxi; i++) {\n        ans.push_back(mp[i].first);\n    }\n\n    return ans;\n}\n",
  " Distinct Islands": "/*\nQUESTION:\nGiven a boolean 2D matrix grid of size n * m. You have to find the number of distinct islands where a group of connected 1s (horizontally or vertically) forms an island. Two islands are considered to be distinct if and only if one island is not equal to another (not rotated or reflected).\n\nAPPROACH:\n- We can model this problem as a graph where each group of connected 1s forms an island.\n- We can use Depth-First Search (DFS) to traverse the grid and identify each island.\n- During the DFS, we keep track of the path taken to traverse each island. The path can be represented as a string, where each character in the string represents the direction of movement during the DFS (U for Up, D for Down, R for Right, and L for Left).\n- We use a set to store the paths of all distinct islands. As sets store unique elements, we will have only unique paths in the set.\n- Finally, we return the size of the set, which gives us the number of distinct islands.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(n * m), where n is the number of rows and m is the number of columns in the grid. We visit each cell at most once during the DFS.\n- Space Complexity: O(n * m), where n is the number of rows and m is the number of columns in the grid. We use additional space to store the visited status of each cell and the paths of the islands in the set.\n*/\n\nvoid dfs(int i, int j, vector<vector<int>>& grid, string& path, vector<vector<bool>>& vis){\n    if(i >= 0 && i < grid.size() && j >= 0 && j < grid[0].size() && grid[i][j] == 1 && !vis[i][j]){\n        vis[i][j] = true;\n        dfs(i + 1, j, grid, path += \"U\", vis);\n        dfs(i - 1, j, grid, path += \"D\", vis);\n        dfs(i, j + 1, grid, path += \"R\", vis);\n        dfs(i, j - 1, grid, path += \"L\", vis);\n    }  \n}\n\nint countDistinctIslands(vector<vector<int>>& grid) {\n    int n = grid.size(), m = grid[0].size();\n    vector<vector<bool>> vis(n, vector<bool>(m));\n    \n    unordered_set<string> st;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n            if(grid[i][j] == 1 && !vis[i][j]){\n                string path = \"\";\n                dfs(i, j, grid, path, vis);\n                st.insert(path);\n            }\n        }\n    }\n    \n    return st.size();\n}\n",
  " Find city with smallest number of neighbours": "/* QUESTION:\n\nThere are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distanceThreshold.\n\nReturn the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold. If there are multiple such cities, return the city with the greatest number.\n\nNotice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.\n\nExample:\n\nInput: n = 4, edges = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]], distanceThreshold = 4\nOutput: 3\nExplanation: The figure above describes the graph.\nThe neighboring cities at a distanceThreshold = 4 for each city are:\nCity 0 -> [City 1, City 2]\nCity 1 -> [City 0, City 2, City 3]\nCity 2 -> [City 0, City 1, City 3]\nCity 3 -> [City 1, City 2]\nCities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.\n\nAPPROACH:\n- We will use Dijkstra's algorithm to find the shortest distances from each city to all other cities in the graph.\n- For each city, we will find the count of cities that are reachable through some path and whose distance is at most distanceThreshold.\n- We will keep track of this count for each city in a map.\n- Finally, we will find the city with the smallest count, and if there are multiple such cities, we will return the city with the greatest number.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of Dijkstra's algorithm is O(V^2), where V is the number of cities.\n- Since we perform Dijkstra's algorithm for each city, the overall time complexity is O(V^3).\n- The space complexity is O(V) for storing the distances and the count of reachable cities for each city.\n\nCODE:\n*/\n\nint findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {\n    vector<pair<int, int>> adj[n];\n    for (auto e : edges) {\n        adj[e[0]].push_back({e[1], e[2]});\n        adj[e[1]].push_back({e[0], e[2]});\n    }\n\n    vector<int> dis(n, numeric_limits<int>::max());\n    unordered_map<int, int> mp;\n\n    for (int i = 0; i < n; i++) {\n        dis[i] = 0;\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n        pq.push({0, i});\n\n        while (!pq.empty()) {\n            auto [uwt, u] = pq.top();\n            pq.pop();\n\n            for (auto [v, vwt] : adj[u]) {\n                if (dis[v] > uwt + vwt) {\n                    dis[v] = uwt + vwt;\n                    pq.push({dis[v], v});\n                }\n            }\n        }\n\n        int nbrCnt = 0;\n        for (int j = 0; j < n; j++) {\n            if (i != j && dis[j] <= distanceThreshold)\n                nbrCnt++;\n            dis[j] = numeric_limits<int>::max();\n        }\n        mp[i] = nbrCnt;\n    }\n\n    int mini = numeric_limits<int>::max(), ans = 0;\n    for (int i = 0; i < n; i++) {\n        if (mp[i] < mini) {\n            mini = mp[i];\n            ans = i;\n        } else if (mp[i] == mini)\n            ans = max(ans, i);\n    }\n\n    return ans;\n}\n",
  " Two Sum in BST": "/*\nQuestion:\nGiven the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.\n\nExplanation:\n- We are using two stacks, one for the left traversal and one for the right traversal of the BST.\n- The next() function returns the next smallest element in the BST by popping the top element from the left stack and pushing all the leftmost nodes in its right subtree to the stack.\n- The before() function returns the next largest element in the BST by popping the top element from the right stack and pushing all the rightmost nodes in its left subtree to the stack.\n- We use the two pointer approach with the next() and before() functions to find the pair of elements in the BST whose sum is equal to k.\n\nTime Complexity:\n- The findTarget() function uses two pointers (one for the left and one for the right traversal of the BST) and performs a two pointer traversal of the BST, taking O(n) time, where n is the number of nodes in the BST.\n- The next() and before() functions take O(h) time each, where h is the height of the BST, as they traverse the leftmost and rightmost paths in the BST.\n\nSpace Complexity:\n- The space complexity is O(h), where h is the height of the BST, as the stacks store the nodes in the leftmost and rightmost paths of the BST.\n\n*/\n\nstack<TreeNode*> stl;\nstack<TreeNode*> str;\n\nvoid pushLeft(TreeNode* root) {\n    while (root) {\n        stl.push(root);\n        root = root->left;\n    }\n}\n\nvoid pushRight(TreeNode* root) {\n    while (root) {\n        str.push(root);\n        root = root->right;\n    }\n}\n\nint next() {\n    if (stl.empty()) return 1e9;\n    TreeNode* ans = stl.top();\n    stl.pop();\n    if (ans->right) {\n        pushLeft(ans->right);\n    }\n    return ans->val;\n}\n\nint before() {\n    if (str.empty()) return 1e9;\n    TreeNode* ans = str.top();\n    str.pop();\n    if (ans->left) {\n        pushRight(ans->left);\n    }\n    return ans->val;\n}\n\nbool findTarget(TreeNode* root, int k) {\n    pushLeft(root);\n    pushRight(root);\n\n    int l = next();\n    int r = before();\n    while (l < r) {\n        if (l == 1e9 || r == 1e9) return false;\n        if (l + r == k) return true;\n        else if (l + r < k) l = next();\n        else r = before();\n    }\n\n    return false;\n}\n",
  " Unbounded Knapsack": "/*\nQUESTION:\nGiven a set of N items, each with a weight and a value, represented \nby the arrays w[] and val[] respectively, and a knapsack with weight \nlimit 'W', the task is to fill the knapsack in such a way that we \ncan get the maximum profit. Return the maximum profit.\nNote: Each item can be taken any number of times.\n\nExample:\nInput: N = 2, W = 3\nval[] = {1, 1}\nwt[] = {2, 1}\nOutput: 3\nExplanation: \n1. Pick the 2nd element thrice.\n2. Total profit = 1 + 1 + 1 = 3. Also the total weight = 1 + 1 + 1 = 3 \n   which is <= W.\n\nAPPROACH:\n- This problem can be solved using Dynamic Programming (DP).\n- Initialize a 2D DP array 'dp' where dp[i][j] represents the maximum \n  profit that can be obtained by using items from 0 to 'i' with a total \n  weight of 'j'.\n- Base case: dp[0][j] = j / wt[0] * val[0] (maximum profit with only \n  the first item)\n- For each item 'i' and each possible total weight 'j':\n  - dp[i][j] = max(dp[i-1][j], val[i] + dp[i][j - wt[i]])\n- The required answer will be dp[N-1][W] where 'N' is the number of items \n  and 'W' is the given weight limit.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of the solution is O(N * W), where 'N' is the number \n  of items and 'W' is the given weight limit.\n- The space complexity is O(N * W) for the dp array.\n\nCODE:\n*/\n\n// Memoization\nint fmemo(int i, int val[], int wt[], int W, vector<vector<int>>& dp){\n    if(i == 0){\n        if(W >= wt[i]){\n            return dp[i][W] = (W / wt[i]) * val[i];\n        }\n        else return dp[i][W] = 0;\n    }\n    \n    if(dp[i][W] != -1) return dp[i][W];\n    \n    int take = INT_MIN;\n    if(W >= wt[i]) take = val[i] + fmemo(i, val, wt, W - wt[i], dp);\n    int notake = fmemo(i - 1, val, wt, W, dp);\n    \n    return dp[i][W] = max(take, notake);\n}\n\n// Tabulation\nint ftab(int n, int val[], int wt[], int weight){\n    vector<vector<int>> dp(n,vector<int>(weight+1));\n    for(int i=0; i<n; i++){\n        for(int W=0; W<=weight; W++){\n            if(i==0){\n                if(W >= wt[i]) dp[i][W] = (W/wt[i])*val[i];\n                else dp[i][W] = 0;\n                continue;\n            }\n            int take = INT_MIN;\n            if(W >= wt[i]) take = val[i]+dp[i][W-wt[i]];\n            int notake = dp[i-1][W];\n            dp[i][W] = max(take,notake);\n        }\n    }\n    return dp[n-1][weight];\n}\n\n// Space Optimization\nint fopt(int n, int val[], int wt[], int weight){\n    vector<int> prev(weight+1);\n    for(int i=0; i<n; i++){\n        vector<int> curr(weight+1);\n        for(int W=0; W<=weight; W++){\n            if(i==0){\n                if(W >= wt[i]) curr[W] = (W/wt[i])*val[i];\n                else curr[W] = 0;\n                continue;\n            }\n            int take = INT_MIN;\n            if(W >= wt[i]) take = val[i]+curr[W-wt[i]];\n            int notake = prev[W];\n            curr[W] = max(take,notake);\n        }\n        prev = curr;\n    }\n    return dp[n-1][weight];\n}\n\n\nint knapSack(int N, int W, int val[], int wt[]){\n    vector<vector<int>> dp(N, vector<int>(W + 1, -1));\n    return fmemo(N - 1, val, wt, W, dp);\n}\n",
  "Count_inversions": "/*\nQUESTION:\nGiven an array of integers. Find the Inversion Count in the array.\n\nInversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0. If an array is sorted in the reverse order then the inversion count is the maximum. \nFormally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.\n\nExample 1:\nInput: N = 5, arr[] = {2, 4, 1, 3, 5}\nOutput: 3\nExplanation: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).\n\nExample 2:\nInput: N = 5, arr[] = {2, 3, 4, 5, 6}\nOutput: 0\nExplanation: As the sequence is already sorted, there is no inversion count.\n\nAPPROACH:\nTo find the inversion count in the array, we can utilize the merge sort algorithm. The idea is to divide the array into two halves, recursively count the inversions in each half, and then merge the two halves while counting the inversions across them.\n\nCODE:\n*/\n\nlong long int inv_cnt = 0;\n\nlong long int merge(long long start, long long mid, long long end, long long arr[]) {\n    long long leftsize = mid - start + 1;\n    long long rightsize = end - mid;\n    long long left[leftsize], right[rightsize];\n    \n    for (long long i = 0; i < leftsize; i++) {\n        left[i] = arr[start + i];\n    }\n    for (long long i = 0; i < rightsize; i++) {\n        right[i] = arr[mid + 1 + i];\n    }\n    \n    long long i = 0, j = 0, k = start;\n    while (i < leftsize && j < rightsize) {\n        if (left[i] > right[j]) {\n            inv_cnt += leftsize - i;\n            arr[k++] = right[j++];\n        } else {\n            arr[k++] = left[i++];\n        }\n    }\n    while (i < leftsize) {\n        arr[k++] = left[i++];\n    }\n    while (j < rightsize) {\n        arr[k++] = right[j++];\n    }\n}\n\nvoid mergesort(long long start, long long end, long long arr[]) {\n    if (start >= end)\n        return;\n    long long mid = start + (end - start) / 2;\n    mergesort(start, mid, arr);\n    mergesort(mid + 1, end, arr);\n    merge(start, mid, end, arr);\n}\n\nlong long int inversionCount(long long arr[], long long N) {\n    mergesort(0, N - 1, arr);\n    return inv_cnt;\n}\n\n/*\nTIME COMPLEXITY: O(N log N), where N is the size of the array.\nSPACE COMPLEXITY: O(N).\n*/\n",
  "Letter combinations of phone": "/*QUESTION:\nGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\n\nExample:\nInput: digits = \"23\"\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n\nApproach:\nWe can use a recursive backtracking approach to generate all possible letter combinations.\n1. Create a helper function called 'solve' that takes the current index, the input string of digits, a temporary string to store the current combination, the vector to store all combinations, and a mapping vector that maps each digit to its corresponding letters.\n2. In the 'solve' function:\n   - If the current index is equal to the size of the input string, add the current combination to the vector of combinations and return.\n   - Get the corresponding digit at the current index from the input string.\n   - Iterate through the letters associated with the current digit:\n     - Append the current letter to the temporary string.\n     - Recursively call the 'solve' function with the updated index by incrementing it, the same input string of digits, the updated temporary string, the vector of combinations, and the mapping vector.\n     - Remove the last added letter from the temporary string (backtracking).\n3. Create the main function called 'letterCombinations' that calculates and returns the vector of combinations.\n   - Check if the input string is empty. If so, return an empty vector.\n   - Initialize a mapping vector that maps each digit to its corresponding letters.\n   - Initialize an empty temporary string.\n   - Initialize an empty vector to store the combinations.\n   - Call the 'solve' function with the initial index as 0, the input string of digits, the temporary string, the vector of combinations, and the mapping vector.\n   - Return the vector of combinations.\n\nTime Complexity: O(3^N * 4^M), where N is the number of digits that map to 3 letters and M is the number of digits that map to 4 letters.\nSpace Complexity: O(N + M), where N is the number of digits that map to 3 letters and M is the number of digits that map to 4 letters.\n\nCODE:*/\nvoid solve(int index, string digits, string& temp, vector<string>& ans, vector<string>& mp) {\n    if (index == digits.size()) {\n        ans.push_back(temp);\n        return;\n    }\n\n    int num = digits[index] - '0';\n    for (int i = 0; i < mp[num].size(); i++) {\n        temp.push_back(mp[num][i]);\n        solve(index + 1, digits, temp, ans, mp);\n        temp.pop_back();\n    }\n}\n\nvector<string> letterCombinations(string digits) {\n    if (digits.empty())\n        return {};\n\n    vector<string> mp{\"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n    string temp = \"\";\n    vector<string> ans;\n    solve(0, digits, temp, ans, mp);\n    return ans;\n}\n",
  "Longest_consecutive_subsequence": "/*\nQUESTION:-\n\nGiven an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\n\nExample 1:\nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n\nExample 2:\nInput: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\n*/\n\n/*\nAPPROACH:-\n\nTo find the length of the longest consecutive elements sequence, we can follow these steps:\n\n1. Create a set to store all the elements of the array.\n2. Iterate through the array and insert each element into the set.\n3. For each element, check if its previous consecutive element (num-1) exists in the set. If it does not exist, it means the current element is the starting element of a sequence.\n4. For each starting element, keep incrementing the current element (num+1) and checking if it exists in the set. This will help find the consecutive elements in the sequence.\n5. Keep track of the maximum length of consecutive elements encountered.\n6. Return the maximum length as the result.\n\n*/\n\n// CODE:\nint longestConsecutive(vector<int> &nums)\n{\n    unordered_map<int, int> mp;\n    for (int i = 0; i < nums.size(); i++)\n    {\n        mp[nums[i]]++;\n    }\n    int ans = 0;\n    for (int i = 0; i < nums.size(); i++)\n    {\n        int start = nums[i];\n        // check whehter this can be the start of the subsequence\n        if (mp.find(nums[i] - 1) == mp.end())\n        {\n            int temp = 1;\n            int nxt = nums[i];\n            while (mp.find(nxt + 1) != mp.end())\n            {\n                temp++;\n                nxt++;\n            }\n            ans = max(ans, temp);\n        }\n    }\n    return ans;\n}\n\n// TIME COMPLEXITY: O(n), where n is the size of the input array.\n// SPACE COMPLEXITY: O(n), as we are using a set to store the elements of the array.\n",
  "Missing_number": "/*\nQUESTION:-\nGiven an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\n\nExample 1:\n\nInput: nums = [3,0,1]\nOutput: 2\nExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\nExample 2:\n\nInput: nums = [0,1]\nOutput: 2\nExplanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n*/\n\n/*\nAPPROACH:-\n-> Calculate the optimum sum i.e. sum when all elements were present\n-> Calculate the actual array's sum\n-> Return the optimum sum - actual sum\n*/\n\n// CODE:-\nint missingNumber(vector<int> &nums)\n{\n    int n = nums.size();\n    long long optimum_sum = (n * (n + 1)) / 2; // the sum if no number is absent\n    long long actual_sum = 0;\n    for (auto it : nums)\n    {\n        actual_sum += it;\n    }\n    return optimum_sum - actual_sum;\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(0)",
  "Search_in_rotated_sorted_array_with_duplicates": "/*\nQUESTION:\nThere is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\n\nBefore being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\n\nGiven the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\n\nYou must decrease the overall operation steps as much as possible.\n\nExample 1:\nInput: nums = [2,5,6,0,0,1,2], target = 0\nOutput: true\n\nExample 2:\nInput: nums = [2,5,6,0,0,1,2], target = 3\nOutput: false\n*/\n\n/*\nAPPROACH:\nWe can modify the standard binary search algorithm to search for the target element.\n1. Initialize low = 0 and high = nums.size() - 1.\n2. While low <= high, calculate mid = low + (high - low) / 2.\n3. If nums[mid] equals the target, return true.\n4. If nums[mid] is equal to nums[low], we are in a situation where we can't determine which part of the array is sorted.\n   In this case, we increment low and decrement high to skip the duplicate elements.\n5. If the left part of the array from low to mid is sorted, check if the target lies within this range.\n   If so, update high = mid - 1. Otherwise, update low = mid + 1.\n6. If the right part of the array from mid to high is sorted, check if the target lies within this range.\n   If so, update low = mid + 1. Otherwise, update high = mid - 1.\n7. If the target is not found, return false.\n\nCODE:\n*/\n\nbool search(vector<int>& nums, int target) {\n    int low = 0, high = nums.size() - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (nums[mid] == target)\n            return true;\n        if (nums[mid] == nums[low] && nums[mid] == nums[high]) {\n            low++;\n            high--;\n            continue;\n        }\n        if (nums[low] <= nums[mid]) {\n            if (nums[low] <= target && target <= nums[mid])\n                high = mid - 1;\n            else\n                low = mid + 1;\n        } else {\n            if (nums[mid] <= target && target <= nums[high])\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n    }\n    return false;\n}\n\n// TIME COMPLEXITY: O(log n)\n// SPACE COMPLEXITY: O(1)\n",
  "Sort_LL": "/*\nQUESTION:-\nGiven the head of a linked list, return the list after sorting it in ascending order.\n\nExample:\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n\nAPPROACH:\nTo sort a linked list, we can use the merge sort algorithm.\n1. Implement a function to merge two sorted linked lists.\n2. Implement a function to recursively divide the linked list into two halves.\n3. Apply merge sort on each half.\n4. Merge the sorted halves using the merge function.\n5. Return the head of the sorted linked list.\n\nTIME COMPLEXITY: O(NlogN)\nSPACE COMPLEXITY: O(logN) - Recursive stack space\n\n*/\n\nListNode* merge(ListNode* left, ListNode* right) {\n    if (left == NULL)\n        return right;\n    if (right == NULL)\n        return left;\n    \n    if (left->val < right->val) {\n        left->next = merge(left->next, right);\n        return left;\n    } else {\n        right->next = merge(left, right->next);\n        return right;\n    }\n}\n\nListNode* mergeSort(ListNode* start) {\n    if (start == NULL || start->next == NULL)\n        return start;\n    \n    ListNode* slow = start;\n    ListNode* fast = start->next;\n    \n    // Find the middle of the linked list\n    while (fast && fast->next) {\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n    \n    ListNode* a = mergeSort(slow->next); // Sort the right half\n    slow->next = NULL; // Break the linked list into two halves\n    ListNode* b = mergeSort(start); // Sort the left half\n    \n    return merge(a, b); // Merge the sorted halves\n}\n\nListNode* sortList(ListNode* head) {\n    return mergeSort(head);\n}\n",
  "Split_array_largest": "/*\nQuestion: Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized. Return the minimized largest sum of the split.\n\nExample:\nInput: nums = [7,2,5,10,8], k = 2\nOutput: 18\nExplanation: There are four ways to split nums into two subarrays. The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.\n\nApproach:\n- The problem can be solved using the binary search algorithm.\n- We need to find the range of possible values for the minimized largest sum.\n- The lower bound of the range is the maximum element in the array (as each subarray must contain at least one element).\n- The upper bound of the range is the sum of all elements in the array (as the largest sum cannot exceed the total sum of the array).\n- We perform binary search within this range to find the minimum largest sum that satisfies the given condition.\n- In each iteration, we calculate the mid value of the range and check if it is a valid solution using a helper function.\n- The helper function checks if it is possible to split the array into k subarrays with a maximum sum of mid.\n- If it is possible, we update the answer and search the lower half of the range.\n- If it is not possible, we search the upper half of the range.\n- We continue this process until we find the optimal solution.\n\nTime Complexity: O(n * log(sum of array))\nSpace Complexity: O(1)\n*/\n\nbool isPossible(int mid, vector<int>& nums, int k) {\n    int pos_parts = 1, temp = 0;\n    for (auto it : nums) {\n        if (temp + it <= mid) {\n            temp += it;\n        } else {\n            pos_parts++;\n            if (it > mid)\n                return false;\n            temp = it;\n        }\n    }\n    if (pos_parts <= k)\n        return true;\n    return false;\n}\n\nint splitArray(vector<int>& nums, int k) {\n    int low = INT_MAX, high = 0;\n    int ans = -1;\n    for (auto it : nums) {\n        low = min(low, it);\n        high += it;\n    }\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (isPossible(mid, nums, k)) {\n            ans = mid;\n            high = mid - 1;\n        } else\n            low = mid + 1;\n    }\n    return ans;\n}\n",
  " Bipartite Graph": "/*\nQUESTION:\nThere is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:\n1. There are no self-edges (graph[u] does not contain u).\n2. There are no parallel edges (graph[u] does not contain duplicate values).\n3. If v is in graph[u], then u is in graph[v] (the graph is undirected).\nThe graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.\n\nA graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.\n\nAPPROACH:\n- We can use Depth-First Search (DFS) to color the nodes in the graph such that we can partition them into two sets A and B.\n- While performing the DFS, we use two colors: 1 and -1 to color the nodes. We start by coloring the first node with color 1.\n- For each uncolored node, we perform DFS and color its neighbors with the opposite color.\n- If we encounter a neighbor with the same color as the current node, the graph is not bipartite, and we return false.\n- If the DFS completes without any conflicts, we return true, indicating that the graph is bipartite.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(V + E), where V is the number of nodes (vertices) in the graph, and E is the number of edges in the graph. We visit each node and each edge exactly once during the DFS.\n- Space Complexity: O(V), where V is the number of nodes (vertices) in the graph. We use additional space to store the colors of the nodes.\n*/\n\nbool dfs(int node, int color, vector<vector<int>>& adj, vector<int>& vis){\n    vis[node] = color;\n    for(auto v : adj[node]){\n        if(!vis[v] && !dfs(v, -color, adj, vis)){\n            return false;\n        }\n        if(vis[v] == color){\n            return false;\n        }\n    }\n    return true;\n}\n\nbool isBipartite(vector<vector<int>>& graph) {\n    int n = graph.size();\n    vector<int> vis(n);\n    for(int i = 0; i < n; i++){\n        if(!vis[i] && !dfs(i, 1, graph, vis)){\n            return false;\n        }\n    }\n    return true;\n}\n",
  " Left or Right View": "/*\nQuestion: Given the root of a binary tree, imagine yourself standing on the right side of it,\nreturn the values of the nodes you can see ordered from top to bottom.\n*/\n\n/*\nApproach:\n- Perform a level order traversal of the binary tree.\n- For each level, keep track of the last node encountered (the rightmost node from the viewer's perspective).\n- Add the value of the last node at each level to the result.\n\nComplexity Analysis:\n- Time complexity: O(N), where N is the number of nodes in the binary tree.\n- Space complexity: O(M), where M is the maximum number of nodes at any level in the tree.\n\nCODE:-\n*/\nvector<int> rightSideView(TreeNode* root) {\n    if (!root) return {};\n\n    vector<int> ans;\n    queue<TreeNode*> q;\n    q.push(root);\n\n    while (!q.empty()) {\n        int n = q.size();\n        for (int i = 0; i < n; i++) {\n            TreeNode* curr = q.front();\n            q.pop();\n            if (curr->left) {\n                q.push(curr->left);\n            }\n            if (curr->right) {\n                q.push(curr->right);\n            }\n            // Add only the last node of the level to the answer for right view in case of left view push only the first element\n            if (i == n - 1) {\n                ans.push_back(curr->val);\n            }\n        }\n    }\n\n    return ans;\n}\n",
  " Morris Preorder Traversal": "/* QUESTION:\n\nGiven a binary tree, find the preorder traversal of the tree without using extra space.\n\nAPPROACH:\n\nWe can achieve a non-recursive preorder traversal without using extra space by modifying the binary tree itself.\n\n1. We start with the current node as the root.\n2. While the current node is not NULL, we do the following:\n   - If the current node does not have a left child, we visit the current node and move to its right child.\n   - If the current node has a left child, we find the rightmost node of its left subtree.\n     - If the rightmost node does not have a right child, we visit the current node, make the right child of the rightmost node point to the current node, and move to the left child.\n     - If the rightmost node already has a right child (which points back to the current node), we reset the right child to NULL, visit the current node, and move to its right child.\n3. We repeat this process until we have visited all the nodes in the tree.\n4. Finally, we return the result vector containing the preorder traversal.\n\nCOMPLEXITY ANALYSIS:\n\nLet n be the number of nodes in the binary tree.\n- Time Complexity: The time complexity of this approach is O(n) since we visit each node once.\n- Space Complexity: The space complexity is O(1) since we don't use any extra space.\n\nCODE:\n*/\n\nvector<int> preOrder(Node* root) {\n    vector<int> ans;\n    Node* curr = root;\n\n    while (curr) {\n        if (!curr->left) {\n            ans.push_back(curr->data);\n            curr = curr->right;\n        } else {\n            Node* rightmost = curr->left;\n            while (rightmost->right && rightmost->right != curr)\n                rightmost = rightmost->right;\n\n            if (!rightmost->right) {\n                ans.push_back(curr->data);\n                rightmost->right = curr;\n                curr = curr->left;\n            } else {\n                rightmost->right = NULL;\n                curr = curr->right;\n            }\n        }\n    }\n\n    return ans;\n}\n",
  " Number of ways to arrive the destination with minimum distance": "/*\nQUESTION:-\nYou are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection, and that there is at most one road between any two intersections.\n\nYou are given an integer n and a 2D integer array roads where roads[i] = [ui, vi, timei] means that there is a road between intersections ui and vi that takes timei minutes to travel. You want to know in how many ways you can travel from intersection 0 to intersection n - 1 in the shortest amount of time.\n\nReturn the number of ways you can arrive at your destination in the shortest amount of time. Since the answer may be large, return it modulo 10^9 + 7.\n\nApproach:\n1. We can use Dijkstra's algorithm to find the shortest path from intersection 0 to intersection n-1 and also keep track of the number of ways to reach each intersection in the shortest time.\n2. We start with intersection 0 and keep track of the minimum time required to reach each intersection.\n3. During the process, we also keep track of the number of ways to reach each intersection in the shortest time.\n4. If we find a shorter path to a particular intersection, we update its minimum time and reset the number of ways to reach that intersection to the number of ways to reach the previous intersection.\n5. If we find an equal time path to a particular intersection, we add the number of ways to reach the previous intersection to the number of ways to reach the current intersection.\n\nComplexity Analysis:\n- Let n be the number of intersections and E be the number of roads in the input.\n- Dijkstra's algorithm has a time complexity of O((n+E)log(n)) using a priority queue.\n- The space complexity is O(n) to store the distance and ways arrays.\n*/\n\n#include <vector>\n#include <queue>\nusing namespace std;\n\nint countPaths(int n, vector<vector<int>>& roads) {\n    vector<pair<int, int>> adj[n];\n    for (auto road : roads) {\n        adj[road[0]].push_back({ road[1], road[2] });\n        adj[road[1]].push_back({ road[0], road[2] });\n    }\n    \n    int mod = 1e9 + 7;\n    priority_queue<pair<long long int, long long int>, vector<pair<long long int, long long int>>, greater<pair<long long int, long long int>>> pq;\n    vector<long long int> dis(n, 1e18);\n    vector<long long int> ways(n);\n    \n    dis[0] = 0;\n    ways[0] = 1;\n    pq.push({ 0, 0 });\n\n    while (!pq.empty()) {\n        auto [uwt, u] = pq.top();\n        pq.pop();\n\n        for (auto [v, vwt] : adj[u]) {\n            if (dis[v] > uwt + vwt) {\n                ways[v] = ways[u];\n                dis[v] = uwt + vwt;\n                pq.push({ dis[v], v });\n            }\n            else if (dis[v] == uwt + vwt) {\n                ways[v] = (ways[v] + ways[u]) % mod;\n            }\n        }\n    }\n\n    int ans = ways[n - 1] % mod;\n    return ans;\n}\n",
  " Recover BST": "/*\nQuestion:\nYou are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\n\nExplanation:\n- We perform an in-order traversal of the BST to find the two nodes that are swapped.\n- During the in-order traversal, we keep track of the previous node and compare it with the current node. If the current node is less than the previous node, then we have found the two swapped nodes.\n- We swap the values of the two nodes to recover the BST.\n\nTime Complexity:\n- The in-order traversal takes O(n) time, where n is the number of nodes in the BST.\n\nSpace Complexity:\n- The space complexity is O(h), where h is the height of the BST, as the recursion stack stores the nodes in the leftmost path of the BST.\n\n*/\n\nTreeNode* prev = NULL;\nTreeNode* first = NULL;\nTreeNode* last = NULL;\n\nvoid traversal(TreeNode* root) {\n    if (!root) return;\n    traversal(root->left);\n    if (prev && root->val < prev->val) {\n        if (!first)\n            first = prev;\n        last = root;\n    }\n    prev = root;\n    traversal(root->right);\n}\n\nvoid recoverTree(TreeNode* root) {\n    if (!root) return;\n    traversal(root);\n    int temp = first->val;\n    first->val = last->val;\n    last->val = temp;\n}\n",
  " Rod Cutting Problem": "/*\nQUESTION:\nGiven a rod of length 'N' inches and an array of prices 'price[]', where \nprice[i] denotes the value of a piece of length 'i', determine the maximum \nvalue obtainable by cutting up the rod and selling the pieces.\n\nExample:\nInput: N = 8, Price[] = {1, 5, 8, 9, 10, 17, 17, 20}\nOutput: 22\nExplanation: The maximum obtainable value is 22 by cutting in two pieces \n             of lengths 2 and 6, i.e., 5 + 17 = 22.\n\nAPPROACH:\n- This problem can be solved using Dynamic Programming (DP).\n- Initialize a 2D DP array 'dp' where dp[i][j] represents the maximum \n  value obtainable by cutting a rod of length 'i' with available pieces \n  up to length 'j'.\n- Base case: dp[0][j] = 0 (no rod, so value is 0)\n- For each length 'i' and each possible total length 'j':\n  - dp[i][j] = max(dp[i-1][j], price[i] + dp[i][j - i])\n- The required answer will be dp[N][N] where 'N' is the given length of \n  the rod.\n\nCOMPLEXITY ANALYSIS:\n- The time complexity of the solution is O(N^2), where 'N' is the length \n  of the rod.\n- The space complexity is O(N^2) for the dp array.\n\nCODE:\n*/\n\n// Memeoization\nint fmemo(int i, int val[], int W, vector<vector<int>>& dp){\n    if(i == 1){\n        return (W / i) * val[i - 1];\n    }\n    \n    if(dp[i][W] != -1) return dp[i][W];\n    \n    int take = INT_MIN;\n    if(W >= i) take = val[i - 1] + fmemo(i, val, W - i, dp);\n    int notake = fmemo(i - 1, val, W, dp);\n    \n    return dp[i][W] = max(take, notake);\n}\n\n// Tabulation\nint ftab(int n, int val[]){\n    vector<vector<int>> dp(n+1,vector<int>(n+1));\n    for(int i=1; i<n; i++){\n        for(int W=0; W<=n; W++){\n            if(i==1){\n                dp[i][W] = (W / i) * val[i - 1];\n                continue;\n            }\n            int take = INT_MIN;\n            if(W >= i) take = val[i]+dp[i][W-i];\n            int notake = dp[i-1][W];\n            dp[i][W] = max(take,notake);\n        }\n    }\n    return dp[n][n];\n}\n\nint cutRod(int price[], int N) {\n    vector<vector<int>> dp(N + 1, vector<int>(N + 1, -1));\n    return fmemo(N, price, N, dp);\n}\n",
  "Find_the_minimum_element_in_sorted_rotated_array": "/*\nQUESTION:\nSuppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n\n[4,5,6,7,0,1,2] if it was rotated 4 times.\n[0,1,2,4,5,6,7] if it was rotated 7 times.\n\nGiven the sorted rotated array nums of unique elements, return the minimum element of this array.\n\nAPPROACH:\nWe can use the binary search approach to find the minimum element.\n1. Initialize low = 0 and high = n-1, where n is the size of the array.\n2. While low < high, calculate mid = low + (high - low) / 2.\n3. If nums[mid] > nums[high], it means the minimum element is on the right side of mid, so update low = mid+1.\n4. Otherwise, the minimum element is on the left side of mid or mid itself, so update high = mid.\n5. After the loop ends, low will be pointing to the minimum element index.\n6. Return nums[low] as the result.\n\nCODE:\n*/\n\nint findMin(vector<int>& nums) {\n    int low = 0, high = nums.size()-1;\n    while(low < high){\n        int mid = low + (high - low) / 2;\n        if(nums[mid] > nums[high])\n            low = mid+1;\n        else\n            high = mid;\n    }\n    return nums[low];\n}\n\n// TIME COMPLEXITY: O(log n)\n// SPACE COMPLEXITY: O(1)\n",
  "Kth_missing_number": "/*\nQuestion: Given a sorted array arr of positive integers and an integer k, find the kth positive integer that is missing from the array.\n\nExample:\nInput: arr = [2,3,4,7,11], k = 5\nOutput: 9\nExplanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.\n\nApproach:\n- We can solve this problem by finding the position in the array where the count of missing positive integers becomes greater than or equal to k.\n- Initialize a variable `low` to 0 to represent the start of the array.\n- Initialize a variable `high` to the size of the array minus 1 to represent the end of the array.\n- Initialize a variable `pos` to -1 to store the position of the missing integer.\n- Perform a binary search on the array:\n  - Calculate the middle index `mid` using the formula `low + (high - low) / 2`.\n  - If the count of missing positive integers in the subarray from the start to `mid` is less than k, update `low` to `mid + 1`.\n  - Otherwise, update `pos` to `mid` and update `high` to `mid - 1`.\n- After the binary search, check if a missing integer was found:\n  - If `pos` is still -1, it means that the missing integer should be after the last element in the array. Return the sum of the size of the array and k.\n  - Otherwise, return `pos + k` as the kth missing positive integer.\n\nTime Complexity: O(log n), where n is the size of the array.\nSpace Complexity: O(1)\n\n*/\n\nint findKthPositive(vector<int>& arr, int k) {\n    int low = 0, high = arr.size() - 1;\n    int pos = -1;\n\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n\n        if ((arr[mid] - (mid + 1)) < k)\n            low = mid + 1;\n        else {\n            pos = mid;\n            high = mid - 1;\n        }\n    }\n\n    if (pos == -1)\n        return arr.size() + k;\n\n    return pos + k;\n}\n",
  "Max_consecutive_1's": "/*\nQUESTION:-\nGiven an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\n\nExample 1:\n\nInput: nums = [3,0,1]\nOutput: 2\nExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\nExample 2:\n\nInput: nums = [0,1]\nOutput: 2\nExplanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n*/\n\n/*\nAPPROACH:-\n-> Traverse the entire array and within it run a loop while element's are equal to 1 and store the count\n-> Update the ans as max(ans,cnt)\n*/\n\n// CODE:-\nint findMaxConsecutiveOnes(vector<int> &nums)\n{\n    int ans = 0;\n    for (int i = 0; i < nums.size(); i++)\n    {\n        int cnt = 0; // to store the count of consecutive 1's\n        while (i < nums.size() && nums[i] == 1)\n        {\n            cnt++;\n            i++;\n        }\n        ans = max(ans, cnt);\n    }\n    return ans;\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(0)\n",
  "Reverse_pairs": "/*\nQUESTION:\nGiven an integer array nums, return the number of reverse pairs in the array.\nA reverse pair is a pair (i, j) where:\n0 <= i < j < nums.length and\nnums[i] > 2 * nums[j].\n\nExample:\nInput: nums = [1,3,2,3,1]\nOutput: 2\nExplanation: The reverse pairs are:\n(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1\n\nAPPROACH:\nTo solve this problem, we can use the merge sort algorithm. While merging the two sorted subarrays, we can count the number of reverse pairs.\n\n1. Define a variable 'rev_pair' to store the count of reverse pairs.\n2. Implement the 'merge' function to merge two subarrays and count the reverse pairs.\n3. Implement the 'mergesort' function to recursively divide the array into subarrays and perform merge sort.\n4. Initialize 'rev_pair' to 0 and call the 'mergesort' function on the given array.\n5. Return the 'rev_pair' as the result.\n\nCODE:\n*/\n\nint rev_pair = 0;\n\nvoid merge(int start, int mid, int end, vector<int>& nums){\n    int left_size = mid - start + 1;\n    int right_size = end - mid;\n    vector<int> left(left_size);\n    vector<int> right(right_size);\n\n    for(int i = 0; i < left_size; i++){\n        left[i] = nums[start + i];\n    }\n    for(int i = 0; i < right_size; i++){\n        right[i] = nums[mid + 1 + i];\n    }\n\n    // main logic resides here\n    int m = 0;\n    for(int i = 0; i < left_size; i++){\n        while(m < right_size && left[i] > (long long)2 * right[m]){\n            m++;\n        }\n        rev_pair += m;\n    }\n\n    int i = 0, j = 0, k = start;\n    while(i < left_size && j < right_size){\n        if(left[i] > right[j]){\n            nums[k++] = right[j++];\n        }\n        else{\n            nums[k++] = left[i++];\n        }\n    }\n    while(i < left_size){\n        nums[k++] = left[i++];\n    }\n    while(j < right_size){\n        nums[k++] = right[j++];\n    }\n}\n\nvoid mergesort(int start, int end, vector<int>& nums){\n    if(start >= end)\n        return;\n    int mid = start + (end - start) / 2;\n    mergesort(start, mid, nums);\n    mergesort(mid + 1, end, nums);\n    merge(start, mid, end, nums);\n}\n\nint reversePairs(vector<int>& nums) {\n    rev_pair = 0;\n    mergesort(0, nums.size() - 1, nums);\n    return rev_pair;\n}\n\n/*\nTIME COMPLEXITY: O(n log n), where n is the size of the array.\nSPACE COMPLEXITY: O(n), where n is the size of the array.\n*/\n",
  "Set_matrix_0's": "/*\nQUESTION:\nGiven an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\n\nExample 1:\nInput: matrix = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[1,0,1],[0,0,0],[1,0,1]]\n\nExample 2:\nInput: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n\nAPPROACH:\nTo solve this problem in-place, we can follow these steps:\n1. Use two boolean variables, firstRowZero and firstColZero, to check if the first row and first column contain zeros initially.\n2. Iterate through the matrix and if an element is zero, set the corresponding element in the first row and first column to zero.\n3. Iterate through the matrix again, excluding the first row and first column. If an element in the first row or first column is zero, set the current element to zero.\n4. Finally, based on the values in firstRowZero and firstColZero, set the first row and first column to zero if needed.\n\nTIME COMPLEXITY: O(m * n), where m and n are the dimensions of the matrix.\nSPACE COMPLEXITY: O(1), as we are using constant extra space.\n\n*/\n\n// CODE:\nvoid setZeroes(vector<vector<int>>& matrix) {\n    int m = matrix.size();\n    int n = matrix[0].size();\n    bool firstRowZero = false;\n    bool firstColZero = false;\n\n    // Check if the first row contains zero\n    for (int j = 0; j < n; j++) {\n        if (matrix[0][j] == 0) {\n            firstRowZero = true;\n            break;\n        }\n    }\n\n    // Check if the first column contains zero\n    for (int i = 0; i < m; i++) {\n        if (matrix[i][0] == 0) {\n            firstColZero = true;\n            break;\n        }\n    }\n\n    // Mark zeros in the first row and column\n    for (int i = 1; i < m; i++) {\n        for (int j = 1; j < n; j++) {\n            if (matrix[i][j] == 0) {\n                matrix[i][0] = 0;\n                matrix[0][j] = 0;\n            }\n        }\n    }\n\n    // Set rows to zero\n    for (int i = 1; i < m; i++) {\n        if (matrix[i][0] == 0) {\n            for (int j = 1; j < n; j++) {\n                matrix[i][j] = 0;\n            }\n        }\n    }\n\n    // Set columns to zero\n    for (int j = 1; j < n; j++) {\n        if (matrix[0][j] == 0) {\n            for (int i = 1; i < m; i++) {\n                matrix[i][j] = 0;\n            }\n        }\n    }\n\n    // Set first row to zero\n    if (firstRowZero) {\n        for (int j = 0; j < n; j++) {\n            matrix[0][j] = 0;\n        }\n    }\n\n    // Set first column to zero\n    if (firstColZero) {\n        for (int i = 0; i < m; i++) {\n            matrix[i][0] = 0;\n        }\n    }\n}\n\n// TIME COMPLEXITY: O(m * n), where m and n are the dimensions of the matrix.\n// SPACE COMPLEXITY: O(1), as we are using constant extra space.\n",
  "Sort_0_1_2_in_LL": "/*\nQUESTION:-\nGiven a linked list of N nodes where nodes can contain values 0s, 1s, and 2s only. \nThe task is to segregate 0s, 1s, and 2s in the linked list such that all zeros segregate to the head side, 2s at the end of the linked list, and 1s in the middle of 0s and 2s.\n\nExample:\nInput:\nN = 8\nvalue[] = {1,2,2,1,2,0,2,2}\nOutput: 0 1 1 2 2 2 2 2\nExplanation: All the 0s are segregated to the left end of the linked list, 2s to the right end of the list, and 1s in between.\n\nAPPROACH:\nCount the number of 0s, 1s, and 2s in the linked list.\nTraverse the linked list and overwrite the nodes with 0s, 1s, and 2s based on their counts.\n\nTIME COMPLEXITY: O(N)\nSPACE COMPLEXITY: O(1)\n\n*/\n\nNode* segregate(Node* head) {\n    int zeroCnt = 0, oneCnt = 0, twoCnt = 0;\n    Node* curr = head;\n    \n    // Count the number of 0s, 1s, and 2s in the linked list\n    while (curr) {\n        if (curr->data == 0) zeroCnt++;\n        if (curr->data == 1) oneCnt++;\n        if (curr->data == 2) twoCnt++;\n        curr = curr->next;\n    }\n    \n    curr = head;\n    \n    // Overwrite the nodes with 0s, 1s, and 2s based on their counts\n    while (zeroCnt) {\n        curr->data = 0;\n        zeroCnt--;\n        curr = curr->next;\n    }\n    while (oneCnt) {\n        curr->data = 1;\n        oneCnt--;\n        curr = curr->next;\n    }\n    while (twoCnt) {\n        curr->data = 2;\n        twoCnt--;\n        curr = curr->next;\n    }\n    \n    return head;\n}\n",
  " Detect Cycle in Directed Graph": "/*\nQUESTION:\nGiven a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.\n\nAPPROACH:\n- To check for cycles in a directed graph, we can use Depth-First Search (DFS) with backtracking.\n- During the DFS, we maintain a visited array to keep track of nodes that have been visited.\n- We perform DFS from each unvisited node to explore the graph and check for cycles.\n- If we encounter a node that is already visited in the current DFS traversal, it means we have found a cycle, and we return true.\n- If we complete the DFS for all nodes without finding any cycle, we return false.\n\nCOMPLEXITY ANALYSIS:\n- Time Complexity: O(V + E), where V is the number of vertices (nodes) and E is the number of edges in the graph. We visit each node and each edge exactly once during the DFS.\n- Space Complexity: O(V), where V is the number of vertices (nodes) in the graph. We use additional space to store the visited status of the nodes.\n*/\n\nbool dfs(int node, vector<int> adj[], vector<bool>& vis){\n    vis[node] = true;\n    for(auto v : adj[node]){\n        if(!vis[v] && dfs(v, adj, vis)){\n            return true;\n        }\n        else if(vis[v]){\n            return true;\n        }\n    }\n    vis[node] = false;\n    return false;\n}\n\nbool isCyclic(vector<vector<int>>& edges, int v, int e)\n{\n    vector<int> adj[v];\n    for(auto it : edges){\n        adj[it[0]].push_back(it[1]);\n    }\n    vector<bool> vis(v);\n    for(int i = 0; i < v; i++){\n        if(!vis[i] && dfs(i, adj, vis)){\n            return true;\n        }\n    }\n    return false;\n}\n",
  " Largest BST in Binary Tree": "/*\nQuestion:\nGiven a binary tree. Find the size of its largest subtree that is a Binary Search Tree.\n\nExplanation:\n- We use a recursive function to traverse the binary tree in a bottom-up manner.\n- At each node, we check if the left and right subtrees are binary search trees.\n- If the current node satisfies the binary search tree condition (i.e., the value of the current node is greater than the maximum value in the left subtree and less than the minimum value in the right subtree), then we update the size of the largest subtree.\n- We return a triplet containing the size of the subtree, the minimum value in the subtree, and the maximum value in the subtree.\n\nTime Complexity:\n- The recursive function visits each node once, so the time complexity is O(n), where n is the number of nodes in the binary tree.\n\nSpace Complexity:\n- The space complexity is O(h), where h is the height of the binary tree, as the recursion stack stores the nodes in the path from the root to the deepest leaf node.\n\n*/\n\ntypedef pair<int,pair<int,int>> triplet;\n\ntriplet solve(Node* root) {\n    if (!root) return {0, {INT_MAX, INT_MIN}};\n    auto lef = solve(root->left);\n    auto rig = solve(root->right);\n    if (lef.second.second < root->data && root->data < rig.second.first)\n        return {lef.first + rig.first + 1, {min(lef.second.first, root->data), max(rig.second.second, root->data)}};\n    // here we are returning such values so that it bst condition doesn't satisfy upwards\n    return {max(lef.first, rig.first), {INT_MIN, INT_MAX}};\n}\n\nint largestBst(Node *root) {\n    auto ans = solve(root);\n    return ans.first;\n}\n",
  " Morris Inorder Traversal": "/* QUESTION:\n\nGiven a binary tree, find the inorder traversal of the tree without using extra space.\n\nAPPROACH:\n\nWe can achieve a non-recursive inorder traversal without using extra space by modifying the binary tree itself.\n\n1. We start with the current node as the root.\n2. While the current node is not NULL, we do the following:\n   - If the current node does not have a left child, we visit the current node and move to its right child.\n   - If the current node has a left child, we find the rightmost node of its left subtree.\n     - If the rightmost node does not have a right child, we make the right child point to the current node and move to the left child.\n     - If the rightmost node already has a right child (which points back to the current node), we reset the right child to NULL, visit the current node, and move to its right child.\n3. We repeat this process until we have visited all the nodes in the tree.\n4. Finally, we return the result vector containing the inorder traversal.\n\nCOMPLEXITY ANALYSIS:\n\nLet n be the number of nodes in the binary tree.\n- Time Complexity: The time complexity of this approach is O(n) since we visit each node once.\n- Space Complexity: The space complexity is O(1) since we don't use any extra space.\n\nCODE:\n*/\n\nvector<int> inOrder(Node* root) {\n    vector<int> ans;\n    Node* curr = root;\n\n    while (curr) {\n        if (!curr->left) {\n            ans.push_back(curr->data);\n            curr = curr->right;\n        } else {\n            Node* rightmost = curr->left;\n            while (rightmost->right && rightmost->right != curr)\n                rightmost = rightmost->right;\n\n            if (!rightmost->right) {\n                rightmost->right = curr;\n                curr = curr->left;\n            } else {\n                ans.push_back(curr->data);\n                rightmost->right = NULL;\n                curr = curr->right;\n            }\n        }\n    }\n\n    return ans;\n}\n",
  " Symmetric Tree": "/**\n QUESTION:\n Given the root of a binary tree, check whether it is a mirror of itself\n (i.e., symmetric around its center).\n \n Example:\n Input: root = [1,2,2,3,4,4,3]\n Output: true\n */\n\n/**\n APPROACH:\n We can solve this problem using a recursive approach.\n 1. Define a helper function \"isMirror\" that takes two tree nodes as input.\n 2. Base case:\n    - If both nodes are NULL, return true.\n    - If either node is NULL, return false.\n 3. Check if the values of the two nodes are equal.\n 4. Recursively call \"isMirror\" on the left and right children of the two nodes:\n    - isMirror(node1->left, node2->right)\n    - isMirror(node1->right, node2->left)\n 5. Return the logical AND of the above two recursive calls.\n 6. In the main \"isSymmetric\" function, return the result of calling \"isMirror\" on the root's left and right children.\n \n COMPLEXITY ANALYSIS:\n - The time complexity is O(N), where N is the number of nodes in the binary tree, as we need to visit all the nodes once.\n - The space complexity is O(H), where H is the height of the tree, due to the recursive function calls on the stack.\n   In the worst case, the height of the tree can be equal to the number of nodes, resulting in O(N) space complexity.\n\nCODE:-\n*/\n\nbool isMirror(TreeNode* node1, TreeNode* node2) {\n    if (!node1 && !node2)\n        return true;\n    if (!node1 || !node2)\n        return false;\n    return (node1->val == node2->val) &&\n           isMirror(node1->left, node2->right) &&\n           isMirror(node1->right, node2->left);\n}\n\nbool isSymmetric(TreeNode* root) {\n    return isMirror(root->left, root->right);\n}\n",
  "Add_1_to_LL": "/*\nQUESTION:-\nA number N is represented in a linked list such that each digit corresponds to a node in the linked list. \nYou need to add 1 to the number represented by the linked list.\n\nAPPROACH:\nTo add 1 to the number represented by the linked list, we can reverse the linked list, perform the addition, and then reverse it back.\nFirst, reverse the linked list.\nTraverse the reversed linked list while keeping track of the carry.\nAdd 1 to the least significant digit (head) and update the carry if necessary.\nContinue traversing the linked list, adding the carry to each digit and updating the carry.\nIf there is still a remaining carry after traversing the linked list, create a new node with the carry as its value and append it to the end of the linked list.\nReverse the linked list again to restore its original order.\n\nTIME COMPLEXITY: O(N), where N is the length of the linked list.\nSPACE COMPLEXITY: O(1)\n\n*/\n\nNode* reverseLL(Node* head) {\n    Node* prev = NULL;\n    Node* curr = head;\n    while (curr) {\n        Node* frwd = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = frwd;\n    }\n    return prev;\n}\n\nNode* addOne(Node* head) {\n    head = reverseLL(head);\n    Node* curr = head;\n    int carry = 1;\n    Node* last;\n    while (curr) {\n        long sum = curr->data + carry;\n        curr->data = sum % 10;\n        carry = sum / 10;\n        if (curr && !curr->next)\n            last = curr;\n        curr = curr->next;\n    }\n    while (carry) {\n        last->next = new Node(carry % 10);\n        carry = carry / 10;\n        last = last->next;\n    }\n    head = reverseLL(head);\n    return head;\n}\n",
  "Find_single_element_in_sorted_array": "/*\nQUESTION:\nYou are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.\n\nReturn the single element that appears only once.\n\nAPPROACH:\nSince the array is sorted and every element appears exactly twice except for one element, we can use binary search to find the single element.\n1. Initialize low = 0 and high = nums.size()-1, where nums is the input array.\n2. While low < high, calculate mid = low + (high - low) / 2.\n3. Check if mid is an even index (mid % 2 == 0).\n    - If nums[mid] is equal to nums[mid + 1], it means the single element is on the right side, so update low = mid + 1.\n    - Otherwise, the single element is on the left side, so update high = mid.\n4. If mid is an odd index (mid % 2 == 1).\n    - If nums[mid] is not equal to nums[mid + 1], it means the single element is on the right side, so update low = mid + 1.\n    - Otherwise, the single element is on the left side, so update high = mid.\n5. After the loop ends, low will be pointing to the single element.\n6. Return nums[low] as the result.\n\nCODE:\n*/\n\nint singleNonDuplicate(vector<int>& nums) {\n    int low = 0, high = nums.size() - 1;\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (mid % 2 == 0) {\n            if (nums[mid] == nums[mid + 1])\n                low = mid + 1;\n            else\n                high = mid;\n        } else {\n            if (nums[mid] != nums[mid + 1])\n                low = mid + 1;\n            else\n                high = mid;\n        }\n    }\n    return nums[low];\n}\n\n// TIME COMPLEXITY: O(log n)\n// SPACE COMPLEXITY: O(1)\n",
  "Gas_station": "/*\nQuestions:-\nWe have an horizontal number line. On that number line, we have gas stations at positions stations[0], stations[1], ..., stations[N-1], where N = size of the stations array. Now, we add K more gas stations so that D, the maximum distance between adjacent gas stations, is minimized. We have to find the smallest possible value of D. Find the answer exactly to 2 decimal places.\n\nExample 1:\n\nInput:\nN = 10\nstations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nK = 9\nOutput: 0.50\nExplanation: Each of the 9 stations can be added mid way between all the existing adjacent stations.\nExample 2:\n\nInput:\nN = 10\nstations = [3,6,12,19,33,44,67,72,89,95]\nK = 2\nOutput: 14.00\nExplanation: Construction of gas stations at 86 locations\n\nApproach:\n- To minimize the maximum distance between adjacent gas stations, we can perform binary search on the possible range of distances.\n- Initialize `low` to 0 and `high` to the maximum distance between adjacent existing gas stations.\n- While `high - low` is greater than a small threshold (e.g., 1e-6), calculate the mid-point `mid` between `low` and `high`.\n- Check if it is possible to add `K` additional gas stations such that the maximum distance between adjacent gas stations is less than or equal to `mid`.\n  - Iterate over the existing gas stations and check the distance between adjacent stations.\n  - If the total number of additional stations required is less than or equal to `K`, it is possible to achieve the maximum distance `mid`.\n- If it is possible, update `high` to `mid`, as we are looking for smaller distances.\n- Otherwise, update `low` to `mid`.\n- Finally, return the value of `low` plus a small value (e.g., 0.000001) to represent the answer to 2 decimal places.\n\nTime Complexity: O(N log M), where N is the number of existing gas stations and M is the range of distances between adjacent gas stations.\nSpace Complexity: O(1), as we are using constant extra space.\n*/\n\nbool isPossible(double mid, vector<int>& stations, int K) {\n    int req_stations = 0;\n    for (int i = 1; i < stations.size(); i++) {\n        req_stations += floor((stations[i] - stations[i - 1]) / mid);\n    }\n    return req_stations <= K;\n}\n\ndouble findSmallestMaxDist(vector<int>& stations, int K) {\n    double low = 0, high = stations[stations.size() - 1] - stations[0];\n    while (high - low > 1e-6) {\n        double mid = low + (high - low) / 2;\n        if (isPossible(mid, stations, K)) {\n            high = mid;\n        } else {\n            low = mid;\n        }\n    }\n    return low + 0.000001;\n}\n",
  "Longest_subarray_with_given_sum": "/*\nQUESTION:-\nYou are given an array 'A' of size 'N' and an integer 'K'. You need to print the length of the longest subarray of array 'A' whose sum = 'K'.\nExample:\nInput: 'N' = 7 'K' = 3\n'A' = [1, 2, 3, 1, 1, 1, 1]\nOutput: 3\nExplanation: Subarrays whose sum = '3' are:\n[1, 2], [3], [1, 1, 1], [1, 1, 1]\nHere, the length of the longest subarray is 3, which is our final answer.\n*/\n\n/*\nAPPROACH:-\n-> Use sliding window approach using two pointers start and end\n-> Run a loop to traverse the entire array add from end and subtract from start when sum>k\n-> If sum==k then, update the ans now, window size = end-start+1\n*/\n\n// CODE:-\nint longestSubarrayWithSumK(vector<int> a, long long k)\n{\n    int start = 0;\n    int ans = 0;\n    long long sum = 0;\n    int n = a.size();\n\n    for (int end = 0; end < n; end++)\n    {\n        sum += a[end];\n        while (sum > k)\n        {\n            sum -= a[start];\n            start++;\n        }\n        if (sum == k)\n        {\n            ans = max(ans, end - start + 1);\n        }\n    }\n    return ans;\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(0)",
  "Maximum_product_subarray": "/*QUESTION:\n\nGiven an integer array nums, find a subarray that has the largest product, and return the product.\n\nExample:\n\nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n\nAPPROACH:\n\nTo find the subarray with the largest product, we iterate through the array while keeping track of the current product. We maintain two variables: `ans` to store the maximum product found so far and `prdct` to store the current product. Since negative numbers can change the sign and potentially result in a larger product, we run the loop twice, once from left to right and once from right to left.\n\nCODE:*/\n\nint maxProduct(vector<int>& nums) {\n    int ans = INT_MIN;\n    int prdct = 1;\n\n    // Iterate from left to right\n    for (int i = 0; i < nums.size(); i++) {\n        prdct = prdct * nums[i];\n        ans = max(ans, prdct);\n        if (prdct == 0)\n            prdct = 1;\n    }\n\n    prdct = 1;\n\n    // Iterate from right to left\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        prdct = prdct * nums[i];\n        ans = max(ans, prdct);\n        if (prdct == 0)\n            prdct = 1;\n    }\n\n    return ans;\n}\n\n/*\nTIME COMPLEXITY: O(N), where N is the size of the input array.\nSPACE COMPLEXITY: O(1).\n*/\n",
  "Rotate_matrix": "/*\nQUESTION:-\n\nYou are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n\nExample 1:\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n\nExample 2:\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n\n*/\n\n/*\nAPPROACH:-\n\nTo rotate the image by 90 degrees clockwise in-place, we can follow these steps:\n\n1. Transpose the matrix: Iterate over the matrix and swap each element (i, j) with its corresponding element (j, i). This step transforms rows into columns.\n\n2. Reverse each row: Iterate over each row in the transposed matrix and reverse the elements. This step ensures the rotation in a clockwise direction.\n\n*/\n\n// CODE: \n\nvoid rotate(vector<vector<int>>& matrix) {\n    // Transpose the matrix\n    int n = matrix.size();\n    int m = matrix[0].size();\n    for(int i=0; i<n; i++){\n        // note here we move \n        for(int j=0; j<i; j++){\n            swap(matrix[i][j],matrix[j][i]);\n        }\n    }\n\n    // Reverse each row\n    for(int i=0; i<n; i++){\n        reverse(matrix[i].begin(),matrix[i].end());\n    }\n}\n\n// TIME COMPLEXITY = O(N^2), where N is the size of the matrix.\n// SPACE COMPLEXITY = O(1)\n",
  " Flatten Binary Tree": "/* QUESTION:\n\nGiven the root of a binary tree, flatten the tree into a \"linked list\".\n\nAPPROACH:\n\nTo flatten the binary tree into a linked list, we can modify the tree in-place using a modified preorder traversal.\n\n1. We start with the current node as the root.\n2. While the current node is not NULL, we do the following:\n   - If the current node has a left child, we find the rightmost node of its left subtree.\n     - We make the right child of the rightmost node point to the right child of the current node.\n     - We set the left child of the current node to NULL.\n     - We set the right child of the current node to its left child.\n   - We move to the right child of the current node.\n3. We repeat this process until we have visited all the nodes in the tree.\n\nCOMPLEXITY ANALYSIS:\n\nLet n be the number of nodes in the binary tree.\n- Time Complexity: The time complexity of this approach is O(n) since we visit each node once.\n- Space Complexity: The space complexity is O(1) since we don't use any extra space.\n\nCODE:\n*/\n\nvoid flatten(TreeNode* root) {\n    TreeNode* curr = root;\n\n    while (curr) {\n        if (curr->left) {\n            TreeNode* temp = curr->left;\n            while (temp->right)\n                temp = temp->right;\n\n            temp->right = curr->right;\n            curr->left = NULL;\n            curr->right = curr->left;\n        }\n        curr = curr->right;\n    }\n}\n",
  "Add_two_LL": "/*\nQUESTION:-\nYou are given two non-empty linked lists representing two non-negative integers. \nThe digits are stored in reverse order, and each of their nodes contains a single digit. \nAdd the two numbers and return the sum as a linked list.\n\nAPPROACH:\nTraverse both linked lists simultaneously, starting from the heads.\nAt each step, add the corresponding digits from both linked lists along with the carry (initialized as 0).\nCreate a new node with the sum%10 and update the carry as sum/10.\nMove to the next nodes in both linked lists.\nContinue this process until both linked lists are traversed completely and there is no carry left.\nIf one linked list is shorter than the other, consider its remaining digits as 0.\nIf there is still a remaining carry, create a new node with the carry and append it to the result linked list.\nReturn the head of the result linked list.\n\nTIME COMPLEXITY: O(max(N, M)), where N and M are the lengths of the two input linked lists.\nSPACE COMPLEXITY: O(max(N, M)), as the length of the result linked list can be at most max(N, M)+1.\n\n*/\n\nListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n    ListNode* p1 = l1;\n    ListNode* p2 = l2;\n    ListNode* dummy = new ListNode(); // Dummy node to simplify the logic\n    ListNode* ans = dummy;\n    int sum = 0, carry = 0;\n    while (p1 || p2) {\n        sum += carry; // Add the carry from the previous step\n        if (p1) {\n            sum += p1->val;\n            p1 = p1->next;\n        }\n        if (p2) {\n            sum += p2->val;\n            p2 = p2->next;\n        }\n        ans->next = new ListNode(sum % 10); // Create a new node with the current digit\n        carry = sum / 10; // Update the carry for the next step\n        sum = 0;\n        ans = ans->next; // Move to the next node in the result linked list\n    }\n    if (carry) {\n        ans->next = new ListNode(carry); // Append the remaining carry as a new node\n    }\n    return dummy->next; // Return the head of the result linked list (excluding the dummy node)\n}\n",
  "Find_element_present_only_once": "/*\nQUESTION:-\nGiven a non-empty array of integers nums, every element appears twice except for one. Find that single one.\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\n\n\nExample 1:\nInput: nums = [2,2,1]\nOutput: 1\n\nExample 2:\nInput: nums = [4,1,2,1,2]\nOutput: 4\n*/\n\n/*\nAPPROACH:-\n-> We can use XOR operation as we know xor cancles out the same elements\n-> Intial xr=0 then traverse the entire array and xor each element with xr\n-> Since only one element is present once and all other are present twice so the remaining element would be the\n    one which is present only once cause all other gets cancels out\n*/\n\n// CODE:-\nint singleNumber(vector<int> &nums)\n{\n    int xr = 0;\n    for (int i = 0; i < nums.size(); i++)\n    {\n        xr = nums[i] ^ xr;\n    }\n    return xr;\n}\n\n// TIME COMPLEXITY = O(N)\n// SPACE COMPLEXITY = O(0)",
  "Find_how_many_times_array_is_rotated": "/*\nQUESTION:\nGiven an ascending sorted rotated array Arr of distinct integers of size N. The array is right rotated K times. Find the value of K.\n\nExample 1:\n\nInput:\nN = 5\nArr[] = {5, 1, 2, 3, 4}\nOutput: 1\nExplanation: The given array is 5 1 2 3 4. \nThe original sorted array is 1 2 3 4 5. \nWe can see that the array was rotated \n1 times to the right.\n\nAPPROACH:\nTo find the value of K, we can use binary search.\n1. Initialize low = 0 and high = N-1, where N is the size of the array.\n2. While low < high, calculate mid = low + (high - low) / 2.\n3. Check if arr[mid] > arr[n-1].\n    - If true, it means the rotation point lies on the right side of mid, so update low = mid + 1.\n    - If false, it means the rotation point lies on the left side of mid or mid is the rotation point, so update high = mid.\n4. After the loop ends, low will be pointing to the rotation point.\n5. Return low as the value of K.\n\nCODE:\n*/\n\nint findKRotation(int arr[], int n) {\n    int low = 0, high = n - 1;\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] > arr[n - 1])\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;\n}\n\n// TIME COMPLEXITY: O(log n)\n// SPACE COMPLEXITY: O(1)\n",
  "Longest_subarray_with_sum_k_containg_+ves_and_-ves": "/*Question:\nGiven an array containing N integers and an integer K, find the length of the longest subarray with the sum of the elements equal to K.\n\nExample:\nInput:\nA[] = {10, 5, 2, 7, 1, 9}\nK = 15\nOutput:\n4\nExplanation:\nThe sub-array is {5, 2, 7, 1}.\n\nApproach:\nTo solve this problem, we can use a prefix sum approach along with a hashmap to keep track of the prefix sums encountered so far. We iterate through the array and maintain a prefix sum variable. At each index, we check if the prefix sum equals K, in which case we update the maximum length of the subarray found so far. Additionally, we check if the current prefix sum minus K exists in the hashmap. If it does, it means there is a subarray between the previous occurrence of the prefix sum minus K and the current index that sums up to K. We update the maximum length accordingly. We store the prefix sums and their corresponding indices in the hashmap.\n\nCode:\n*/\nint lenOfLongSubarr(int A[], int N, int K) {\n    int pref_sum = 0;\n    int ans = 0;\n    unordered_map<int, int> mp;\n\n    for (int i = 0; i < N; i++) {\n        pref_sum += A[i];\n        if (pref_sum == K)\n            ans = max(ans, i + 1);\n        if (mp.find(pref_sum - K) != mp.end())\n            ans = max(ans, i - mp[pref_sum - K]);\n        if (mp.find(pref_sum) == mp.end())\n            mp[pref_sum] = i;\n    }\n    return ans;\n}\n/*\nTime Complexity: The code iterates through the array once, resulting in a time complexity of O(N), where N is the size of the array.\nSpace Complexity: The code uses an unordered map to store the prefix sums and their corresponding indices. In the worst case, all elements of the array could be distinct, leading to a space complexity of O(N) to store the prefix sums in the map.\n*/",
  "Median_of_two_sorted_arrays": "/*QUESTION:\nGiven two sorted arrays nums1 and nums2 of sizes m and n respectively, you need to find the median of the two sorted arrays.\n\nAPPROACH:\nTo find the median of two sorted arrays, we can apply the concept of binary search. The overall time complexity of the solution should be O(log (m+n)).\n\n1. First, we ensure that nums1 is the smaller sized array. If not, we swap nums1 and nums2.\n2. Calculate the optimal count opt_cnt, which is (nums1.size() + nums2.size() + 1) / 2. This represents the median index in the merged array.\n3. Initialize low to 0 and high to nums1.size() - 1.\n4. Perform binary search until low is less than or equal to high:\n     - Calculate the cut1 as low + (high - low) / 2, which represents the potential index to partition nums1.\n     - Calculate cut2 as opt_cnt - cut1, which represents the corresponding index in nums2.\n     - Calculate l1, l2, r1, and r2 as the left and right elements around the potential partition points.\n     - If l1 is less than or equal to r2 and l2 is less than or equal to r1, it means we have found the correct partition points.\n          - If the total number of elements is even, return the average of the maximum of l1 and l2 and the minimum of r1 and r2.\n          - If the total number of elements is odd, return the maximum of l1 and l2.\n     - If l1 is greater than r2, move the high pointer to cut1 - 1.\n     - Otherwise, move the low pointer to cut1 + 1.\n5. If no median is found, return 0.0.\n\nCODE:*/\ndouble findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n    if (nums1.size() > nums2.size())\n        return findMedianSortedArrays(nums2, nums1);\n        \n    int opt_cnt = (nums1.size() + nums2.size() + 1) / 2;\n    int low = 0, high = nums1.size();\n    \n    while (low <= high) {\n        int cut1 = low + (high - low) / 2;\n        int cut2 = opt_cnt - cut1;\n        int l1, l2, r1, r2;\n\n        (cut1 - 1 < 0) ? l1 = INT_MIN : l1 = nums1[cut1 - 1];\n        (cut2 - 1 < 0) ? l2 = INT_MIN : l2 = nums2[cut2 - 1];\n        (cut1 >= nums1.size()) ? r1 = INT_MAX : r1 = nums1[cut1];\n        (cut2 >= nums2.size()) ? r2 = INT_MAX : r2 = nums2[cut2];\n\n        if (l1 <= r2 && l2 <= r1) {\n            if ((nums1.size() + nums2.size()) % 2 == 0)\n                return (max(l1, l2) + min(r1, r2)) / 2.0;\n            return max(l1, l2);\n        } else if (l1 > r2) {\n            high = cut1 - 1;\n        } else {\n            low = cut1 + 1;\n        }\n    }\n    return 0.0;\n}\n\n/*\nCOMPLEXITY ANALYSIS:\n- Time complexity: O(log(min(m, n))), where m and n are the sizes of the input arrays nums1 and nums2, respectively. We perform binary search on the smaller array.\n- Space complexity: O(1), as we use constant extra space throughout the algorithm.\n*/\n",
  "Spiral_traversal": "/*\nQUESTION:-\n\nGiven an m x n matrix, return all elements of the matrix in spiral order.\n\nExample 1:\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,3,6,9,8,7,4,5]\n\nExample 2:\nInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\n\n*/\n\n/*\nAPPROACH:-\n\nTo traverse the matrix in a spiral order, we can use the following steps:\n\n1. Initialize four variables: top, bottom, left, and right to keep track of the boundaries of the current spiral.\n2. Create an empty vector called 'ans' to store the elements in spiral order.\n3. While the top boundary is less than or equal to the bottom boundary and the left boundary is less than or equal to the right boundary:\n   - Traverse the top row from left to right and add each element to 'ans'.\n   - Increment the top boundary.\n   - Traverse the right column from top to bottom and add each element to 'ans'.\n   - Decrement the right boundary.\n   - Check if the top boundary is still less than or equal to the bottom boundary:\n     - Traverse the bottom row from right to left and add each element to 'ans'.\n     - Decrement the bottom boundary.\n   - Check if the left boundary is still less than or equal to the right boundary:\n     - Traverse the left column from bottom to top and add each element to 'ans'.\n     - Increment the left boundary.\n4. Return the 'ans' vector containing all the elements in spiral order.\n\n*/\n\n// CODE:\n\nvector<int> spiralOrder(vector<vector<int>>& matrix) {\n    int n = matrix.size(); \n    int m = matrix[0].size();\n    int top = 0, bottom = n - 1;\n    int left = 0, right = m - 1;\n    vector<int> ans;\n\n    while (top <= bottom && left <= right) {\n        // Traverse top row\n        for (int i = left; i <= right; i++) {\n            ans.push_back(matrix[top][i]);\n        }\n        top++;\n\n        // Traverse right column\n        for (int i = top; i <= bottom; i++) {\n            ans.push_back(matrix[i][right]);\n        }\n        right--;\n\n        // Traverse bottom row\n        if (top <= bottom) {\n            for (int i = right; i >= left; i--) {\n                ans.push_back(matrix[bottom][i]);\n            }\n            bottom--;\n        }\n\n        // Traverse left column\n        if (left <= right) {\n            for (int i = bottom; i >= top; i--) {\n                ans.push_back(matrix[i][left]);\n            }\n            left++;\n        }\n    }\n\n    return ans;\n}\n\n// TIME COMPLEXITY: O(N), where N is the total number of elements in the matrix.\n// SPACE COMPLEXITY: O(1)\n",
  " Serialize and Deserialize": "/* QUESTION:\n\nSerialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n\nAPPROACH:\n\nTo serialize the binary tree, we can perform a preorder traversal of the tree and append the node values to a string, separating them by a delimiter.\n\nTo deserialize the string back to the original tree structure, we can use a stringstream to split the string by the delimiter and recursively build the tree.\n\n1. For serialization:\n   - If the current node is NULL, we append \"N,\" to the string.\n   - Otherwise, we append the node value followed by a delimiter \",\" to the string.\n   - We then recursively serialize the left and right subtrees.\n\n2. For deserialization:\n   - If the current string token is \"N,\" indicating a NULL node, we return NULL.\n   - Otherwise, we convert the string token to an integer and create a new TreeNode with the value.\n   - We then recursively deserialize the left and right subtrees.\n\nCOMPLEXITY ANALYSIS:\n\nLet n be the number of nodes in the binary tree.\n- Time Complexity:\n  - Serialization: O(n) - We visit each node once during the serialization process.\n  - Deserialization: O(n) - We process each string token once during the deserialization process.\n- Space Complexity: O(n) - The space required for the serialized string and the recursion stack.\n\nCODE:\n*/\n\nvoid serialize(TreeNode* root, string& serialized) {\n    if (!root) {\n        serialized += \"N,\";\n        return;\n    }\n    serialized += to_string(root->val) + \",\";\n    serialize(root->left, serialized);\n    serialize(root->right, serialized);\n}\n\nstring serialize(TreeNode* root) {\n    string serialized;\n    serialize(root, serialized);\n    return serialized;\n}\n\nTreeNode* deserialize(stringstream& ss) {\n    string token;\n    getline(ss, token, ',');\n    if (token == \"N\")\n        return nullptr;\n    TreeNode* root = new TreeNode(stoi(token));\n    root->left = deserialize(ss);\n    root->right = deserialize(ss);\n    return root;\n}\n\nTreeNode* deserialize(string data) {\n    stringstream ss(data);\n    return deserialize(ss);\n}\n",
  "Kth_element_of_two_sorted_arrays": "/*\nQuestion:-\nGiven two sorted arrays arr1 and arr2 of size N and M respectively and an element K.\nFind the element that would be at the kth position of the final sorted array.\n\nExample:- \n\nInput:\narr1[] = {2, 3, 6, 7, 9}\narr2[] = {1, 4, 8, 10}\nk = 5\nOutput:\n6\nExplanation:\nThe final sorted array would be -\n1, 2, 3, 4, 6, 7, 8, 9, 10\nThe 5th element of this array is 6.\n\nApproach:\n1. Compare the sizes of the two arrays, arr1 and arr2. If the size of arr1 is greater than arr2, swap the arrays to ensure arr1 is the smaller sized array.\n2. Set the low and high variables for binary search.\n   - If m < k, set low = k - m, otherwise set low = 0.\n   - If k < n, set high = k, otherwise set high = n.\n3. Perform binary search within the range [low, high] to find the kth element.\n4. In each iteration of binary search:\n   - Calculate the cut positions, cut1 and cut2, based on the mid position.\n   - Determine the left and right elements of arr1 and arr2 based on the cut positions.\n   - Compare the left and right elements and adjust the low and high pointers accordingly.\n5. Return the maximum element among the left elements, as it would be the kth element in the final sorted array.\n\nCODE\n*/\n\nint kthElement(int arr1[], int arr2[], int n, int m, int k)\n{\n    // assuming arr1 is the smaller sized array\n    if (n > m)\n        kthElement(arr2, arr1, m, n, k);\n\n    int low, high;\n    (m < k) ? low = k - m : low = 0;\n    (k < n) ? high = k : high = n;\n\n    while (low <= high) {\n        int cut1 = low + (high - low) / 2;\n        int cut2 = k - cut1;\n\n        int l1, l2, r1, r2;\n\n        (cut1 - 1 < 0) ? l1 = INT_MIN : l1 = arr1[cut1 - 1];\n        (cut2 - 1 < 0) ? l2 = INT_MIN : l2 = arr2[cut2 - 1];\n        (cut1 >= n) ? r1 = INT_MAX : r1 = arr1[cut1];\n        (cut2 >= m) ? r2 = INT_MAX : r2 = arr2[cut2];\n\n        if (l1 <= r2 && l2 <= r1) {\n            return max(l1, l2);\n        }\n        else if (l1 > r2) {\n            high = cut1 - 1;\n        }\n        else {\n            low = cut1 + 1;\n        }\n    }\n}\n\n/*\nTime Complexity: O(log(min(N, M)))\nSpace Complexity: O(1)\n*/\n",
  "Search_in_sorted_matrix": "/*\nQUESTION:-\nYou are given an m x n integer matrix matrix with the following two properties:\n\nEach row is sorted in non-decreasing order.\nThe first integer of each row is greater than the last integer of the previous row.\nGiven an integer target, return true if target is in matrix or false otherwise.\n\nYou must write a solution in O(log(m * n)) time complexity.\n\n\n\nExample 1:\nInput:  matrix = [[1,3,5,7]\n                [10,11,16,20]\n                [23,30,34,60]]\n        target = 3\nOutput: true\n*/\n\n/*\nAPPROACH:-\n-> Since the array is sorted we can use binary search low = 0 and high = n*m-1 i.e. total number of elements\n-> Value at mid position could be accessed by matrix[mid/m][mid%m]\n-> Then, follow the traditional binary search\n*/\n\n// CODE:-\nbool searchMatrix(vector<vector<int>> &matrix, int target)\n{\n    int n = matrix.size();\n    int m = matrix[0].size();\n    int low = 0;\n    int high = n * m - 1;\n    while (low <= high)\n    {\n        int mid = low + (high - low) / 2;\n        int val = matrix[mid / m][mid % m];\n        if (val == target)\n            return true;\n        else if (val > target)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return false;\n}\n\n// TIME COMPLEXITY = O(log(M * N))\n// SPACE COMPLEXITY = O(0)",
  "Search_in_rowwise_sorted_matrix": "/*\nQUESTION:\nWrite an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\n- Integers in each row are sorted in ascending order from left to right.\n- Integers in each column are sorted in ascending order from top to bottom.\n\nExample 1:\nInput: matrix = [\n  [1, 4, 7, 11, 15],\n  [2, 5, 8, 12, 19],\n  [3, 6, 9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n], target = 5\nOutput: true\nExplanation: The element 5 is present in the matrix.\n\nExample 2:\nInput: matrix = [\n  [1, 4, 7, 11, 15],\n  [2, 5, 8, 12, 19],\n  [3, 6, 9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n], target = 20\nOutput: false\nExplanation: The element 20 is not present in the matrix.\n\nAPPROACH:\nWe can start the search from the top-right element or the bottom-left element and move towards the target element based on the properties of the matrix.\n\n1. Initialize the current position to the top-right element (row = 0, col = n-1), where n is the number of columns in the matrix.\n2. While the current position is within the matrix boundaries:\n     - If the current element is equal to the target, return true.\n     - If the current element is greater than the target, move left to the previous column.\n     - If the current element is less than the target, move down to the next row.\n3. If the loop exits without finding the target, return false.\n\nCODE:\n*/\n\nbool searchMatrix(vector<vector<int>>& matrix, int target) {\n    int row = 0, col = matrix[0].size() - 1;\n    while (row < matrix.size() && col >= 0) {\n        if (matrix[row][col] == target)\n            return true;\n        else if (matrix[row][col] > target)\n            col--;\n        else\n            row++;\n    }\n    return false;\n}\n\n/*\nTime Complexity: The time complexity of this algorithm is O(m + n), where m is the number of rows and n is the number of columns in the matrix.\n                In the worst case, we may need to traverse through the entire row or column of the matrix.\nSpace Complexity: The space complexity is O(1) since we are using constant extra space.\n*/",
  "Peak_element_in_matrix": "/*\nQUESTION:\nA peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.\n\nGiven a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].\n\nYou may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.\n\nYou must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.\n\nExample 1:\nInput: mat = [[1,4],[3,2]]\nOutput: [0,1]\nExplanation: Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers.\n\nExample 2:\nInput: mat = [[10,20,15],[21,30,14],[7,16,32]]\nOutput: [1,1]\nExplanation: Both 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers.\n\nAPPROACH:\n- Perform a binary search on the columns of the matrix.\n- Find the maximum element in each column and check if it is a peak element by comparing it with its adjacent elements.\n- If it is a peak element, return its position [i, j].\n\nTIME COMPLEXITY: O(m log(n)) or O(n log(m)) - Binary search is performed on the columns of the matrix.\nSPACE COMPLEXITY: O(1) - Constant space is used.\n\nCODE:\n*/\n\nint max_finder(vector<int>& row) {\n    int maxi = INT_MIN;\n    int ans = -1;\n    for (int i = 0; i < row.size(); i++) {\n        if (row[i] > maxi) {\n            maxi = row[i];\n            ans = i;\n        }\n    }\n    return ans;\n}\n\nvector<int> findPeakGrid(vector<vector<int>>& mat) {\n    int n = mat.size();\n    int low = 0, high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        int col = max_finder(mat[mid]);\n        if ((mid == 0 || mat[mid][col] > mat[mid - 1][col]) && \n            (mid == n - 1 || mat[mid][col] > mat[mid + 1][col]))\n            return {mid, col};\n        else {\n            if (mid != 0 && mat[mid][col] < mat[mid - 1][col])\n                high = mid - 1;\n            else\n                low = mid + 1;\n        }\n    }\n    return {-1, -1};\n}\n\n/*\nTIME COMPLEXITY: O(m log(n)) or O(n log(m)) - Binary search is performed on the columns of the matrix.\nSPACE COMPLEXITY: O(1) - Constant space is used.\n*/",
  "Matrix_median": "/*QUESTION:\n\nGiven a row-wise sorted matrix of size R*C where R and C are always odd, find the median of the matrix.\n\nExample:\n\nInput:\nR = 3, C = 3\nM = [[1, 3, 5], \n     [2, 6, 9], \n     [3, 6, 9]]\nOutput: 5\nExplanation: Sorting matrix elements gives us {1, 2, 3, 3, 5, 6, 6, 9, 9}. Hence, 5 is the median. \n\nAPPROACH:\n\nTo find the median of a row-wise sorted matrix, we can follow these steps:\n\n1. Initialize two variables, `low` and `high`, to keep track of the minimum and maximum elements in the matrix.\n2. Iterate through each row and update `low` with the minimum value of the first element in each row and `high` with the maximum value of the last element in each row.\n3. Perform binary search between `low` and `high`.\n4. For each iteration of binary search, count the number of elements in the matrix that are less than or equal to the mid value.\n   - If the count is less than the desired median position, update `low` to mid + 1.\n   - If the count is greater than or equal to the desired median position, update the answer with the mid value and update `high` to mid - 1.\n5. Repeat steps 3-4 until `low` becomes greater than `high`.\n6. Return the final answer as the median of the matrix.\n\nCODE:*/\n\nint median(vector<vector<int>>& matrix, int R, int C) {\n    int low = INT_MAX;\n    int high = INT_MIN;\n    int opt_cnt = (R * C + 1) / 2;\n    int ans = -1;\n\n    for (int i = 0; i < R; i++) {\n        low = min(low, matrix[i][0]);\n        high = max(high, matrix[i][C - 1]);\n    }\n\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        int cnt = 0;\n        for (int i = 0; i < R; i++) {\n            cnt += upper_bound(matrix[i].begin(), matrix[i].end(), mid) - matrix[i].begin();\n        }\n        if (cnt < opt_cnt)\n            low = mid + 1;\n        else {\n            ans = mid;\n            high = mid - 1;\n        }\n    }\n\n    return ans;\n}\n\n/*\nTIME COMPLEXITY: O(R * log(C) * log(range)), where R is the number of rows, C is the number of columns, and range is the difference between the minimum and maximum elements in the matrix. \n                The algorithm performs binary search on each row, which takes O(log(C)) time, and the outer binary search iterates log(range) times.\nSPACE COMPLEXITY: O(1) as the algorithm only uses a constant amount of additional space to store variables.\n*/"
}